{"ast":null,"code":"import { extend, nextTick } from '../../shared/utils';\nimport History from '../../shared/history';\nimport asyncComponent from './async-component';\nfunction modalLoad(modalType, route, loadOptions, direction) {\n  if (loadOptions === void 0) {\n    loadOptions = {};\n  }\n  var router = this;\n  var app = router.app;\n  var isPanel = modalType === 'panel';\n  var modalOrPanel = isPanel ? 'panel' : 'modal';\n  var options = extend({\n    animate: router.params.animate,\n    browserHistory: true,\n    history: true,\n    on: {},\n    once: {}\n  }, loadOptions);\n  var modalParams = extend({}, route.route[modalType]);\n  var modalRoute = route.route;\n  var routeCallback = function routeCallback(modal, name) {\n    var on = options.on,\n      once = options.once;\n    var callback;\n    if (name === 'open') {\n      callback = on.modalOpen || once.modalOpen || on.panelOpen || once.panelOpen;\n    }\n    if (name === 'close') {\n      callback = on.modalClose || once.modalClose || on.panelClose || once.panelClose;\n    }\n    if (name === 'closed') {\n      callback = on.modalClosed || once.modalClosed || on.panelClosed || once.panelClosed;\n    }\n    if (callback) callback(modal);\n  };\n  function onModalLoaded() {\n    // Create Modal\n    var modal = app[modalType].create(modalParams);\n    modalRoute.modalInstance = modal;\n    var hasEl = modal.el;\n    function closeOnSwipeBack() {\n      modal.close();\n    }\n    modal.on(modalOrPanel + \"Open\", function () {\n      if (!hasEl) {\n        // Remove theme elements\n        router.removeThemeElements(modal.el); // Emit events\n\n        modal.$el.trigger(modalType.toLowerCase() + \":init \" + modalType.toLowerCase() + \":mounted\", route, modal);\n        router.emit((!isPanel ? 'modalInit' : '') + \" \" + modalType + \"Init \" + modalType + \"Mounted\", modal.el, route, modal);\n      }\n      router.once('swipeBackMove', closeOnSwipeBack);\n      routeCallback(modal, 'open');\n    });\n    modal.on(modalOrPanel + \"Close\", function () {\n      router.off('swipeBackMove', closeOnSwipeBack);\n      if (!modal.closeByRouter) {\n        router.back();\n      }\n      routeCallback(modal, 'close');\n    });\n    modal.on(modalOrPanel + \"Closed\", function () {\n      modal.$el.trigger(modalType.toLowerCase() + \":beforeremove\", route, modal);\n      modal.emit(\"\" + (!isPanel ? 'modalBeforeRemove ' : '') + modalType + \"BeforeRemove\", modal.el, route, modal);\n      var modalComponent = modal.el.f7Component;\n      routeCallback(modal, 'closed');\n      if (modalComponent) {\n        modalComponent.destroy();\n      }\n      nextTick(function () {\n        if (modalComponent || modalParams.component || modalParams.asyncComponent) {\n          router.removeModal(modal.el);\n        }\n        modal.destroy();\n        delete modal.route;\n        delete modalRoute.modalInstance;\n      });\n    });\n    if (options.route) {\n      // Update Browser History\n      if (router.params.browserHistory && options.browserHistory) {\n        History.push(router.view.id, {\n          url: options.route.url,\n          modal: modalType\n        }, (router.params.browserHistoryRoot || '') + router.params.browserHistorySeparator + options.route.url);\n      } // Set Route\n\n      if (options.route !== router.currentRoute) {\n        modal.route = extend(options.route, {\n          modal: modal\n        });\n        router.currentRoute = modal.route;\n      } // Update Router History\n\n      if (options.history && !options.reloadCurrent) {\n        router.history.push(options.route.url);\n        router.saveHistory();\n      }\n    }\n    if (hasEl) {\n      // Remove theme elements\n      router.removeThemeElements(modal.el); // Emit events\n\n      modal.$el.trigger(modalType.toLowerCase() + \":init \" + modalType.toLowerCase() + \":mounted\", route, modal);\n      router.emit(modalOrPanel + \"Init \" + modalType + \"Init \" + modalType + \"Mounted\", modal.el, route, modal);\n    } // Open\n\n    modal.open(options.animate === false || options.animate === true ? options.animate : undefined);\n  } // Load Modal Content\n\n  function loadModal(loadModalParams, loadModalOptions) {\n    // Load Modal Props\n    var url = loadModalParams.url,\n      content = loadModalParams.content,\n      component = loadModalParams.component,\n      componentUrl = loadModalParams.componentUrl; // Component/Template Callbacks\n\n    function resolve(contentEl) {\n      if (contentEl) {\n        if (typeof contentEl === 'string') {\n          modalParams.content = contentEl;\n        } else if (contentEl.f7Component) {\n          contentEl.f7Component.mount(function (componentEl) {\n            modalParams.el = componentEl;\n            app.$el.append(componentEl);\n          });\n        } else {\n          modalParams.el = contentEl;\n        }\n        onModalLoaded();\n      }\n    }\n    function reject() {\n      router.allowPageChange = true;\n      return router;\n    }\n    if (content) {\n      resolve(content);\n    } else if (component || componentUrl) {\n      // Load from component (F7/Vue/React/...)\n      try {\n        router.modalComponentLoader({\n          rootEl: app.el,\n          component: component,\n          componentUrl: componentUrl,\n          options: loadModalOptions,\n          resolve: resolve,\n          reject: reject\n        });\n      } catch (err) {\n        router.allowPageChange = true;\n        throw err;\n      }\n    } else if (url) {\n      // Load using XHR\n      if (router.xhrAbortController) {\n        router.xhrAbortController.abort();\n        router.xhrAbortController = false;\n      }\n      router.xhrRequest(url, loadModalOptions).then(function (modalContent) {\n        modalParams.content = modalContent;\n        onModalLoaded();\n      }).catch(function () {\n        router.allowPageChange = true;\n      });\n    } else {\n      onModalLoaded();\n    }\n  }\n  var foundLoadProp;\n  'url content component el componentUrl template'.split(' ').forEach(function (modalLoadProp) {\n    if (modalParams[modalLoadProp] && !foundLoadProp) {\n      var _loadModal;\n      foundLoadProp = true;\n      loadModal((_loadModal = {}, _loadModal[modalLoadProp] = modalParams[modalLoadProp], _loadModal), options);\n    }\n  });\n  if (!foundLoadProp && modalType === 'actions') {\n    onModalLoaded();\n  } // Async\n\n  function asyncResolve(resolveParams, resolveOptions) {\n    loadModal(resolveParams, extend(options, resolveOptions));\n  }\n  function asyncReject() {\n    router.allowPageChange = true;\n  }\n  if (modalParams.async) {\n    modalParams.async.call(router, {\n      router: router,\n      to: options.route,\n      from: router.currentRoute,\n      resolve: asyncResolve,\n      reject: asyncReject,\n      direction: direction,\n      app: app\n    });\n  }\n  if (modalParams.asyncComponent) {\n    asyncComponent(router, modalParams.asyncComponent, asyncResolve, asyncReject);\n  }\n  return router;\n}\nfunction modalRemove(modal) {\n  extend(modal, {\n    closeByRouter: true\n  });\n  modal.close();\n}\nexport { modalLoad, modalRemove };","map":null,"metadata":{},"sourceType":"module"}