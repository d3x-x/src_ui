{"ast":null,"code":"import $ from '../../shared/dom7';\nimport History from '../../shared/history';\nimport { getSupport } from '../../shared/get-support';\nimport { getDevice } from '../../shared/get-device';\nimport { now } from '../../shared/utils';\nfunction SwipeBack(r) {\n  var router = r;\n  var $el = router.$el,\n    $navbarsEl = router.$navbarsEl,\n    app = router.app,\n    params = router.params;\n  var support = getSupport();\n  var device = getDevice();\n  var isTouched = false;\n  var isMoved = false;\n  var touchesStart = {};\n  var isScrolling;\n  var $currentPageEl = [];\n  var $previousPageEl = [];\n  var viewContainerWidth;\n  var touchesDiff;\n  var allowViewTouchMove = true;\n  var touchStartTime;\n  var $currentNavbarEl = [];\n  var $previousNavbarEl = [];\n  var dynamicNavbar;\n  var $pageShadowEl;\n  var $pageOpacityEl;\n  var animatableNavEls;\n  var paramsSwipeBackAnimateShadow = params[app.theme + \"SwipeBackAnimateShadow\"];\n  var paramsSwipeBackAnimateOpacity = params[app.theme + \"SwipeBackAnimateOpacity\"];\n  var paramsSwipeBackActiveArea = params[app.theme + \"SwipeBackActiveArea\"];\n  var paramsSwipeBackThreshold = params[app.theme + \"SwipeBackThreshold\"];\n  var transformOrigin = app.rtl ? 'right center' : 'left center';\n  var transformOriginTitleLarge = app.rtl ? 'calc(100% - var(--f7-navbar-large-title-padding-left) - var(--f7-safe-area-left)) center' : 'calc(var(--f7-navbar-large-title-padding-left) + var(--f7-safe-area-left)) center';\n  function animatableNavElements() {\n    var els = [];\n    var inverter = app.rtl ? -1 : 1;\n    var currentNavIsTransparent = $currentNavbarEl.hasClass('navbar-transparent') && !$currentNavbarEl.hasClass('navbar-large') && !$currentNavbarEl.hasClass('navbar-transparent-visible');\n    var currentNavIsLarge = $currentNavbarEl.hasClass('navbar-large');\n    var currentNavIsCollapsed = $currentNavbarEl.hasClass('navbar-large-collapsed');\n    var currentNavIsLargeTransparent = $currentNavbarEl.hasClass('navbar-large-transparent') || $currentNavbarEl.hasClass('navbar-large') && $currentNavbarEl.hasClass('navbar-transparent');\n    var previousNavIsTransparent = $previousNavbarEl.hasClass('navbar-transparent') && !$previousNavbarEl.hasClass('navbar-large') && !$previousNavbarEl.hasClass('navbar-transparent-visible');\n    var previousNavIsLarge = $previousNavbarEl.hasClass('navbar-large');\n    var previousNavIsCollapsed = $previousNavbarEl.hasClass('navbar-large-collapsed');\n    var previousNavIsLargeTransparent = $previousNavbarEl.hasClass('navbar-large-transparent') || $previousNavbarEl.hasClass('navbar-large') && $previousNavbarEl.hasClass('navbar-transparent');\n    var fromLarge = currentNavIsLarge && !currentNavIsCollapsed;\n    var toLarge = previousNavIsLarge && !previousNavIsCollapsed;\n    var $currentNavElements = $currentNavbarEl.find('.left, .title, .right, .subnavbar, .fading, .title-large, .navbar-bg');\n    var $previousNavElements = $previousNavbarEl.find('.left, .title, .right, .subnavbar, .fading, .title-large, .navbar-bg');\n    var activeNavBackIconText;\n    var previousNavBackIconText;\n    if (params.iosAnimateNavbarBackIcon) {\n      if ($currentNavbarEl.hasClass('sliding') || $currentNavbarEl.find('.navbar-inner.sliding').length) {\n        activeNavBackIconText = $currentNavbarEl.find('.left').find('.back .icon + span').eq(0);\n      } else {\n        activeNavBackIconText = $currentNavbarEl.find('.left.sliding').find('.back .icon + span').eq(0);\n      }\n      if ($previousNavbarEl.hasClass('sliding') || $previousNavbarEl.find('.navbar-inner.sliding').length) {\n        previousNavBackIconText = $previousNavbarEl.find('.left').find('.back .icon + span').eq(0);\n      } else {\n        previousNavBackIconText = $previousNavbarEl.find('.left.sliding').find('.back .icon + span').eq(0);\n      }\n      if (activeNavBackIconText.length) {\n        $previousNavElements.each(function (el) {\n          if (!$(el).hasClass('title')) return;\n          el.f7NavbarLeftOffset += activeNavBackIconText.prev('.icon')[0].offsetWidth;\n        });\n      }\n    }\n    $currentNavElements.each(function (navEl) {\n      var $navEl = $(navEl);\n      var isSubnavbar = $navEl.hasClass('subnavbar');\n      var isLeft = $navEl.hasClass('left');\n      var isTitle = $navEl.hasClass('title');\n      var isBg = $navEl.hasClass('navbar-bg');\n      if ((isTitle || isBg) && currentNavIsTransparent) return;\n      if (!fromLarge && $navEl.hasClass('.title-large')) return;\n      var el = {\n        el: navEl\n      };\n      if (fromLarge) {\n        if (isTitle) return;\n        if ($navEl.hasClass('title-large')) {\n          if (els.indexOf(el) < 0) els.push(el);\n          el.overflow = 'visible';\n          $navEl.find('.title-large-text').each(function (subNavEl) {\n            els.push({\n              el: subNavEl,\n              transform: function transform(progress) {\n                return \"translateX(\" + progress * 100 * inverter + \"%)\";\n              }\n            });\n          });\n          return;\n        }\n      }\n      if (toLarge) {\n        if (!fromLarge) {\n          if ($navEl.hasClass('title-large')) {\n            if (els.indexOf(el) < 0) els.push(el);\n            el.opacity = 0;\n          }\n        }\n        if (isLeft) {\n          if (els.indexOf(el) < 0) els.push(el);\n          el.opacity = function (progress) {\n            return 1 - Math.pow(progress, 0.33);\n          };\n          $navEl.find('.back span').each(function (subNavEl) {\n            els.push({\n              el: subNavEl,\n              'transform-origin': transformOrigin,\n              transform: function transform(progress) {\n                return \"translateX(calc(\" + progress + \" * (var(--f7-navbarTitleLargeOffset) - var(--f7-navbarLeftTextOffset)))) translateY(calc(\" + progress + \" * (var(--f7-navbar-large-title-height) - var(--f7-navbar-large-title-padding-vertical) / 2))) scale(\" + (1 + 1 * progress) + \")\";\n              }\n            });\n          });\n          return;\n        }\n      }\n      if (isBg) {\n        if (els.indexOf(el) < 0) els.push(el);\n        if (!fromLarge && !toLarge) {\n          if (currentNavIsCollapsed) {\n            if (currentNavIsLargeTransparent) {\n              el.className = 'ios-swipeback-navbar-bg-large';\n            }\n            el.transform = function (progress) {\n              return \"translateX(\" + 100 * progress * inverter + \"%) translateY(calc(-1 * var(--f7-navbar-large-title-height)))\";\n            };\n          } else {\n            el.transform = function (progress) {\n              return \"translateX(\" + 100 * progress * inverter + \"%)\";\n            };\n          }\n        }\n        if (!fromLarge && toLarge) {\n          el.className = 'ios-swipeback-navbar-bg-large';\n          el.transform = function (progress) {\n            return \"translateX(\" + 100 * progress * inverter + \"%) translateY(calc(-1 * \" + (1 - progress) + \" * var(--f7-navbar-large-title-height)))\";\n          };\n        }\n        if (fromLarge && toLarge) {\n          el.transform = function (progress) {\n            return \"translateX(\" + 100 * progress * inverter + \"%)\";\n          };\n        }\n        if (fromLarge && !toLarge) {\n          el.transform = function (progress) {\n            return \"translateX(\" + 100 * progress * inverter + \"%) translateY(calc(-\" + progress + \" * var(--f7-navbar-large-title-height)))\";\n          };\n        }\n        return;\n      }\n      if ($navEl.hasClass('title-large')) return;\n      var isSliding = $navEl.hasClass('sliding') || $navEl.parents('.navbar-inner.sliding').length;\n      if (els.indexOf(el) < 0) els.push(el);\n      if (!isSubnavbar || isSubnavbar && !isSliding) {\n        el.opacity = function (progress) {\n          return 1 - Math.pow(progress, 0.33);\n        };\n      }\n      if (isSliding) {\n        var transformTarget = el;\n        if (isLeft && activeNavBackIconText.length && params.iosAnimateNavbarBackIcon) {\n          var textEl = {\n            el: activeNavBackIconText[0]\n          };\n          transformTarget = textEl;\n          els.push(textEl);\n        }\n        transformTarget.transform = function (progress) {\n          var activeNavTranslate = progress * transformTarget.el.f7NavbarRightOffset;\n          if (device.pixelRatio === 1) activeNavTranslate = Math.round(activeNavTranslate);\n          if (isSubnavbar && currentNavIsLarge) {\n            return \"translate3d(\" + activeNavTranslate + \"px, calc(-1 * var(--f7-navbar-large-collapse-progress) * var(--f7-navbar-large-title-height)), 0)\";\n          }\n          return \"translate3d(\" + activeNavTranslate + \"px,0,0)\";\n        };\n      }\n    });\n    $previousNavElements.each(function (navEl) {\n      var $navEl = $(navEl);\n      var isSubnavbar = $navEl.hasClass('subnavbar');\n      var isLeft = $navEl.hasClass('left');\n      var isTitle = $navEl.hasClass('title');\n      var isBg = $navEl.hasClass('navbar-bg');\n      if ((isTitle || isBg) && previousNavIsTransparent) return;\n      var el = {\n        el: navEl\n      };\n      if (toLarge) {\n        if (isTitle) return;\n        if (els.indexOf(el) < 0) els.push(el);\n        if ($navEl.hasClass('title-large')) {\n          el.opacity = 1;\n          el.overflow = 'visible';\n          $navEl.find('.title-large-text').each(function (subNavEl) {\n            els.push({\n              el: subNavEl,\n              'transform-origin': transformOriginTitleLarge,\n              opacity: function opacity(progress) {\n                return Math.pow(progress, 3);\n              },\n              transform: function transform(progress) {\n                return \"translateX(calc(\" + (1 - progress) + \" * (var(--f7-navbarLeftTextOffset) - var(--f7-navbarTitleLargeOffset)))) translateY(calc(\" + (progress - 1) + \" * var(--f7-navbar-large-title-height) + \" + (1 - progress) + \" * var(--f7-navbar-large-title-padding-vertical))) scale(\" + (0.5 + progress * 0.5) + \")\";\n              }\n            });\n          });\n          return;\n        }\n      }\n      if (isBg) {\n        if (els.indexOf(el) < 0) els.push(el);\n        if (!fromLarge && !toLarge) {\n          if (previousNavIsCollapsed) {\n            if (previousNavIsLargeTransparent) {\n              el.className = 'ios-swipeback-navbar-bg-large';\n            }\n            el.transform = function (progress) {\n              return \"translateX(\" + (-100 + 100 * progress) * inverter + \"%) translateY(calc(-1 * var(--f7-navbar-large-title-height)))\";\n            };\n          } else {\n            el.transform = function (progress) {\n              return \"translateX(\" + (-100 + 100 * progress) * inverter + \"%)\";\n            };\n          }\n        }\n        if (!fromLarge && toLarge) {\n          el.transform = function (progress) {\n            return \"translateX(\" + (-100 + 100 * progress) * inverter + \"%) translateY(calc(-1 * \" + (1 - progress) + \" * var(--f7-navbar-large-title-height)))\";\n          };\n        }\n        if (fromLarge && !toLarge) {\n          el.className = 'ios-swipeback-navbar-bg-large';\n          el.transform = function (progress) {\n            return \"translateX(\" + (-100 + 100 * progress) * inverter + \"%) translateY(calc(-\" + progress + \" * var(--f7-navbar-large-title-height)))\";\n          };\n        }\n        if (fromLarge && toLarge) {\n          el.transform = function (progress) {\n            return \"translateX(\" + (-100 + 100 * progress) * inverter + \"%)\";\n          };\n        }\n        return;\n      }\n      if ($navEl.hasClass('title-large')) return;\n      var isSliding = $navEl.hasClass('sliding') || $previousNavbarEl.children('.navbar-inner.sliding').length;\n      if (els.indexOf(el) < 0) els.push(el);\n      if (!isSubnavbar || isSubnavbar && !isSliding) {\n        el.opacity = function (progress) {\n          return Math.pow(progress, 3);\n        };\n      }\n      if (isSliding) {\n        var transformTarget = el;\n        if (isLeft && previousNavBackIconText.length && params.iosAnimateNavbarBackIcon) {\n          var textEl = {\n            el: previousNavBackIconText[0]\n          };\n          transformTarget = textEl;\n          els.push(textEl);\n        }\n        transformTarget.transform = function (progress) {\n          var previousNavTranslate = transformTarget.el.f7NavbarLeftOffset * (1 - progress);\n          if (device.pixelRatio === 1) previousNavTranslate = Math.round(previousNavTranslate);\n          if (isSubnavbar && previousNavIsLarge) {\n            return \"translate3d(\" + previousNavTranslate + \"px, calc(-1 * var(--f7-navbar-large-collapse-progress) * var(--f7-navbar-large-title-height)), 0)\";\n          }\n          return \"translate3d(\" + previousNavTranslate + \"px,0,0)\";\n        };\n      }\n    });\n    return els;\n  }\n  function setAnimatableNavElements(_temp) {\n    var _ref = _temp === void 0 ? {} : _temp,\n      progress = _ref.progress,\n      reset = _ref.reset,\n      transition = _ref.transition,\n      reflow = _ref.reflow;\n    var styles = ['overflow', 'transform', 'transform-origin', 'opacity'];\n    if (transition === true || transition === false) {\n      for (var i = 0; i < animatableNavEls.length; i += 1) {\n        var el = animatableNavEls[i];\n        if (el && el.el) {\n          if (transition === true) el.el.classList.add('navbar-page-transitioning');\n          if (transition === false) el.el.classList.remove('navbar-page-transitioning');\n        }\n      }\n    }\n    if (reflow && animatableNavEls.length && animatableNavEls[0] && animatableNavEls[0].el) {\n      // eslint-disable-next-line\n      animatableNavEls[0].el._clientLeft = animatableNavEls[0].el.clientLeft;\n    }\n    for (var _i = 0; _i < animatableNavEls.length; _i += 1) {\n      var _el = animatableNavEls[_i];\n      if (_el && _el.el) {\n        if (_el.className && !_el.classNameSet && !reset) {\n          _el.el.classList.add(_el.className);\n          _el.classNameSet = true;\n        }\n        if (_el.className && reset) {\n          _el.el.classList.remove(_el.className);\n        }\n        for (var j = 0; j < styles.length; j += 1) {\n          var styleProp = styles[j];\n          if (_el[styleProp]) {\n            if (reset) {\n              _el.el.style[styleProp] = '';\n            } else if (typeof _el[styleProp] === 'function') {\n              _el.el.style[styleProp] = _el[styleProp](progress);\n            } else {\n              _el.el.style[styleProp] = _el[styleProp];\n            }\n          }\n        }\n      }\n    }\n  }\n  function handleTouchStart(e) {\n    var swipeBackEnabled = params[app.theme + \"SwipeBack\"];\n    if (!allowViewTouchMove || !swipeBackEnabled || isTouched || app.swipeout && app.swipeout.el || !router.allowPageChange) return;\n    if ($(e.target).closest('.range-slider, .calendar-months').length > 0) return;\n    if ($(e.target).closest('.page-master, .page-master-detail').length > 0 && params.masterDetailBreakpoint > 0 && app.width >= params.masterDetailBreakpoint) return;\n    isMoved = false;\n    isTouched = true;\n    isScrolling = undefined;\n    touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n    touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n    touchStartTime = now();\n    dynamicNavbar = router.dynamicNavbar;\n  }\n  function handleTouchMove(e) {\n    if (!isTouched) return;\n    var pageX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n    var pageY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n    if (typeof isScrolling === 'undefined') {\n      isScrolling = !!(isScrolling || Math.abs(pageY - touchesStart.y) > Math.abs(pageX - touchesStart.x)) || pageX < touchesStart.x && !app.rtl || pageX > touchesStart.x && app.rtl;\n    }\n    if (isScrolling || e.f7PreventSwipeBack || app.preventSwipeBack) {\n      isTouched = false;\n      return;\n    }\n    if (!isMoved) {\n      // Calc values during first move fired\n      var cancel = false;\n      var target = $(e.target);\n      var swipeout = target.closest('.swipeout');\n      if (swipeout.length > 0) {\n        if (!app.rtl && swipeout.find('.swipeout-actions-left').length > 0) cancel = true;\n        if (app.rtl && swipeout.find('.swipeout-actions-right').length > 0) cancel = true;\n      }\n      $currentPageEl = target.closest('.page');\n      if ($currentPageEl.hasClass('no-swipeback') || target.closest('.no-swipeback, .card-opened').length > 0) cancel = true;\n      $previousPageEl = $el.find('.page-previous:not(.stacked)');\n      if ($previousPageEl.length > 1) {\n        $previousPageEl = $previousPageEl.eq($previousPageEl.length - 1);\n      }\n      var notFromBorder = touchesStart.x - $el.offset().left > paramsSwipeBackActiveArea;\n      viewContainerWidth = $el.width();\n      if (app.rtl) {\n        notFromBorder = touchesStart.x < $el.offset().left - $el[0].scrollLeft + (viewContainerWidth - paramsSwipeBackActiveArea);\n      } else {\n        notFromBorder = touchesStart.x - $el.offset().left > paramsSwipeBackActiveArea;\n      }\n      if (notFromBorder) cancel = true;\n      if ($previousPageEl.length === 0 || $currentPageEl.length === 0) cancel = true;\n      if (cancel) {\n        isTouched = false;\n        return;\n      }\n      if (paramsSwipeBackAnimateShadow) {\n        $pageShadowEl = $currentPageEl.find('.page-shadow-effect');\n        if ($pageShadowEl.length === 0) {\n          $pageShadowEl = $('<div class=\"page-shadow-effect\"></div>');\n          $currentPageEl.append($pageShadowEl);\n        }\n      }\n      if (paramsSwipeBackAnimateOpacity) {\n        $pageOpacityEl = $previousPageEl.find('.page-opacity-effect');\n        if ($pageOpacityEl.length === 0) {\n          $pageOpacityEl = $('<div class=\"page-opacity-effect\"></div>');\n          $previousPageEl.append($pageOpacityEl);\n        }\n      }\n      if (dynamicNavbar) {\n        $currentNavbarEl = $navbarsEl.find('.navbar-current:not(.stacked)');\n        $previousNavbarEl = $navbarsEl.find('.navbar-previous:not(.stacked)');\n        if ($previousNavbarEl.length > 1) {\n          $previousNavbarEl = $previousNavbarEl.eq($previousNavbarEl.length - 1);\n        }\n        animatableNavEls = animatableNavElements($previousNavbarEl, $currentNavbarEl);\n      } // Close/Hide Any Picker\n\n      if ($('.sheet.modal-in').length > 0 && app.sheet) {\n        app.sheet.close($('.sheet.modal-in'));\n      }\n    }\n    e.f7PreventSwipePanel = true;\n    isMoved = true;\n    app.preventSwipePanelBySwipeBack = true;\n    e.preventDefault(); // RTL inverter\n\n    var inverter = app.rtl ? -1 : 1; // Touches diff\n\n    touchesDiff = (pageX - touchesStart.x - paramsSwipeBackThreshold) * inverter;\n    if (touchesDiff < 0) touchesDiff = 0;\n    var percentage = Math.min(Math.max(touchesDiff / viewContainerWidth, 0), 1); // Swipe Back Callback\n\n    var callbackData = {\n      percentage: percentage,\n      progress: percentage,\n      currentPageEl: $currentPageEl[0],\n      previousPageEl: $previousPageEl[0],\n      currentNavbarEl: $currentNavbarEl[0],\n      previousNavbarEl: $previousNavbarEl[0]\n    };\n    $el.trigger('swipeback:move', callbackData);\n    router.emit('swipebackMove', callbackData); // Transform pages\n\n    var currentPageTranslate = touchesDiff * inverter;\n    var previousPageTranslate = (touchesDiff / 5 - viewContainerWidth / 5) * inverter;\n    if (!app.rtl) {\n      currentPageTranslate = Math.min(currentPageTranslate, viewContainerWidth);\n      previousPageTranslate = Math.min(previousPageTranslate, 0);\n    } else {\n      currentPageTranslate = Math.max(currentPageTranslate, -viewContainerWidth);\n      previousPageTranslate = Math.max(previousPageTranslate, 0);\n    }\n    if (device.pixelRatio === 1) {\n      currentPageTranslate = Math.round(currentPageTranslate);\n      previousPageTranslate = Math.round(previousPageTranslate);\n    }\n    router.swipeBackActive = true;\n    $([$currentPageEl[0], $previousPageEl[0]]).addClass('page-swipeback-active');\n    $currentPageEl.transform(\"translate3d(\" + currentPageTranslate + \"px,0,0)\");\n    if (paramsSwipeBackAnimateShadow) $pageShadowEl[0].style.opacity = 1 - 1 * percentage;\n    if (app.theme === 'ios') {\n      $previousPageEl.transform(\"translate3d(\" + previousPageTranslate + \"px,0,0)\");\n    }\n    if (paramsSwipeBackAnimateOpacity) $pageOpacityEl[0].style.opacity = 1 - 1 * percentage; // Dynamic Navbars Animation\n\n    if (!dynamicNavbar) return;\n    setAnimatableNavElements({\n      progress: percentage\n    });\n  }\n  function handleTouchEnd() {\n    app.preventSwipePanelBySwipeBack = false;\n    if (!isTouched || !isMoved) {\n      isTouched = false;\n      isMoved = false;\n      return;\n    }\n    isTouched = false;\n    isMoved = false;\n    router.swipeBackActive = false;\n    var $pages = $([$currentPageEl[0], $previousPageEl[0]]);\n    $pages.removeClass('page-swipeback-active');\n    if (touchesDiff === 0) {\n      $pages.transform('');\n      if ($pageShadowEl && $pageShadowEl.length > 0) $pageShadowEl.remove();\n      if ($pageOpacityEl && $pageOpacityEl.length > 0) $pageOpacityEl.remove();\n      if (dynamicNavbar) {\n        setAnimatableNavElements({\n          reset: true\n        });\n      }\n      return;\n    }\n    var timeDiff = now() - touchStartTime;\n    var pageChanged = false; // Swipe back to previous page\n\n    if (timeDiff < 300 && touchesDiff > 10 || timeDiff >= 300 && touchesDiff > viewContainerWidth / 2) {\n      $currentPageEl.removeClass('page-current').addClass(\"page-next\" + (app.theme !== 'ios' ? ' page-next-on-right' : ''));\n      $previousPageEl.removeClass('page-previous').addClass('page-current').removeAttr('aria-hidden');\n      if ($pageShadowEl) $pageShadowEl[0].style.opacity = '';\n      if ($pageOpacityEl) $pageOpacityEl[0].style.opacity = '';\n      if (dynamicNavbar) {\n        router.setNavbarPosition($currentNavbarEl, 'next');\n        router.setNavbarPosition($previousNavbarEl, 'current', false);\n      }\n      pageChanged = true;\n    } // Reset custom styles\n    // Add transitioning class for transition-duration\n\n    $pages.addClass('page-transitioning page-transitioning-swipeback');\n    if (device.ios) {\n      // eslint-disable-next-line\n      $currentPageEl[0]._clientLeft = $currentPageEl[0].clientLeft;\n    }\n    $pages.transform('');\n    if (dynamicNavbar) {\n      setAnimatableNavElements({\n        progress: pageChanged ? 1 : 0,\n        transition: true,\n        reflow: !!device.ios\n      });\n    }\n    allowViewTouchMove = false;\n    router.allowPageChange = false; // Swipe Back Callback\n\n    var callbackData = {\n      currentPageEl: $currentPageEl[0],\n      previousPageEl: $previousPageEl[0],\n      currentNavbarEl: $currentNavbarEl[0],\n      previousNavbarEl: $previousNavbarEl[0]\n    };\n    if (pageChanged) {\n      // Update Route\n      router.currentRoute = $previousPageEl[0].f7Page.route;\n      router.currentPage = $previousPageEl[0]; // Page before animation callback\n\n      router.pageCallback('beforeOut', $currentPageEl, $currentNavbarEl, 'current', 'next', {\n        route: $currentPageEl[0].f7Page.route,\n        swipeBack: true\n      });\n      router.pageCallback('beforeIn', $previousPageEl, $previousNavbarEl, 'previous', 'current', {\n        route: $previousPageEl[0].f7Page.route,\n        swipeBack: true\n      }, $currentPageEl[0]);\n      $el.trigger('swipeback:beforechange', callbackData);\n      router.emit('swipebackBeforeChange', callbackData);\n    } else {\n      $el.trigger('swipeback:beforereset', callbackData);\n      router.emit('swipebackBeforeReset', callbackData);\n    }\n    $currentPageEl.transitionEnd(function () {\n      $pages.removeClass('page-transitioning page-transitioning-swipeback');\n      if (dynamicNavbar) {\n        setAnimatableNavElements({\n          reset: true,\n          transition: false\n        });\n      }\n      allowViewTouchMove = true;\n      router.allowPageChange = true;\n      if (pageChanged) {\n        // Update History\n        if (router.history.length === 1) {\n          router.history.unshift(router.url);\n        }\n        router.history.pop();\n        router.saveHistory(); // Update push state\n\n        if (params.browserHistory) {\n          History.back();\n        } // Page after animation callback\n\n        router.pageCallback('afterOut', $currentPageEl, $currentNavbarEl, 'current', 'next', {\n          route: $currentPageEl[0].f7Page.route,\n          swipeBack: true\n        });\n        router.pageCallback('afterIn', $previousPageEl, $previousNavbarEl, 'previous', 'current', {\n          route: $previousPageEl[0].f7Page.route,\n          swipeBack: true\n        }); // Remove Old Page\n\n        if (params.stackPages && router.initialPages.indexOf($currentPageEl[0]) >= 0) {\n          $currentPageEl.addClass('stacked');\n          if (dynamicNavbar) {\n            $currentNavbarEl.addClass('stacked');\n          }\n        } else {\n          router.pageCallback('beforeRemove', $currentPageEl, $currentNavbarEl, 'next', {\n            swipeBack: true\n          });\n          router.removePage($currentPageEl);\n          if (dynamicNavbar) {\n            router.removeNavbar($currentNavbarEl);\n          }\n        }\n        $el.trigger('swipeback:afterchange', callbackData);\n        router.emit('swipebackAfterChange', callbackData);\n        router.emit('routeChanged', router.currentRoute, router.previousRoute, router);\n        if (params.preloadPreviousPage) {\n          router.back(router.history[router.history.length - 2], {\n            preload: true\n          });\n        }\n      } else {\n        $el.trigger('swipeback:afterreset', callbackData);\n        router.emit('swipebackAfterReset', callbackData);\n      }\n      if ($pageShadowEl && $pageShadowEl.length > 0) $pageShadowEl.remove();\n      if ($pageOpacityEl && $pageOpacityEl.length > 0) $pageOpacityEl.remove();\n    });\n  }\n  function attachEvents() {\n    var passiveListener = app.touchEvents.start === 'touchstart' && support.passiveListener ? {\n      passive: true,\n      capture: false\n    } : false;\n    $el.on(app.touchEvents.start, handleTouchStart, passiveListener);\n    app.on('touchmove:active', handleTouchMove);\n    app.on('touchend:passive', handleTouchEnd);\n  }\n  function detachEvents() {\n    var passiveListener = app.touchEvents.start === 'touchstart' && support.passiveListener ? {\n      passive: true,\n      capture: false\n    } : false;\n    $el.off(app.touchEvents.start, handleTouchStart, passiveListener);\n    app.off('touchmove:active', handleTouchMove);\n    app.off('touchend:passive', handleTouchEnd);\n  }\n  attachEvents();\n  router.on('routerDestroy', detachEvents);\n}\nexport default SwipeBack;","map":null,"metadata":{},"sourceType":"module"}