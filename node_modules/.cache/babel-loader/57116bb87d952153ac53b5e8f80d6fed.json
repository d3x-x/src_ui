{"ast":null,"code":"function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nimport $ from '../../shared/dom7';\nimport { extend, now, nextTick, deleteProps } from '../../shared/utils';\nimport Framework7Class from '../../shared/class';\nimport { getSupport } from '../../shared/get-support';\nvar Toggle = /*#__PURE__*/function (_Framework7Class) {\n  _inheritsLoose(Toggle, _Framework7Class);\n  function Toggle(app, params) {\n    var _this;\n    if (params === void 0) {\n      params = {};\n    }\n    _this = _Framework7Class.call(this, params, [app]) || this;\n    var toggle = _assertThisInitialized(_this);\n    var support = getSupport();\n    var defaults = {}; // Extend defaults with modules params\n\n    toggle.useModulesParams(defaults);\n    toggle.params = extend(defaults, params);\n    var el = toggle.params.el;\n    if (!el) return toggle || _assertThisInitialized(_this);\n    var $el = $(el);\n    if ($el.length === 0) return toggle || _assertThisInitialized(_this);\n    if ($el[0].f7Toggle) return $el[0].f7Toggle || _assertThisInitialized(_this);\n    var $inputEl = $el.children('input[type=\"checkbox\"]');\n    extend(toggle, {\n      app: app,\n      $el: $el,\n      el: $el[0],\n      $inputEl: $inputEl,\n      inputEl: $inputEl[0],\n      disabled: $el.hasClass('disabled') || $inputEl.hasClass('disabled') || $inputEl.attr('disabled') || $inputEl[0].disabled\n    });\n    Object.defineProperty(toggle, 'checked', {\n      enumerable: true,\n      configurable: true,\n      set: function set(checked) {\n        if (!toggle || typeof toggle.$inputEl === 'undefined') return;\n        if (toggle.checked === checked) return;\n        $inputEl[0].checked = checked;\n        toggle.$inputEl.trigger('change');\n      },\n      get: function get() {\n        return $inputEl[0].checked;\n      }\n    });\n    $el[0].f7Toggle = toggle;\n    var isTouched;\n    var touchesStart = {};\n    var isScrolling;\n    var touchesDiff;\n    var toggleWidth;\n    var touchStartTime;\n    var touchStartChecked;\n    function handleTouchStart(e) {\n      if (isTouched || toggle.disabled) return;\n      touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n      touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n      touchesDiff = 0;\n      isTouched = true;\n      isScrolling = undefined;\n      touchStartTime = now();\n      touchStartChecked = toggle.checked;\n      toggleWidth = $el[0].offsetWidth;\n      nextTick(function () {\n        if (isTouched) {\n          $el.addClass('toggle-active-state');\n        }\n      });\n    }\n    function handleTouchMove(e) {\n      if (!isTouched || toggle.disabled) return;\n      var pageX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n      var pageY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n      var inverter = app.rtl ? -1 : 1;\n      if (typeof isScrolling === 'undefined') {\n        isScrolling = !!(isScrolling || Math.abs(pageY - touchesStart.y) > Math.abs(pageX - touchesStart.x));\n      }\n      if (isScrolling) {\n        isTouched = false;\n        return;\n      }\n      e.preventDefault();\n      touchesDiff = pageX - touchesStart.x;\n      var changed;\n      if (touchesDiff * inverter < 0 && Math.abs(touchesDiff) > toggleWidth / 3 && touchStartChecked) {\n        changed = true;\n      }\n      if (touchesDiff * inverter > 0 && Math.abs(touchesDiff) > toggleWidth / 3 && !touchStartChecked) {\n        changed = true;\n      }\n      if (changed) {\n        touchesStart.x = pageX;\n        toggle.checked = !touchStartChecked;\n        touchStartChecked = !touchStartChecked;\n      }\n    }\n    function handleTouchEnd() {\n      if (!isTouched || toggle.disabled) {\n        if (isScrolling) $el.removeClass('toggle-active-state');\n        isTouched = false;\n        return;\n      }\n      var inverter = app.rtl ? -1 : 1;\n      isTouched = false;\n      $el.removeClass('toggle-active-state');\n      var changed;\n      if (now() - touchStartTime < 300) {\n        if (touchesDiff * inverter < 0 && touchStartChecked) {\n          changed = true;\n        }\n        if (touchesDiff * inverter > 0 && !touchStartChecked) {\n          changed = true;\n        }\n        if (changed) {\n          toggle.checked = !touchStartChecked;\n        }\n      }\n    }\n    function handleInputChange() {\n      toggle.$el.trigger('toggle:change');\n      toggle.emit('local::change toggleChange', toggle);\n    }\n    toggle.attachEvents = function attachEvents() {\n      var passive = support.passiveListener ? {\n        passive: true\n      } : false;\n      $el.on(app.touchEvents.start, handleTouchStart, passive);\n      app.on('touchmove', handleTouchMove);\n      app.on('touchend:passive', handleTouchEnd);\n      toggle.$inputEl.on('change', handleInputChange);\n    };\n    toggle.detachEvents = function detachEvents() {\n      var passive = support.passiveListener ? {\n        passive: true\n      } : false;\n      $el.off(app.touchEvents.start, handleTouchStart, passive);\n      app.off('touchmove', handleTouchMove);\n      app.off('touchend:passive', handleTouchEnd);\n      toggle.$inputEl.off('change', handleInputChange);\n    }; // Install Modules\n\n    toggle.useModules(); // Init\n\n    toggle.init();\n    return _this;\n  }\n  var _proto = Toggle.prototype;\n  _proto.toggle = function toggle() {\n    var toggle = this;\n    toggle.checked = !toggle.checked;\n  };\n  _proto.init = function init() {\n    var toggle = this;\n    toggle.attachEvents();\n  };\n  _proto.destroy = function destroy() {\n    var toggle = this;\n    toggle.$el.trigger('toggle:beforedestroy');\n    toggle.emit('local::beforeDestroy toggleBeforeDestroy', toggle);\n    delete toggle.$el[0].f7Toggle;\n    toggle.detachEvents();\n    deleteProps(toggle);\n    toggle = null;\n  };\n  return Toggle;\n}(Framework7Class);\nexport default Toggle;","map":null,"metadata":{},"sourceType":"module"}