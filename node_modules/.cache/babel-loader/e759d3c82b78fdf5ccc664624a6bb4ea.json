{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle, useState } from 'react';\nimport { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';\nimport { classNames, getExtraAttrs, getSlots, emit, extend } from '../shared/utils';\nimport { colorClasses } from '../shared/mixins';\nimport { f7ready, f7 } from '../shared/f7';\nimport { watchProp } from '../shared/watch-prop';\nimport Toggle from './toggle';\nimport Range from './range';\nimport TextEditor from './text-editor';\nvar Input = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    type = props.type,\n    name = props.name,\n    value = props.value,\n    defaultValue = props.defaultValue,\n    inputmode = props.inputmode,\n    placeholder = props.placeholder,\n    inputId = props.inputId,\n    size = props.size,\n    accept = props.accept,\n    autocomplete = props.autocomplete,\n    autocorrect = props.autocorrect,\n    autocapitalize = props.autocapitalize,\n    spellcheck = props.spellcheck,\n    autofocus = props.autofocus,\n    autosave = props.autosave,\n    checked = props.checked,\n    disabled = props.disabled,\n    max = props.max,\n    min = props.min,\n    step = props.step,\n    maxlength = props.maxlength,\n    minlength = props.minlength,\n    multiple = props.multiple,\n    readonly = props.readonly,\n    required = props.required,\n    inputStyle = props.inputStyle,\n    pattern = props.pattern,\n    validate = props.validate,\n    validateOnBlur = props.validateOnBlur,\n    onValidate = props.onValidate,\n    tabindex = props.tabindex,\n    resizable = props.resizable,\n    clearButton = props.clearButton,\n    noFormStoreData = props.noFormStoreData,\n    noStoreData = props.noStoreData,\n    ignoreStoreData = props.ignoreStoreData,\n    errorMessage = props.errorMessage,\n    errorMessageForce = props.errorMessageForce,\n    info = props.info,\n    outline = props.outline,\n    _props$wrap = props.wrap,\n    wrap = _props$wrap === void 0 ? true : _props$wrap,\n    _props$dropdown = props.dropdown,\n    dropdown = _props$dropdown === void 0 ? 'auto' : _props$dropdown,\n    calendarParams = props.calendarParams,\n    colorPickerParams = props.colorPickerParams,\n    textEditorParams = props.textEditorParams;\n  var _useState = useState(false),\n    inputInvalid = _useState[0],\n    setInputInvalid = _useState[1];\n  var _useState2 = useState(false),\n    inputFocused = _useState2[0],\n    setInputFocused = _useState2[1];\n  var extraAttrs = getExtraAttrs(props);\n  var f7Calendar = useRef(null);\n  var f7ColorPicker = useRef(null);\n  var elRef = useRef(null);\n  var inputElRef = useRef(null);\n  var updateInputOnDidUpdate = useRef(false);\n  var getDomValue = function getDomValue() {\n    if (!inputElRef.current) return undefined;\n    return inputElRef.current.value;\n  };\n  var isInputHasValue = function isInputHasValue() {\n    if (type === 'datepicker' && Array.isArray(value) && value.length === 0) {\n      return false;\n    }\n    var domValue = getDomValue();\n    return typeof value === 'undefined' ? domValue || domValue === 0 : value || value === 0;\n  };\n  var validateInput = function validateInput() {\n    if (!f7 || !inputElRef.current) return;\n    var validity = inputElRef.current.validity;\n    if (!validity) return;\n    if (!validity.valid) {\n      if (onValidate) onValidate(false);\n      if (inputInvalid !== true) {\n        setInputInvalid(true);\n      }\n    } else {\n      if (onValidate) onValidate(true);\n      if (inputInvalid !== false) {\n        setInputInvalid(false);\n      }\n    }\n  };\n  var onTextareaResize = function onTextareaResize(event) {\n    emit(props, 'textareaResize', event);\n  };\n  var onInputNotEmpty = function onInputNotEmpty(event) {\n    emit(props, 'inputNotEmpty', event);\n  };\n  var onInputEmpty = function onInputEmpty(event) {\n    emit(props, 'inputEmpty', event);\n  };\n  var onInputClear = function onInputClear(event) {\n    emit(props, 'inputClear', event);\n  };\n  var onInput = function onInput() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    emit.apply(void 0, [props, 'input'].concat(args));\n    if (!(validateOnBlur || validateOnBlur === '') && (validate || validate === '') && inputElRef.current) {\n      validateInput();\n    }\n  };\n  var onFocus = function onFocus() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    emit.apply(void 0, [props, 'focus'].concat(args));\n    setInputFocused(true);\n  };\n  var onBlur = function onBlur() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    emit.apply(void 0, [props, 'blur'].concat(args));\n    if ((validate || validate === '' || validateOnBlur || validateOnBlur === '') && inputElRef.current) {\n      validateInput();\n    }\n    setInputFocused(false);\n  };\n  var onChange = function onChange() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    emit.apply(void 0, [props, 'change'].concat(args));\n    if (type === 'texteditor') {\n      emit(props, 'textEditorChange', args[1]);\n    }\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current\n    };\n  });\n  var onMount = function onMount() {\n    f7ready(function () {\n      if (type === 'range' || type === 'toggle') return;\n      if (!inputElRef.current) return;\n      inputElRef.current.addEventListener('input:notempty', onInputNotEmpty, false);\n      if (type === 'textarea' && resizable) {\n        inputElRef.current.addEventListener('textarea:resize', onTextareaResize, false);\n      }\n      if (clearButton) {\n        inputElRef.current.addEventListener('input:empty', onInputEmpty, false);\n        inputElRef.current.addEventListener('input:clear', onInputClear, false);\n      }\n      if (type === 'datepicker') {\n        f7Calendar.current = f7.calendar.create(_extends({\n          inputEl: inputElRef.current,\n          value: value,\n          on: {\n            change: function change(calendar, calendarValue) {\n              emit(props, 'calendarChange', calendarValue);\n            }\n          }\n        }, calendarParams || {}));\n      }\n      if (type === 'colorpicker') {\n        f7ColorPicker.current = f7.colorPicker.create(_extends({\n          inputEl: inputElRef.current,\n          value: value,\n          on: {\n            change: function change(colorPicker, colorPickerValue) {\n              emit(props, 'colorPickerChange', colorPickerValue);\n            }\n          }\n        }, colorPickerParams || {}));\n      }\n      f7.input.checkEmptyState(inputElRef.current);\n      if (!(validateOnBlur || validateOnBlur === '') && (validate || validate === '') && (typeof value !== 'undefined' && value !== null && value !== '' || typeof defaultValue !== 'undefined' && defaultValue !== null && defaultValue !== '')) {\n        setTimeout(function () {\n          validateInput();\n        }, 0);\n      }\n      if (resizable) {\n        f7.input.resizeTextarea(inputElRef.current);\n      }\n    });\n  };\n  var onDestroy = function onDestroy() {\n    if (type === 'range' || type === 'toggle') return;\n    if (!inputElRef.current) return;\n    inputElRef.current.removeEventListener('input:notempty', onInputNotEmpty, false);\n    if (type === 'textarea' && resizable) {\n      inputElRef.current.removeEventListener('textarea:resize', onTextareaResize, false);\n    }\n    if (clearButton) {\n      inputElRef.current.removeEventListener('input:empty', onInputEmpty, false);\n      inputElRef.current.removeEventListener('input:clear', onInputClear, false);\n    }\n    if (f7Calendar.current && f7Calendar.current.destroy) {\n      f7Calendar.current.destroy();\n      f7Calendar.current = null;\n    }\n    if (f7ColorPicker.current && f7ColorPicker.current.destroy) {\n      f7ColorPicker.current.destroy();\n      f7ColorPicker.current = null;\n    }\n  };\n  useIsomorphicLayoutEffect(function () {\n    onMount();\n    return onDestroy;\n  }, []);\n  useIsomorphicLayoutEffect(function () {\n    if (!f7) return;\n    if (updateInputOnDidUpdate.current) {\n      if (!inputElRef.current) return;\n      updateInputOnDidUpdate.current = false;\n      f7.input.checkEmptyState(inputElRef.current);\n      if (validate && !validateOnBlur) {\n        validateInput();\n      }\n      if (resizable) {\n        f7.input.resizeTextarea(inputElRef.current);\n      }\n    }\n  });\n  watchProp(colorPickerParams, function (newValue) {\n    if (!f7 || !f7ColorPicker.current) return;\n    extend(f7ColorPicker.current.params, newValue || {});\n  });\n  watchProp(calendarParams, function (newValue) {\n    if (!f7 || !f7Calendar.current) return;\n    extend(f7Calendar.current.params, newValue || {});\n  });\n  watchProp(value, function (newValue) {\n    if (type === 'range' || type === 'toggle') return;\n    if (!f7) return;\n    updateInputOnDidUpdate.current = true;\n    if (f7Calendar.current) {\n      f7Calendar.current.setValue(newValue);\n    }\n    if (f7ColorPicker.current) {\n      f7ColorPicker.current.setValue(newValue);\n    }\n  });\n  var domValue = getDomValue();\n  var inputHasValue = isInputHasValue();\n  var slots = getSlots(props);\n  var inputEl;\n  var createInput = function createInput(InputTag, children) {\n    var needsValue = type !== 'file' && type !== 'datepicker' && type !== 'colorpicker';\n    var needsType = InputTag === 'input';\n    var inputType = type;\n    if (inputType === 'datepicker' || inputType === 'colorpicker') {\n      inputType = 'text';\n    }\n    var inputClassName = classNames(!wrap && className, {\n      resizable: inputType === 'textarea' && resizable,\n      'no-store-data': noFormStoreData || noStoreData || ignoreStoreData,\n      'input-invalid': errorMessage && errorMessageForce || inputInvalid,\n      'input-with-value': inputHasValue,\n      'input-focused': inputFocused\n    });\n    var inputValue;\n    if (needsValue) {\n      if (typeof value !== 'undefined') inputValue = value;else inputValue = domValue;\n    }\n    var valueProps = {};\n    if (type !== 'datepicker' && type !== 'colorpicker') {\n      if ('value' in props) valueProps.value = inputValue;\n      if ('defaultValue' in props) valueProps.defaultValue = defaultValue;\n    }\n    return /*#__PURE__*/React.createElement(InputTag, _extends({\n      ref: inputElRef,\n      style: inputStyle,\n      name: name,\n      type: needsType ? inputType : undefined,\n      placeholder: placeholder,\n      inputMode: inputmode,\n      id: inputId,\n      size: size,\n      accept: accept,\n      autoComplete: autocomplete,\n      autoCorrect: autocorrect,\n      autoCapitalize: autocapitalize,\n      spellCheck: spellcheck,\n      autoFocus: autofocus,\n      autoSave: autosave,\n      checked: checked,\n      disabled: disabled,\n      max: max,\n      maxLength: maxlength,\n      min: min,\n      minLength: minlength,\n      step: step,\n      multiple: multiple,\n      readOnly: readonly,\n      required: required,\n      pattern: pattern,\n      validate: typeof validate === 'string' && validate.length ? validate : undefined,\n      \"data-validate\": validate === true || validate === '' || validateOnBlur === true || validateOnBlur === '' ? true : undefined,\n      \"data-validate-on-blur\": validateOnBlur === true || validateOnBlur === '' ? true : undefined,\n      tabIndex: tabindex,\n      \"data-error-message\": errorMessageForce ? undefined : errorMessage,\n      className: inputClassName,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onInput: onInput,\n      onChange: onChange\n    }, valueProps), children);\n  };\n  if (type === 'select' || type === 'textarea' || type === 'file') {\n    if (type === 'select') {\n      inputEl = createInput('select', slots.default);\n    } else if (type === 'file') {\n      inputEl = createInput('input');\n    } else {\n      inputEl = createInput('textarea');\n    }\n  } else if (slots.default && slots.default.length > 0 || !type) {\n    inputEl = slots.default;\n  } else if (type === 'toggle') {\n    inputEl = /*#__PURE__*/React.createElement(Toggle, {\n      checked: checked,\n      readonly: readonly,\n      name: name,\n      value: value,\n      disabled: disabled,\n      id: inputId,\n      onChange: onChange\n    });\n  } else if (type === 'range') {\n    inputEl = /*#__PURE__*/React.createElement(Range, {\n      value: value,\n      disabled: disabled,\n      min: min,\n      max: max,\n      step: step,\n      name: name,\n      id: inputId,\n      input: true,\n      onRangeChange: onChange\n    });\n  } else if (type === 'texteditor') {\n    inputEl = /*#__PURE__*/React.createElement(TextEditor, _extends({\n      value: value,\n      resizable: resizable,\n      placeholder: placeholder,\n      onTextEditorFocus: onFocus,\n      onTextEditorBlur: onBlur,\n      onTextEditorInput: onInput,\n      onTextEditorChange: onChange\n    }, textEditorParams));\n  } else {\n    inputEl = createInput('input');\n  }\n  if (wrap) {\n    var wrapClasses = classNames(className, 'input', {\n      'input-outline': outline,\n      'input-dropdown': dropdown === 'auto' ? type === 'select' : dropdown,\n      'input-invalid': errorMessage && errorMessageForce || inputInvalid\n    }, colorClasses(props));\n    return /*#__PURE__*/React.createElement(\"div\", _extends({\n      id: id,\n      className: wrapClasses,\n      style: style,\n      ref: elRef\n    }, extraAttrs), inputEl, (errorMessage || slots['error-message'] && slots['error-message'].length) && errorMessageForce && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-error-message\"\n    }, errorMessage, slots['error-message']), clearButton && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"input-clear-button\"\n    }), (info || slots.info && slots.info.length) && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-info\"\n    }, info, slots.info));\n  }\n  return inputEl;\n});\nInput.displayName = 'f7-input';\nexport default Input;","map":null,"metadata":{},"sourceType":"module"}