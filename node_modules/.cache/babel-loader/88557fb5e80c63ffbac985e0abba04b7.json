{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';\nimport { classNames, getExtraAttrs, emit, getSlots } from '../shared/utils';\nimport { colorClasses } from '../shared/mixins';\nimport { f7ready, f7 } from '../shared/f7';\nimport { watchProp } from '../shared/watch-prop';\nimport { modalStateClasses } from '../shared/modal-state-classes';\nvar Sheet = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _f7Sheet = useRef(null);\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    top = props.top,\n    bottom = props.bottom,\n    position = props.position,\n    push = props.push,\n    opened = props.opened,\n    animate = props.animate,\n    backdrop = props.backdrop,\n    backdropEl = props.backdropEl,\n    closeByBackdropClick = props.closeByBackdropClick,\n    closeByOutsideClick = props.closeByOutsideClick,\n    closeOnEscape = props.closeOnEscape,\n    swipeToClose = props.swipeToClose,\n    swipeToStep = props.swipeToStep,\n    swipeHandler = props.swipeHandler,\n    containerEl = props.containerEl;\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  var isOpened = useRef(opened);\n  var isClosing = useRef(false);\n  var onStepProgress = function onStepProgress(instance, progress) {\n    emit(props, 'sheetStepProgress', instance, progress);\n  };\n  var onStepOpen = function onStepOpen(instance) {\n    emit(props, 'sheetStepOpen', instance);\n  };\n  var onStepClose = function onStepClose(instance) {\n    emit(props, 'sheetStepClose', instance);\n  };\n  var onOpen = function onOpen(instance) {\n    isOpened.current = true;\n    isClosing.current = false;\n    emit(props, 'sheetOpen', instance);\n  };\n  var onOpened = function onOpened(instance) {\n    emit(props, 'sheetOpened', instance);\n  };\n  var onClose = function onClose(instance) {\n    isOpened.current = false;\n    isClosing.current = true;\n    emit(props, 'sheetClose', instance);\n  };\n  var onClosed = function onClosed(instance) {\n    isClosing.current = false;\n    emit(props, 'sheetClosed', instance);\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current,\n      f7Sheet: function f7Sheet() {\n        return _f7Sheet.current;\n      }\n    };\n  });\n  var modalEvents = function modalEvents(method) {\n    if (!_f7Sheet.current) return;\n    _f7Sheet.current[method]('open', onOpen);\n    _f7Sheet.current[method]('opened', onOpened);\n    _f7Sheet.current[method]('close', onClose);\n    _f7Sheet.current[method]('closed', onClosed);\n    _f7Sheet.current[method]('stepOpen', onStepOpen);\n    _f7Sheet.current[method]('stepClose', onStepClose);\n    _f7Sheet.current[method]('stepProgress', onStepProgress);\n  };\n  var onMount = function onMount() {\n    if (!elRef.current) return;\n    var sheetParams = {\n      el: elRef.current\n    };\n    if ('animate' in props && typeof animate !== 'undefined') sheetParams.animate = animate;\n    if ('backdrop' in props && typeof backdrop !== 'undefined') sheetParams.backdrop = backdrop;\n    if ('backdropEl' in props) sheetParams.backdropEl = backdropEl;\n    if ('closeByBackdropClick' in props) sheetParams.closeByBackdropClick = closeByBackdropClick;\n    if ('closeByOutsideClick' in props) sheetParams.closeByOutsideClick = closeByOutsideClick;\n    if ('closeOnEscape' in props) sheetParams.closeOnEscape = closeOnEscape;\n    if ('swipeToClose' in props) sheetParams.swipeToClose = swipeToClose;\n    if ('swipeToStep' in props) sheetParams.swipeToStep = swipeToStep;\n    if ('swipeHandler' in props) sheetParams.swipeHandler = swipeHandler;\n    if ('containerEl' in props) sheetParams.containerEl = containerEl;\n    f7ready(function () {\n      _f7Sheet.current = f7.sheet.create(sheetParams);\n      modalEvents('on');\n      if (opened) {\n        _f7Sheet.current.open(false);\n      }\n    });\n  };\n  var onDestroy = function onDestroy() {\n    if (_f7Sheet.current) {\n      _f7Sheet.current.destroy();\n    }\n    _f7Sheet.current = null;\n  };\n  useIsomorphicLayoutEffect(function () {\n    modalEvents('on');\n    return function () {\n      modalEvents('off');\n    };\n  });\n  useIsomorphicLayoutEffect(function () {\n    onMount();\n    return onDestroy;\n  }, []);\n  watchProp(opened, function (value) {\n    if (!_f7Sheet.current) return;\n    if (value) {\n      _f7Sheet.current.open();\n    } else {\n      _f7Sheet.current.close();\n    }\n  });\n  var slots = getSlots(props);\n  var fixedList = [];\n  var staticList = [];\n  var fixedTags = 'navbar toolbar tabbar subnavbar searchbar messagebar fab list-index panel'.split(' ').map(function (tagName) {\n    return \"f7-\" + tagName;\n  });\n  var slotsDefault = slots.default;\n  if (slotsDefault && slotsDefault.length) {\n    slotsDefault.forEach(function (child) {\n      if (typeof child === 'undefined') return;\n      var isFixedTag = false;\n      var tag = child.type && (child.type.displayName || child.type.name);\n      if (!tag) {\n        staticList.push(child);\n        return;\n      }\n      if (fixedTags.indexOf(tag) >= 0) {\n        isFixedTag = true;\n      }\n      if (isFixedTag) fixedList.push(child);else staticList.push(child);\n    });\n  }\n  var innerEl = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sheet-modal-inner\"\n  }, staticList, slots.static);\n  var positionComputed = 'bottom';\n  if (position) positionComputed = position;else if (top) positionComputed = 'top';else if (bottom) positionComputed = 'bottom';\n  var classes = classNames(className, 'sheet-modal', \"sheet-modal-\" + positionComputed, {\n    'sheet-modal-push': push\n  }, modalStateClasses({\n    isOpened: isOpened,\n    isClosing: isClosing\n  }), colorClasses(props));\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    id: id,\n    style: style,\n    className: classes,\n    ref: elRef\n  }, extraAttrs), fixedList, slots.fixed, innerEl);\n});\nSheet.displayName = 'f7-sheet';\nexport default Sheet;","map":null,"metadata":{},"sourceType":"module"}