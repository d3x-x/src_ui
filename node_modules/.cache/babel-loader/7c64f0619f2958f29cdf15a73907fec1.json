{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';\nimport { classNames, getExtraAttrs, emit, getSlots } from '../shared/utils';\nimport { colorClasses } from '../shared/mixins';\nimport { f7ready, f7 } from '../shared/f7';\nimport { useTheme } from '../shared/use-theme';\nimport NavLeft from './nav-left';\nimport NavTitle from './nav-title';\nimport NavRight from './nav-right';\nvar Navbar = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    _props$sliding = props.sliding,\n    sliding = _props$sliding === void 0 ? true : _props$sliding,\n    large = props.large,\n    largeTransparent = props.largeTransparent,\n    transparent = props.transparent,\n    hidden = props.hidden,\n    noShadow = props.noShadow,\n    noHairline = props.noHairline,\n    backLink = props.backLink,\n    backLinkForce = props.backLinkForce,\n    backLinkUrl = props.backLinkUrl,\n    backLinkShowText = props.backLinkShowText,\n    title = props.title,\n    subtitle = props.subtitle,\n    titleLarge = props.titleLarge,\n    innerClass = props.innerClass,\n    innerClassName = props.innerClassName;\n  var routerPositionClass = useRef('');\n  var largeCollapsed = useRef(false);\n  var routerNavbarRole = useRef(null);\n  var routerNavbarRoleDetailRoot = useRef(false);\n  var routerNavbarMasterStack = useRef(false);\n  var transparentVisible = useRef(false);\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  var theme = useTheme();\n  var onHide = function onHide(navbarEl) {\n    if (elRef.current !== navbarEl) return;\n    emit(props, 'navbarHide');\n  };\n  var onShow = function onShow(navbarEl) {\n    if (elRef.current !== navbarEl) return;\n    emit(props, 'navbarShow');\n  };\n  var onExpand = function onExpand(navbarEl) {\n    if (elRef.current !== navbarEl) return;\n    largeCollapsed.current = false;\n    emit(props, 'navbarExpand');\n  };\n  var onCollapse = function onCollapse(navbarEl) {\n    if (elRef.current !== navbarEl) return;\n    largeCollapsed.current = true;\n    emit(props, 'navbarCollapse');\n  };\n  var onNavbarTransparentShow = function onNavbarTransparentShow(navbarEl) {\n    if (elRef.current !== navbarEl) return;\n    transparentVisible.current = true;\n    emit(props, 'navbarTransparentShow');\n  };\n  var onNavbarTransparentHide = function onNavbarTransparentHide(navbarEl) {\n    if (elRef.current !== navbarEl) return;\n    transparentVisible.current = false;\n    emit(props, 'navbarTransparentHide');\n  };\n  var onNavbarPosition = function onNavbarPosition(navbarEl, position) {\n    if (elRef.current !== navbarEl) return;\n    routerPositionClass.current = position ? \"navbar-\" + position : '';\n  };\n  var onNavbarRole = function onNavbarRole(navbarEl, rolesData) {\n    if (elRef.current !== navbarEl) return;\n    routerNavbarRole.current = rolesData.role;\n    routerNavbarRoleDetailRoot.current = rolesData.detailRoot;\n  };\n  var onNavbarMasterStack = function onNavbarMasterStack(navbarEl) {\n    if (elRef.current !== navbarEl) return;\n    routerNavbarMasterStack.current = true;\n  };\n  var onNavbarMasterUnstack = function onNavbarMasterUnstack(navbarEl) {\n    if (elRef.current !== navbarEl) return;\n    routerNavbarMasterStack.current = false;\n  };\n  var hide = function hide(animate) {\n    if (!f7) return;\n    f7.navbar.hide(elRef.current, animate);\n  };\n  var show = function show(animate) {\n    if (!f7) return;\n    f7.navbar.show(elRef.current, animate);\n  };\n  var size = function size() {\n    if (!f7) return;\n    f7.navbar.size(elRef.current);\n  };\n  var onBackClick = function onBackClick(event) {\n    emit(props, 'backClick clickBack', event);\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current,\n      hide: hide,\n      show: show,\n      size: size\n    };\n  });\n  var attachEvents = function attachEvents() {\n    if (!elRef.current) return;\n    f7ready(function () {\n      f7.navbar.size(elRef.current);\n      f7.on('navbarShow', onShow);\n      f7.on('navbarHide', onHide);\n      f7.on('navbarCollapse', onCollapse);\n      f7.on('navbarExpand', onExpand);\n      f7.on('navbarPosition', onNavbarPosition);\n      f7.on('navbarRole', onNavbarRole);\n      f7.on('navbarMasterStack', onNavbarMasterStack);\n      f7.on('navbarMasterUnstack', onNavbarMasterUnstack);\n      f7.on('navbarTransparentShow', onNavbarTransparentShow);\n      f7.on('navbarTransparentHide', onNavbarTransparentHide);\n    });\n  };\n  var detachEvents = function detachEvents() {\n    if (!f7) return;\n    f7.off('navbarShow', onShow);\n    f7.off('navbarHide', onHide);\n    f7.off('navbarCollapse', onCollapse);\n    f7.off('navbarExpand', onExpand);\n    f7.off('navbarPosition', onNavbarPosition);\n    f7.off('navbarRole', onNavbarRole);\n    f7.off('navbarMasterStack', onNavbarMasterStack);\n    f7.off('navbarMasterUnstack', onNavbarMasterUnstack);\n    f7.off('navbarTransparentShow', onNavbarTransparentShow);\n    f7.off('navbarTransparentHide', onNavbarTransparentHide);\n  };\n  useIsomorphicLayoutEffect(function () {\n    attachEvents();\n    return detachEvents;\n  });\n  var slots = getSlots(props);\n  var leftEl;\n  var titleEl;\n  var rightEl;\n  var titleLargeEl;\n  var addLeftTitleClass = theme && theme.ios && f7 && !f7.params.navbar.iosCenterTitle;\n  var addCenterTitleClass = theme && theme.md && f7 && f7.params.navbar.mdCenterTitle || theme && theme.aurora && f7 && f7.params.navbar.auroraCenterTitle;\n  var isLarge = large || largeTransparent;\n  var isTransparent = transparent || isLarge && largeTransparent;\n  var isTransparentVisible = isTransparent && transparentVisible.current;\n  var classes = classNames(className, 'navbar', routerPositionClass.current, {\n    'navbar-hidden': hidden,\n    'navbar-large': isLarge,\n    'navbar-large-collapsed': isLarge && largeCollapsed.current,\n    'navbar-transparent': isTransparent,\n    'navbar-transparent-visible': isTransparentVisible,\n    'navbar-master': routerNavbarRole.current === 'master',\n    'navbar-master-detail': routerNavbarRole.current === 'detail',\n    'navbar-master-detail-root': routerNavbarRoleDetailRoot.current === true,\n    'navbar-master-stacked': routerNavbarMasterStack.current === true,\n    'no-shadow': noShadow,\n    'no-hairline': noHairline\n  }, colorClasses(props));\n  if (backLink || slots['nav-left'] || slots.left) {\n    leftEl = /*#__PURE__*/React.createElement(NavLeft, {\n      backLink: backLink,\n      backLinkUrl: backLinkUrl,\n      backLinkForce: backLinkForce,\n      backLinkShowText: backLinkShowText,\n      onBackClick: onBackClick\n    }, slots['nav-left'], slots.left);\n  }\n  if (title || subtitle || slots.title) {\n    titleEl = /*#__PURE__*/React.createElement(NavTitle, {\n      title: title,\n      subtitle: subtitle\n    }, slots.title);\n  }\n  if (slots['nav-right'] || slots.right) {\n    rightEl = /*#__PURE__*/React.createElement(NavRight, null, slots['nav-right'], slots.right);\n  }\n  var largeTitle = titleLarge;\n  if (!largeTitle && large && title) largeTitle = title;\n  if (largeTitle || slots['title-large']) {\n    titleLargeEl = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title-large\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title-large-text\"\n    }, largeTitle || '', slots['title-large']));\n  }\n  var innerEl = /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames('navbar-inner', innerClass, innerClassName, {\n      sliding: sliding,\n      'navbar-inner-left-title': addLeftTitleClass,\n      'navbar-inner-centered-title': addCenterTitleClass\n    })\n  }, leftEl, titleEl, rightEl, titleLargeEl, slots.default);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    id: id,\n    style: style,\n    className: classes,\n    ref: elRef\n  }, extraAttrs), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"navbar-bg\"\n  }), slots['before-inner'], innerEl, slots['after-inner']);\n});\nNavbar.displayName = 'f7-navbar';\nexport default Navbar;","map":null,"metadata":{},"sourceType":"module"}