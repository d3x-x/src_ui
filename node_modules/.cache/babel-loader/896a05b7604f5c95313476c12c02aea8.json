{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';\nimport { classNames, getExtraAttrs, noUndefinedProps, emit } from '../shared/utils';\nimport { colorClasses } from '../shared/mixins';\nimport { f7ready, f7 } from '../shared/f7';\nimport { watchProp } from '../shared/watch-prop';\nvar Panel = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _classNames;\n  var _f7Panel = useRef(null);\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    children = props.children,\n    side = props.side,\n    effect = props.effect,\n    cover = props.cover,\n    reveal = props.reveal,\n    push = props.push,\n    left = props.left,\n    opened = props.opened,\n    resizable = props.resizable,\n    _props$backdrop = props.backdrop,\n    backdrop = _props$backdrop === void 0 ? true : _props$backdrop,\n    backdropEl = props.backdropEl,\n    containerEl = props.containerEl,\n    visibleBreakpoint = props.visibleBreakpoint,\n    collapsedBreakpoint = props.collapsedBreakpoint,\n    swipe = props.swipe,\n    swipeNoFollow = props.swipeNoFollow,\n    swipeOnlyClose = props.swipeOnlyClose,\n    _props$swipeActiveAre = props.swipeActiveArea,\n    swipeActiveArea = _props$swipeActiveAre === void 0 ? 0 : _props$swipeActiveAre,\n    _props$swipeThreshold = props.swipeThreshold,\n    swipeThreshold = _props$swipeThreshold === void 0 ? 0 : _props$swipeThreshold;\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  var isOpened = useRef(false);\n  var isClosing = useRef(false);\n  var isCollapsed = useRef(false);\n  var isBreakpoint = useRef(false);\n  var onOpen = function onOpen(event) {\n    isOpened.current = true;\n    isClosing.current = false;\n    emit(props, 'panelOpen', event);\n  };\n  var onOpened = function onOpened(event) {\n    emit(props, 'panelOpened', event);\n  };\n  var onClose = function onClose(event) {\n    isOpened.current = false;\n    isClosing.current = true;\n    emit(props, 'panelClose', event);\n  };\n  var onClosed = function onClosed(event) {\n    isClosing.current = false;\n    emit(props, 'panelClosed', event);\n  };\n  var onBackdropClick = function onBackdropClick(event) {\n    emit(props, 'click panelBackdropClick', event);\n  };\n  var onSwipe = function onSwipe(event) {\n    emit(props, 'panelSwipe', event);\n  };\n  var onSwipeOpen = function onSwipeOpen(event) {\n    emit(props, 'panelSwipeOpen', event);\n  };\n  var onBreakpoint = function onBreakpoint(event) {\n    isBreakpoint.current = true;\n    isCollapsed.current = false;\n    emit(props, 'panelBreakpoint', event);\n  };\n  var onCollapsedBreakpoint = function onCollapsedBreakpoint(event) {\n    isBreakpoint.current = false;\n    isCollapsed.current = true;\n    emit(props, 'panelCollapsedBreakpoint', event);\n  };\n  var onResize = function onResize() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    emit.apply(void 0, [props, 'panelResize'].concat(args));\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current,\n      f7Panel: function f7Panel() {\n        return _f7Panel.current;\n      }\n    };\n  });\n  watchProp(resizable, function (newValue) {\n    if (!_f7Panel.current) return;\n    if (newValue) _f7Panel.current.enableResizable();else _f7Panel.current.disableResizable();\n  });\n  watchProp(opened, function (newValue) {\n    if (!_f7Panel.current) return;\n    if (newValue) {\n      _f7Panel.current.open();\n    } else {\n      _f7Panel.current.close();\n    }\n  });\n  var modalEvents = function modalEvents(method) {\n    if (!_f7Panel.current) return;\n    _f7Panel.current[method]('open', onOpen);\n    _f7Panel.current[method]('opened', onOpened);\n    _f7Panel.current[method]('close', onClose);\n    _f7Panel.current[method]('closed', onClosed);\n    _f7Panel.current[method]('backdropClick', onBackdropClick);\n    _f7Panel.current[method]('swipe', onSwipe);\n    _f7Panel.current[method]('swipeOpen', onSwipeOpen);\n    _f7Panel.current[method]('collapsedBreakpoint', onCollapsedBreakpoint);\n    _f7Panel.current[method]('breakpoint', onBreakpoint);\n    _f7Panel.current[method]('resize', onResize);\n  };\n  var onMount = function onMount() {\n    f7ready(function () {\n      var $ = f7.$;\n      if (!$) return;\n      if ($('.panel-backdrop').length === 0) {\n        $('<div class=\"panel-backdrop\"></div>').insertBefore(elRef.current);\n      }\n      var params = noUndefinedProps({\n        el: elRef.current,\n        resizable: resizable,\n        backdrop: backdrop,\n        backdropEl: backdropEl,\n        containerEl: containerEl,\n        visibleBreakpoint: visibleBreakpoint,\n        collapsedBreakpoint: collapsedBreakpoint,\n        swipe: swipe,\n        swipeNoFollow: swipeNoFollow,\n        swipeOnlyClose: swipeOnlyClose,\n        swipeActiveArea: swipeActiveArea,\n        swipeThreshold: swipeThreshold\n      });\n      _f7Panel.current = f7.panel.create(params);\n      modalEvents('on');\n      if (opened) {\n        _f7Panel.current.open(false);\n      }\n    });\n  };\n  var onDestroy = function onDestroy() {\n    if (_f7Panel.current && _f7Panel.current.destroy) {\n      _f7Panel.current.destroy();\n    }\n    _f7Panel.current = null;\n  };\n  useIsomorphicLayoutEffect(function () {\n    modalEvents('on');\n    return function () {\n      modalEvents('off');\n    };\n  });\n  useIsomorphicLayoutEffect(function () {\n    onMount();\n    return onDestroy;\n  }, []);\n  var sideComputed = side || (left ? 'left' : 'right'); // eslint-disable-next-line\n\n  var effectComputed = effect || (reveal ? 'reveal' : push ? 'push' : 'cover');\n  var classes = classNames(className, 'panel', (_classNames = {\n    'panel-in': isOpened.current && !isClosing.current && !isBreakpoint.current,\n    'panel-in-breakpoint': isBreakpoint.current,\n    'panel-in-collapsed': isCollapsed.current,\n    'panel-resizable': resizable\n  }, _classNames[\"panel-\" + sideComputed] = sideComputed, _classNames[\"panel-\" + effectComputed] = effectComputed, _classNames), colorClasses(props));\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    id: id,\n    style: style,\n    className: classes,\n    ref: elRef\n  }, extraAttrs), children, resizable && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"panel-resize-handler\"\n  }));\n});\nPanel.displayName = 'f7-panel';\nexport default Panel;","map":null,"metadata":{},"sourceType":"module"}