{"ast":null,"code":"import $ from '../../shared/dom7';\nimport { extend } from '../../shared/utils';\nimport View from './view-class';\nfunction getCurrentView(app) {\n  var $popoverView = $('.popover.modal-in .view');\n  var $popupView = $('.popup.modal-in .view');\n  var $panelView = $('.panel.panel-in .view');\n  var $viewsEl = $('.views');\n  if ($viewsEl.length === 0) $viewsEl = app.$el; // Find active view as tab\n\n  var $viewEl = $viewsEl.children('.view');\n  if ($viewEl.length === 0) {\n    $viewEl = $viewsEl.children('.tabs').children('.view');\n  } // Propably in tabs or split view\n\n  if ($viewEl.length > 1) {\n    if ($viewEl.hasClass('tab')) {\n      // Tabs\n      $viewEl = $viewsEl.children('.view.tab-active');\n      if ($viewEl.length === 0) {\n        $viewEl = $viewsEl.children('.tabs').children('.view.tab-active');\n      }\n    } else {// Split View, leave appView intact\n    }\n  }\n  if ($popoverView.length > 0 && $popoverView[0].f7View) return $popoverView[0].f7View;\n  if ($popupView.length > 0 && $popupView[0].f7View) return $popupView[0].f7View;\n  if ($panelView.length > 0 && $panelView[0].f7View) return $panelView[0].f7View;\n  if ($viewEl.length > 0) {\n    if ($viewEl.length === 1 && $viewEl[0].f7View) return $viewEl[0].f7View;\n    if ($viewEl.length > 1) {\n      return app.views.main;\n    }\n  }\n  return undefined;\n}\nexport default {\n  name: 'view',\n  params: {\n    view: {\n      init: true,\n      name: undefined,\n      main: false,\n      router: true,\n      linksView: null,\n      stackPages: false,\n      xhrCache: true,\n      xhrCacheIgnore: [],\n      xhrCacheIgnoreGetParameters: false,\n      xhrCacheDuration: 1000 * 60 * 10,\n      // Ten minutes\n      componentCache: true,\n      preloadPreviousPage: true,\n      allowDuplicateUrls: false,\n      reloadPages: false,\n      reloadDetail: false,\n      masterDetailBreakpoint: 0,\n      masterDetailResizable: false,\n      removeElements: true,\n      removeElementsWithTimeout: false,\n      removeElementsTimeout: 0,\n      restoreScrollTopOnBack: true,\n      unloadTabContent: true,\n      passRouteQueryToRequest: true,\n      passRouteParamsToRequest: false,\n      loadInitialPage: true,\n      // Swipe Back\n      iosSwipeBack: true,\n      iosSwipeBackAnimateShadow: true,\n      iosSwipeBackAnimateOpacity: true,\n      iosSwipeBackActiveArea: 30,\n      iosSwipeBackThreshold: 0,\n      mdSwipeBack: false,\n      mdSwipeBackAnimateShadow: true,\n      mdSwipeBackAnimateOpacity: false,\n      mdSwipeBackActiveArea: 30,\n      mdSwipeBackThreshold: 0,\n      auroraSwipeBack: false,\n      auroraSwipeBackAnimateShadow: false,\n      auroraSwipeBackAnimateOpacity: true,\n      auroraSwipeBackActiveArea: 30,\n      auroraSwipeBackThreshold: 0,\n      // Push State\n      browserHistory: false,\n      browserHistoryRoot: undefined,\n      browserHistoryAnimate: true,\n      browserHistoryAnimateOnLoad: false,\n      browserHistorySeparator: '#!',\n      browserHistoryOnLoad: true,\n      browserHistoryInitialMatch: false,\n      browserHistoryStoreHistory: true,\n      // Animate Pages\n      animate: true,\n      // iOS Dynamic Navbar\n      iosDynamicNavbar: true,\n      // Animate iOS Navbar Back Icon\n      iosAnimateNavbarBackIcon: true,\n      // Delays\n      iosPageLoadDelay: 0,\n      mdPageLoadDelay: 0,\n      auroraPageLoadDelay: 0,\n      // Routes hooks\n      routesBeforeEnter: null,\n      routesBeforeLeave: null\n    }\n  },\n  static: {\n    View: View\n  },\n  create: function create() {\n    var app = this;\n    extend(app, {\n      views: extend([], {\n        create: function create(el, params) {\n          return new View(app, el, params);\n        },\n        get: function get(viewEl) {\n          var $viewEl = $(viewEl);\n          if ($viewEl.length && $viewEl[0].f7View) return $viewEl[0].f7View;\n          return undefined;\n        }\n      })\n    });\n    Object.defineProperty(app.views, 'current', {\n      enumerable: true,\n      configurable: true,\n      get: function get() {\n        return getCurrentView(app);\n      }\n    }); // Alias\n\n    app.view = app.views;\n  },\n  on: {\n    init: function init() {\n      var app = this;\n      $('.view-init').each(function (viewEl) {\n        if (viewEl.f7View) return;\n        var viewParams = $(viewEl).dataset();\n        app.views.create(viewEl, viewParams);\n      });\n    },\n    'modalOpen panelOpen': function onOpen(instance) {\n      var app = this;\n      instance.$el.find('.view-init').each(function (viewEl) {\n        if (viewEl.f7View) return;\n        var viewParams = $(viewEl).dataset();\n        app.views.create(viewEl, viewParams);\n      });\n    },\n    'modalBeforeDestroy panelBeforeDestroy': function onClose(instance) {\n      if (!instance || !instance.$el) return;\n      instance.$el.find('.view-init').each(function (viewEl) {\n        var view = viewEl.f7View;\n        if (!view) return;\n        view.destroy();\n      });\n    }\n  },\n  vnode: {\n    'view-init': {\n      insert: function insert(vnode) {\n        var app = this;\n        var viewEl = vnode.elm;\n        if (viewEl.f7View) return;\n        var viewParams = $(viewEl).dataset();\n        app.views.create(viewEl, viewParams);\n      },\n      destroy: function destroy(vnode) {\n        var viewEl = vnode.elm;\n        var view = viewEl.f7View;\n        if (!view) return;\n        view.destroy();\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}