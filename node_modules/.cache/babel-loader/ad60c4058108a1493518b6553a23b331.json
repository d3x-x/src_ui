{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/* eslint no-nested-ternary: off */\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { classNames, getExtraAttrs } from '../shared/utils';\nvar Gauge = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    _props$type = props.type,\n    type = _props$type === void 0 ? 'circle' : _props$type,\n    _props$value = props.value,\n    value = _props$value === void 0 ? 0 : _props$value,\n    _props$size = props.size,\n    size = _props$size === void 0 ? 200 : _props$size,\n    _props$bgColor = props.bgColor,\n    bgColor = _props$bgColor === void 0 ? 'transparent' : _props$bgColor,\n    _props$borderBgColor = props.borderBgColor,\n    borderBgColor = _props$borderBgColor === void 0 ? '#eeeeee' : _props$borderBgColor,\n    _props$borderColor = props.borderColor,\n    borderColor = _props$borderColor === void 0 ? '#000000' : _props$borderColor,\n    _props$borderWidth = props.borderWidth,\n    borderWidth = _props$borderWidth === void 0 ? 10 : _props$borderWidth,\n    valueText = props.valueText,\n    _props$valueTextColor = props.valueTextColor,\n    valueTextColor = _props$valueTextColor === void 0 ? '#000000' : _props$valueTextColor,\n    _props$valueFontSize = props.valueFontSize,\n    valueFontSize = _props$valueFontSize === void 0 ? 31 : _props$valueFontSize,\n    _props$valueFontWeigh = props.valueFontWeight,\n    valueFontWeight = _props$valueFontWeigh === void 0 ? 500 : _props$valueFontWeigh,\n    labelText = props.labelText,\n    _props$labelTextColor = props.labelTextColor,\n    labelTextColor = _props$labelTextColor === void 0 ? '#888888' : _props$labelTextColor,\n    _props$labelFontSize = props.labelFontSize,\n    labelFontSize = _props$labelFontSize === void 0 ? 14 : _props$labelFontSize,\n    _props$labelFontWeigh = props.labelFontWeight,\n    labelFontWeight = _props$labelFontWeigh === void 0 ? 400 : _props$labelFontWeigh;\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current\n    };\n  });\n  var classes = classNames(className, 'gauge');\n  var semiCircle = type === 'semicircle';\n  var radius = size / 2 - borderWidth / 2;\n  var length = 2 * Math.PI * radius;\n  var progress = Math.max(Math.min(value, 1), 0);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    id: id,\n    style: style,\n    className: classes,\n    ref: elRef\n  }, extraAttrs), /*#__PURE__*/React.createElement(\"svg\", {\n    className: \"gauge-svg\",\n    width: size + \"px\",\n    height: (semiCircle ? size / 2 : size) + \"px\",\n    viewBox: \"0 0 \" + size + \" \" + (semiCircle ? size / 2 : size)\n  }, semiCircle && /*#__PURE__*/React.createElement(\"path\", {\n    className: \"gauge-back-semi\",\n    d: \"M\" + (size - borderWidth / 2) + \",\" + size / 2 + \" a1,1 0 0,0 -\" + (size - borderWidth) + \",0\",\n    stroke: borderBgColor,\n    strokeWidth: borderWidth,\n    fill: bgColor || 'none'\n  }), semiCircle && /*#__PURE__*/React.createElement(\"path\", {\n    className: \"gauge-front-semi\",\n    d: \"M\" + (size - borderWidth / 2) + \",\" + size / 2 + \" a1,1 0 0,0 -\" + (size - borderWidth) + \",0\",\n    stroke: borderColor,\n    strokeWidth: borderWidth,\n    strokeDasharray: length / 2,\n    strokeDashoffset: length / 2 * (1 + progress),\n    fill: borderBgColor ? 'none' : bgColor || 'none'\n  }), !semiCircle && borderBgColor && /*#__PURE__*/React.createElement(\"circle\", {\n    className: \"gauge-back-circle\",\n    stroke: borderBgColor,\n    strokeWidth: borderWidth,\n    fill: bgColor || 'none',\n    cx: size / 2,\n    cy: size / 2,\n    r: radius\n  }), !semiCircle && /*#__PURE__*/React.createElement(\"circle\", {\n    className: \"gauge-front-circle\",\n    transform: \"rotate(-90 \" + size / 2 + \" \" + size / 2 + \")\",\n    stroke: borderColor,\n    strokeWidth: borderWidth,\n    strokeDasharray: length,\n    strokeDashoffset: length * (1 - progress),\n    fill: borderBgColor ? 'none' : bgColor || 'none',\n    cx: size / 2,\n    cy: size / 2,\n    r: radius\n  }), valueText && /*#__PURE__*/React.createElement(\"text\", {\n    className: \"gauge-value-text\",\n    x: \"50%\",\n    y: semiCircle ? '100%' : '50%',\n    fontWeight: valueFontWeight,\n    fontSize: valueFontSize,\n    fill: valueTextColor,\n    dy: semiCircle ? labelText ? -labelFontSize - 15 : -5 : 0,\n    textAnchor: \"middle\",\n    dominantBaseline: !semiCircle ? 'middle' : null\n  }, valueText), labelText && /*#__PURE__*/React.createElement(\"text\", {\n    className: \"gauge-label-text\",\n    x: \"50%\",\n    y: semiCircle ? '100%' : '50%',\n    fontWeight: labelFontWeight,\n    fontSize: labelFontSize,\n    fill: labelTextColor,\n    dy: semiCircle ? -5 : valueText ? valueFontSize / 2 + 10 : 0,\n    textAnchor: \"middle\",\n    dominantBaseline: !semiCircle ? 'middle' : null\n  }, labelText)));\n});\nGauge.displayName = 'f7-gauge';\nexport default Gauge;","map":null,"metadata":{},"sourceType":"module"}