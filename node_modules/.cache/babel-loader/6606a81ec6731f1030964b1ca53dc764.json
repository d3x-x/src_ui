{"ast":null,"code":"var EventsClass = /*#__PURE__*/function () {\n  function EventsClass(parents) {\n    if (parents === void 0) {\n      parents = [];\n    }\n    var self = this;\n    self.eventsParents = parents;\n    self.eventsListeners = {};\n  }\n  var _proto = EventsClass.prototype;\n  _proto.on = function on(events, handler, priority) {\n    var self = this;\n    if (typeof handler !== 'function') return self;\n    var method = priority ? 'unshift' : 'push';\n    events.split(' ').forEach(function (event) {\n      if (!self.eventsListeners[event]) self.eventsListeners[event] = [];\n      self.eventsListeners[event][method](handler);\n    });\n    return self;\n  };\n  _proto.once = function once(events, handler, priority) {\n    var self = this;\n    if (typeof handler !== 'function') return self;\n    function onceHandler() {\n      self.off(events, onceHandler);\n      if (onceHandler.f7proxy) {\n        delete onceHandler.f7proxy;\n      }\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      handler.apply(self, args);\n    }\n    onceHandler.f7proxy = handler;\n    return self.on(events, onceHandler, priority);\n  };\n  _proto.off = function off(events, handler) {\n    var self = this;\n    if (!self.eventsListeners) return self;\n    events.split(' ').forEach(function (event) {\n      if (typeof handler === 'undefined') {\n        self.eventsListeners[event] = [];\n      } else if (self.eventsListeners[event]) {\n        self.eventsListeners[event].forEach(function (eventHandler, index) {\n          if (eventHandler === handler || eventHandler.f7proxy && eventHandler.f7proxy === handler) {\n            self.eventsListeners[event].splice(index, 1);\n          }\n        });\n      }\n    });\n    return self;\n  };\n  _proto.emit = function emit() {\n    var self = this;\n    if (!self.eventsListeners) return self;\n    var events;\n    var data;\n    var context;\n    var eventsParents;\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    if (typeof args[0] === 'string' || Array.isArray(args[0])) {\n      events = args[0];\n      data = args.slice(1, args.length);\n      context = self;\n      eventsParents = self.eventsParents;\n    } else {\n      events = args[0].events;\n      data = args[0].data;\n      context = args[0].context || self;\n      eventsParents = args[0].local ? [] : args[0].parents || self.eventsParents;\n    }\n    var eventsArray = Array.isArray(events) ? events : events.split(' ');\n    var localEvents = eventsArray.map(function (eventName) {\n      return eventName.replace('local::', '');\n    });\n    var parentEvents = eventsArray.filter(function (eventName) {\n      return eventName.indexOf('local::') < 0;\n    });\n    localEvents.forEach(function (event) {\n      if (self.eventsListeners && self.eventsListeners[event]) {\n        var handlers = [];\n        self.eventsListeners[event].forEach(function (eventHandler) {\n          handlers.push(eventHandler);\n        });\n        handlers.forEach(function (eventHandler) {\n          eventHandler.apply(context, data);\n        });\n      }\n    });\n    if (eventsParents && eventsParents.length > 0) {\n      eventsParents.forEach(function (eventsParent) {\n        eventsParent.emit.apply(eventsParent, [parentEvents].concat(data));\n      });\n    }\n    return self;\n  };\n  return EventsClass;\n}();\nexport default EventsClass;","map":null,"metadata":{},"sourceType":"module"}