{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { classNames, getExtraAttrs, isStringProp, emit } from '../shared/utils';\nimport { colorClasses, actionsAttrs, actionsClasses, routerAttrs, routerClasses } from '../shared/mixins';\nimport { useTooltip } from '../shared/use-tooltip';\nimport { useRouteProps } from '../shared/use-route-props';\nvar ListButton = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    children = props.children,\n    title = props.title,\n    text = props.text,\n    tabLink = props.tabLink,\n    tabLinkActive = props.tabLinkActive,\n    link = props.link,\n    href = props.href,\n    target = props.target;\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  var linkElRef = useRef(null);\n  var onClick = function onClick(e) {\n    emit(props, 'click', e);\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current\n    };\n  });\n  useTooltip(linkElRef, props);\n  useRouteProps(linkElRef, props);\n  var linkAttrs = _extends({\n    href: typeof link === 'boolean' && typeof href === 'boolean' ? '#' : link || href,\n    target: target,\n    'data-tab': isStringProp(tabLink) && tabLink\n  }, routerAttrs(props), actionsAttrs(props));\n  var linkClasses = classNames(_extends({\n    'list-button': true,\n    'tab-link': tabLink || tabLink === '',\n    'tab-link-active': tabLinkActive\n  }, colorClasses(props), routerClasses(props), actionsClasses(props)));\n  return /*#__PURE__*/React.createElement(\"li\", _extends({\n    id: id,\n    style: style,\n    className: className,\n    ref: elRef\n  }, extraAttrs), /*#__PURE__*/React.createElement(\"a\", _extends({\n    className: linkClasses\n  }, linkAttrs, {\n    onClick: onClick,\n    ref: linkElRef\n  }), title, text, children));\n});\nListButton.displayName = 'f7-list-button';\nexport default ListButton;","map":null,"metadata":{},"sourceType":"module"}