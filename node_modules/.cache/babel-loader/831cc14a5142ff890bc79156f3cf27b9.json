{"ast":null,"code":"import { getWindow } from 'ssr-window';\nimport $ from '../../shared/dom7';\nimport { bindMethods } from '../../shared/utils';\nimport { getDevice } from '../../shared/get-device';\nvar isCapacitor = function isCapacitor() {\n  var window = getWindow();\n  return window.Capacitor && window.Capacitor.isNative && window.Capacitor.Plugins && window.Capacitor.Plugins.StatusBar;\n};\nvar Statusbar = {\n  hide: function hide() {\n    var window = getWindow();\n    var device = getDevice();\n    if (device.cordova && window.StatusBar) {\n      window.StatusBar.hide();\n    }\n    if (isCapacitor()) {\n      window.Capacitor.Plugins.StatusBar.hide();\n    }\n  },\n  show: function show() {\n    var window = getWindow();\n    var device = getDevice();\n    if (device.cordova && window.StatusBar) {\n      window.StatusBar.show();\n    }\n    if (isCapacitor()) {\n      window.Capacitor.Plugins.StatusBar.show();\n    }\n  },\n  onClick: function onClick() {\n    var app = this;\n    var pageContent;\n    if ($('.popup.modal-in').length > 0) {\n      // Check for opened popup\n      pageContent = $('.popup.modal-in').find('.page:not(.page-previous):not(.page-next):not(.cached)').find('.page-content');\n    } else if ($('.panel.panel-in').length > 0) {\n      // Check for opened panel\n      pageContent = $('.panel.panel-in').find('.page:not(.page-previous):not(.page-next):not(.cached)').find('.page-content');\n    } else if ($('.views > .view.tab-active').length > 0) {\n      // View in tab bar app layout\n      pageContent = $('.views > .view.tab-active').find('.page:not(.page-previous):not(.page-next):not(.cached)').find('.page-content');\n    } else if ($('.views').length > 0) {\n      pageContent = $('.views').find('.page:not(.page-previous):not(.page-next):not(.cached)').find('.page-content');\n    } else {\n      pageContent = app.$el.children('.view').find('.page:not(.page-previous):not(.page-next):not(.cached)').find('.page-content');\n    }\n    if (pageContent && pageContent.length > 0) {\n      // Check for tab\n      if (pageContent.hasClass('tab')) {\n        pageContent = pageContent.parent('.tabs').children('.page-content.tab-active');\n      }\n      if (pageContent.length > 0) pageContent.scrollTop(0, 300);\n    }\n  },\n  setTextColor: function setTextColor(color) {\n    var window = getWindow();\n    var device = getDevice();\n    if (device.cordova && window.StatusBar) {\n      if (color === 'white') {\n        window.StatusBar.styleLightContent();\n      } else {\n        window.StatusBar.styleDefault();\n      }\n    }\n    if (isCapacitor()) {\n      if (color === 'white') {\n        window.Capacitor.Plugins.StatusBar.setStyle({\n          style: 'DARK'\n        });\n      } else {\n        window.Capacitor.Plugins.StatusBar.setStyle({\n          style: 'LIGHT'\n        });\n      }\n    }\n  },\n  setBackgroundColor: function setBackgroundColor(color) {\n    var window = getWindow();\n    var device = getDevice();\n    if (device.cordova && window.StatusBar) {\n      window.StatusBar.backgroundColorByHexString(color);\n    }\n    if (isCapacitor()) {\n      window.Capacitor.Plugins.StatusBar.setBackgroundColor({\n        color: color\n      });\n    }\n  },\n  isVisible: function isVisible() {\n    var window = getWindow();\n    var device = getDevice();\n    return new Promise(function (resolve) {\n      if (device.cordova && window.StatusBar) {\n        resolve(window.StatusBar.isVisible);\n      }\n      if (isCapacitor()) {\n        window.Capacitor.Plugins.StatusBar.getInfo().then(function (info) {\n          resolve(info.visible);\n        });\n      }\n      resolve(false);\n    });\n  },\n  overlaysWebView: function overlaysWebView(overlays) {\n    if (overlays === void 0) {\n      overlays = true;\n    }\n    var window = getWindow();\n    var device = getDevice();\n    if (device.cordova && window.StatusBar) {\n      window.StatusBar.overlaysWebView(overlays);\n    }\n    if (isCapacitor()) {\n      window.Capacitor.Plugins.StatusBar.setOverlaysWebView({\n        overlay: overlays\n      });\n    }\n  },\n  init: function init() {\n    var app = this;\n    var window = getWindow();\n    var device = getDevice();\n    var params = app.params.statusbar;\n    if (!params.enabled) return;\n    var isCordova = device.cordova && window.StatusBar;\n    var isCap = isCapacitor();\n    if (isCordova || isCap) {\n      if (params.scrollTopOnClick) {\n        $(window).on('statusTap', Statusbar.onClick.bind(app));\n      }\n      if (device.ios) {\n        if (params.iosOverlaysWebView) {\n          Statusbar.overlaysWebView(true);\n        } else {\n          Statusbar.overlaysWebView(false);\n        }\n        if (params.iosTextColor === 'white') {\n          Statusbar.setTextColor('white');\n        } else {\n          Statusbar.setTextColor('black');\n        }\n      }\n      if (device.android) {\n        if (params.androidOverlaysWebView) {\n          Statusbar.overlaysWebView(true);\n        } else {\n          Statusbar.overlaysWebView(false);\n        }\n        if (params.androidTextColor === 'white') {\n          Statusbar.setTextColor('white');\n        } else {\n          Statusbar.setTextColor('black');\n        }\n      }\n    }\n    if (params.iosBackgroundColor && device.ios) {\n      Statusbar.setBackgroundColor(params.iosBackgroundColor);\n    }\n    if (params.androidBackgroundColor && device.android) {\n      Statusbar.setBackgroundColor(params.androidBackgroundColor);\n    }\n  }\n};\nexport default {\n  name: 'statusbar',\n  params: {\n    statusbar: {\n      enabled: true,\n      scrollTopOnClick: true,\n      iosOverlaysWebView: true,\n      iosTextColor: 'black',\n      iosBackgroundColor: null,\n      androidOverlaysWebView: false,\n      androidTextColor: 'black',\n      androidBackgroundColor: null\n    }\n  },\n  create: function create() {\n    var app = this;\n    bindMethods(app, {\n      statusbar: Statusbar\n    });\n  },\n  on: {\n    init: function init() {\n      var app = this;\n      Statusbar.init.call(app);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}