{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';\nimport { classNames, getExtraAttrs, getSlots, emit } from '../shared/utils';\nimport { colorClasses } from '../shared/mixins';\nimport { f7ready, f7 } from '../shared/f7';\nimport PageContent from './page-content';\nvar Page = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    name = props.name,\n    stacked = props.stacked,\n    withSubnavbar = props.withSubnavbar,\n    subnavbar = props.subnavbar,\n    withNavbarLarge = props.withNavbarLarge,\n    navbarLarge = props.navbarLarge,\n    noNavbar = props.noNavbar,\n    noToolbar = props.noToolbar,\n    tabs = props.tabs,\n    _props$pageContent = props.pageContent,\n    pageContent = _props$pageContent === void 0 ? true : _props$pageContent,\n    noSwipeback = props.noSwipeback,\n    ptr = props.ptr,\n    ptrDistance = props.ptrDistance,\n    _props$ptrPreloader = props.ptrPreloader,\n    ptrPreloader = _props$ptrPreloader === void 0 ? true : _props$ptrPreloader,\n    ptrBottom = props.ptrBottom,\n    ptrMousewheel = props.ptrMousewheel,\n    infinite = props.infinite,\n    infiniteTop = props.infiniteTop,\n    infiniteDistance = props.infiniteDistance,\n    _props$infinitePreloa = props.infinitePreloader,\n    infinitePreloader = _props$infinitePreloa === void 0 ? true : _props$infinitePreloa,\n    hideBarsOnScroll = props.hideBarsOnScroll,\n    hideNavbarOnScroll = props.hideNavbarOnScroll,\n    hideToolbarOnScroll = props.hideToolbarOnScroll,\n    messagesContent = props.messagesContent,\n    loginScreen = props.loginScreen,\n    onPtrPullStart = props.onPtrPullStart,\n    onPtrPullMove = props.onPtrPullMove,\n    onPtrPullEnd = props.onPtrPullEnd,\n    onPtrRefresh = props.onPtrRefresh,\n    onPtrDone = props.onPtrDone,\n    onInfinite = props.onInfinite;\n  var hasSubnavbar = useRef(false);\n  var hasNavbarLarge = useRef(false);\n  var hasNavbarLargeCollapsed = useRef(false);\n  var hasCardExpandableOpened = useRef(false);\n  var routerPositionClass = useRef('');\n  var routerForceUnstack = useRef(false);\n  var routerPageRole = useRef(null);\n  var routerPageRoleDetailRoot = useRef(false);\n  var routerPageMasterStack = useRef(false);\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null); // Main Page Events\n\n  var onPageMounted = function onPageMounted(page) {\n    if (elRef.current !== page.el) return;\n    emit(props, 'pageMounted', page);\n  };\n  var onPageInit = function onPageInit(page) {\n    if (elRef.current !== page.el) return;\n    if (typeof withSubnavbar === 'undefined' && typeof subnavbar === 'undefined') {\n      if (page.$navbarEl && page.$navbarEl.length && page.$navbarEl.find('.subnavbar').length || page.$el.children('.navbar').find('.subnavbar').length) {\n        hasSubnavbar.current = true;\n      }\n    }\n    if (typeof withNavbarLarge === 'undefined' && typeof navbarLarge === 'undefined') {\n      if (page.$navbarEl && page.$navbarEl.hasClass('navbar-large')) {\n        hasNavbarLarge.current = true;\n      }\n    }\n    emit(props, 'pageInit', page);\n  };\n  var onPageReinit = function onPageReinit(page) {\n    if (elRef.current !== page.el) return;\n    emit(props, 'pageReinit', page);\n  };\n  var onPageBeforeIn = function onPageBeforeIn(page) {\n    if (elRef.current !== page.el) return;\n    if (!page.swipeBack) {\n      if (page.from === 'next') {\n        routerPositionClass.current = 'page-next';\n      }\n      if (page.from === 'previous') {\n        routerPositionClass.current = 'page-previous';\n      }\n    }\n    emit(props, 'pageBeforeIn', page);\n  };\n  var onPageBeforeOut = function onPageBeforeOut(page) {\n    if (elRef.current !== page.el) return;\n    emit(props, 'pageBeforeOut', page);\n  };\n  var onPageAfterOut = function onPageAfterOut(page) {\n    if (elRef.current !== page.el) return;\n    if (page.to === 'next') {\n      routerPositionClass.current = 'page-next';\n    }\n    if (page.to === 'previous') {\n      routerPositionClass.current = 'page-previous';\n    }\n    emit(props, 'pageAfterOut', page);\n  };\n  var onPageAfterIn = function onPageAfterIn(page) {\n    if (elRef.current !== page.el) return;\n    routerPositionClass.current = 'page-current';\n    emit(props, 'pageAfterIn', page);\n  };\n  var onPageBeforeRemove = function onPageBeforeRemove(page) {\n    if (elRef.current !== page.el) return;\n    emit(props, 'pageBeforeRemove', page);\n  };\n  var onPageBeforeUnmount = function onPageBeforeUnmount(page) {\n    if (elRef.current !== page.el) return;\n    emit(props, 'pageBeforeUnmount', page);\n  }; // Helper events\n\n  var onPageStack = function onPageStack(pageEl) {\n    if (elRef.current !== pageEl) return;\n    routerForceUnstack.current = false;\n  };\n  var onPageUnstack = function onPageUnstack(pageEl) {\n    if (elRef.current !== pageEl) return;\n    routerForceUnstack.current = true;\n  };\n  var onPagePosition = function onPagePosition(pageEl, position) {\n    if (elRef.current !== pageEl) return;\n    routerPositionClass.current = \"page-\" + position;\n  };\n  var onPageRole = function onPageRole(pageEl, rolesData) {\n    if (elRef.current !== pageEl) return;\n    routerPageRole.current = rolesData.role;\n    routerPageRoleDetailRoot.current = rolesData.detailRoot;\n  };\n  var onPageMasterStack = function onPageMasterStack(pageEl) {\n    if (elRef.current !== pageEl) return;\n    routerPageMasterStack.current = true;\n  };\n  var onPageMasterUnstack = function onPageMasterUnstack(pageEl) {\n    if (elRef.current !== pageEl) return;\n    routerPageMasterStack.current = false;\n  };\n  var onPageNavbarLargeCollapsed = function onPageNavbarLargeCollapsed(pageEl) {\n    if (elRef.current !== pageEl) return;\n    hasNavbarLargeCollapsed.current = true;\n  };\n  var onPageNavbarLargeExpanded = function onPageNavbarLargeExpanded(pageEl) {\n    if (elRef.current !== pageEl) return;\n    hasNavbarLargeCollapsed.current = false;\n  };\n  var onCardOpened = function onCardOpened(cardEl, pageEl) {\n    if (elRef.current !== pageEl) return;\n    hasCardExpandableOpened.current = true;\n  };\n  var onCardClose = function onCardClose(cardEl, pageEl) {\n    if (elRef.current !== pageEl) return;\n    hasCardExpandableOpened.current = false;\n  };\n  var onPageTabShow = function onPageTabShow(pageEl) {\n    if (elRef.current !== pageEl) return;\n    emit(props, 'pageTabShow');\n  };\n  var onPageTabHide = function onPageTabHide(pageEl) {\n    if (elRef.current !== pageEl) return;\n    emit(props, 'pageTabHide');\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current\n    };\n  });\n  var attachEvents = function attachEvents() {\n    f7ready(function () {\n      f7.on('pageMounted', onPageMounted);\n      f7.on('pageInit', onPageInit);\n      f7.on('pageReinit', onPageReinit);\n      f7.on('pageBeforeIn', onPageBeforeIn);\n      f7.on('pageBeforeOut', onPageBeforeOut);\n      f7.on('pageAfterOut', onPageAfterOut);\n      f7.on('pageAfterIn', onPageAfterIn);\n      f7.on('pageBeforeRemove', onPageBeforeRemove);\n      f7.on('pageBeforeUnmount', onPageBeforeUnmount);\n      f7.on('pageStack', onPageStack);\n      f7.on('pageUnstack', onPageUnstack);\n      f7.on('pagePosition', onPagePosition);\n      f7.on('pageRole', onPageRole);\n      f7.on('pageMasterStack', onPageMasterStack);\n      f7.on('pageMasterUnstack', onPageMasterUnstack);\n      f7.on('pageNavbarLargeCollapsed', onPageNavbarLargeCollapsed);\n      f7.on('pageNavbarLargeExpanded', onPageNavbarLargeExpanded);\n      f7.on('cardOpened', onCardOpened);\n      f7.on('cardClose', onCardClose);\n      f7.on('pageTabShow', onPageTabShow);\n      f7.on('pageTabHide', onPageTabHide);\n    });\n  };\n  var detachEvents = function detachEvents() {\n    if (!f7) return;\n    f7.off('pageMounted', onPageMounted);\n    f7.off('pageInit', onPageInit);\n    f7.off('pageReinit', onPageReinit);\n    f7.off('pageBeforeIn', onPageBeforeIn);\n    f7.off('pageBeforeOut', onPageBeforeOut);\n    f7.off('pageAfterOut', onPageAfterOut);\n    f7.off('pageAfterIn', onPageAfterIn);\n    f7.off('pageBeforeRemove', onPageBeforeRemove);\n    f7.off('pageBeforeUnmount', onPageBeforeUnmount);\n    f7.off('pageStack', onPageStack);\n    f7.off('pageUnstack', onPageUnstack);\n    f7.off('pagePosition', onPagePosition);\n    f7.off('pageRole', onPageRole);\n    f7.off('pageMasterStack', onPageMasterStack);\n    f7.off('pageMasterUnstack', onPageMasterUnstack);\n    f7.off('pageNavbarLargeCollapsed', onPageNavbarLargeCollapsed);\n    f7.off('pageNavbarLargeExpanded', onPageNavbarLargeExpanded);\n    f7.off('cardOpened', onCardOpened);\n    f7.off('cardClose', onCardClose);\n    f7.off('pageTabShow', onPageTabShow);\n    f7.off('pageTabHide', onPageTabHide);\n  };\n  useIsomorphicLayoutEffect(function () {\n    attachEvents();\n    return detachEvents;\n  });\n  var slots = getSlots(props);\n  var fixedList = [];\n  var staticList = [];\n  var slotsStatic = slots.static,\n    slotsFixed = slots.fixed,\n    slotsDefault = slots.default;\n  var fixedTags = 'navbar toolbar tabbar subnavbar searchbar messagebar fab list-index panel'.split(' ').map(function (tagName) {\n    return \"f7-\" + tagName;\n  });\n  var hasSubnavbarComputed;\n  var hasNavbarLargeComputed;\n  var hasMessages = messagesContent;\n  if (slotsDefault) {\n    slotsDefault.forEach(function (child) {\n      if (typeof child === 'undefined') return;\n      var isFixedTag = false;\n      var tag = child.type && (child.type.displayName || child.type.name);\n      if (!tag) {\n        if (pageContent) staticList.push(child);\n        return;\n      }\n      if (tag === 'f7-subnavbar') hasSubnavbarComputed = true;\n      if (tag === 'f7-navbar') {\n        if (child.props && child.props.large) hasNavbarLargeComputed = true;\n      }\n      if (typeof hasMessages === 'undefined' && tag === 'f7-messages') hasMessages = true;\n      if (fixedTags.indexOf(tag) >= 0) {\n        isFixedTag = true;\n      }\n      if (pageContent) {\n        if (isFixedTag) fixedList.push(child);else staticList.push(child);\n      }\n    });\n  }\n  var forceSubnavbar = typeof subnavbar === 'undefined' && typeof withSubnavbar === 'undefined' ? hasSubnavbarComputed || hasSubnavbar.current : false;\n  var forceNavbarLarge = typeof navbarLarge === 'undefined' && typeof withNavbarLarge === 'undefined' ? hasNavbarLargeComputed || hasNavbarLarge.current : false;\n  var classes = classNames(className, 'page', routerPositionClass.current, {\n    stacked: stacked && !routerForceUnstack.current,\n    tabs: tabs,\n    'page-with-subnavbar': subnavbar || withSubnavbar || forceSubnavbar,\n    'page-with-navbar-large': navbarLarge || withNavbarLarge || forceNavbarLarge,\n    'no-navbar': noNavbar,\n    'no-toolbar': noToolbar,\n    'no-swipeback': noSwipeback,\n    'page-master': routerPageRole.current === 'master',\n    'page-master-detail': routerPageRole.current === 'detail',\n    'page-master-detail-root': routerPageRoleDetailRoot.current === true,\n    'page-master-stacked': routerPageMasterStack.current === true,\n    'page-with-navbar-large-collapsed': hasNavbarLargeCollapsed.current === true,\n    'page-with-card-opened': hasCardExpandableOpened.current === true,\n    'login-screen-page': loginScreen\n  }, colorClasses(props));\n  if (!pageContent) {\n    return /*#__PURE__*/React.createElement(\"div\", _extends({\n      id: id,\n      style: style,\n      className: classes,\n      \"data-name\": name,\n      ref: elRef\n    }, extraAttrs), slotsFixed, slotsStatic, slotsDefault);\n  }\n  var pageContentEl = /*#__PURE__*/React.createElement(PageContent, {\n    ptr: ptr,\n    ptrDistance: ptrDistance,\n    ptrPreloader: ptrPreloader,\n    ptrBottom: ptrBottom,\n    ptrMousewheel: ptrMousewheel,\n    infinite: infinite,\n    infiniteTop: infiniteTop,\n    infiniteDistance: infiniteDistance,\n    infinitePreloader: infinitePreloader,\n    hideBarsOnScroll: hideBarsOnScroll,\n    hideNavbarOnScroll: hideNavbarOnScroll,\n    hideToolbarOnScroll: hideToolbarOnScroll,\n    messagesContent: messagesContent || hasMessages,\n    loginScreen: loginScreen,\n    onPtrPullStart: onPtrPullStart,\n    onPtrPullMove: onPtrPullMove,\n    onPtrPullEnd: onPtrPullEnd,\n    onPtrRefresh: onPtrRefresh,\n    onPtrDone: onPtrDone,\n    onInfinite: onInfinite\n  }, slotsStatic, staticList);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    id: id,\n    style: style,\n    className: classes,\n    \"data-name\": name,\n    ref: elRef\n  }, extraAttrs), fixedList, slotsFixed, pageContentEl);\n});\nPage.displayName = 'f7-page';\nexport default Page;","map":null,"metadata":{},"sourceType":"module"}