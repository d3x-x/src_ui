{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { getDocument } from 'ssr-window';\nimport $ from '../../shared/dom7';\nimport { extend, parseUrlQuery } from '../../shared/utils';\nimport History from '../../shared/history';\nimport redirect from './redirect';\nimport processRouteQueue from './process-route-queue';\nimport appRouterCheck from './app-router-check';\nimport asyncComponent from './async-component';\nfunction refreshPage() {\n  var router = this;\n  appRouterCheck(router, 'refreshPage');\n  return router.navigate(router.currentRoute.url, {\n    ignoreCache: true,\n    reloadCurrent: true\n  });\n}\nfunction forward(router, el, forwardOptions) {\n  if (forwardOptions === void 0) {\n    forwardOptions = {};\n  }\n  var document = getDocument();\n  var $el = $(el);\n  var app = router.app;\n  var view = router.view;\n  var options = extend(false, {\n    animate: router.params.animate,\n    browserHistory: true,\n    replaceState: false,\n    history: true,\n    reloadCurrent: router.params.reloadPages,\n    reloadPrevious: false,\n    reloadAll: false,\n    clearPreviousHistory: false,\n    reloadDetail: router.params.reloadDetail,\n    on: {}\n  }, forwardOptions);\n  var masterDetailEnabled = router.params.masterDetailBreakpoint > 0;\n  var isMaster = masterDetailEnabled && options.route && options.route.route && (options.route.route.master === true || typeof options.route.route.master === 'function' && options.route.route.master(app, router));\n  var masterPageEl;\n  var otherDetailPageEl;\n  var detailsInBetweenRemoved = 0;\n  var currentRouteIsModal = router.currentRoute.modal;\n  var modalType;\n  if (!currentRouteIsModal) {\n    'popup popover sheet loginScreen actions customModal panel'.split(' ').forEach(function (modalLoadProp) {\n      if (router.currentRoute && router.currentRoute.route && router.currentRoute.route[modalLoadProp]) {\n        currentRouteIsModal = true;\n        modalType = modalLoadProp;\n      }\n    });\n  }\n  if (currentRouteIsModal) {\n    var modalToClose = router.currentRoute.modal || router.currentRoute.route.modalInstance || app[modalType].get();\n    var previousUrl = router.history[router.history.length - 2];\n    var previousRoute = router.findMatchingRoute(previousUrl);\n    if (!previousRoute && previousUrl) {\n      previousRoute = {\n        url: previousUrl,\n        path: previousUrl.split('?')[0],\n        query: parseUrlQuery(previousUrl),\n        route: {\n          path: previousUrl.split('?')[0],\n          url: previousUrl\n        }\n      };\n    }\n    router.modalRemove(modalToClose);\n  }\n  var dynamicNavbar = router.dynamicNavbar;\n  var $viewEl = router.$el;\n  var $newPage = $el;\n  var reload = options.reloadPrevious || options.reloadCurrent || options.reloadAll;\n  var $oldPage;\n  var $navbarsEl;\n  var $newNavbarEl;\n  var $oldNavbarEl;\n  router.allowPageChange = false;\n  if ($newPage.length === 0) {\n    router.allowPageChange = true;\n    return router;\n  }\n  if ($newPage.length) {\n    // Remove theme elements\n    router.removeThemeElements($newPage);\n  }\n  if (dynamicNavbar) {\n    $newNavbarEl = $newPage.children('.navbar');\n    $navbarsEl = router.$navbarsEl;\n    if ($newNavbarEl.length === 0 && $newPage[0] && $newPage[0].f7Page) {\n      // Try from pageData\n      $newNavbarEl = $newPage[0].f7Page.$navbarEl;\n    }\n  } // Save Keep Alive Cache\n\n  if (options.route && options.route.route && options.route.route.keepAlive && !options.route.route.keepAliveData) {\n    options.route.route.keepAliveData = {\n      pageEl: $el[0]\n    };\n  } // Pages In View\n\n  var $pagesInView = $viewEl.children('.page:not(.stacked)').filter(function (pageInView) {\n    return pageInView !== $newPage[0];\n  }); // Navbars In View\n\n  var $navbarsInView;\n  if (dynamicNavbar) {\n    $navbarsInView = $navbarsEl.children('.navbar:not(.stacked)').filter(function (navbarInView) {\n      return navbarInView !== $newNavbarEl[0];\n    });\n  } // Exit when reload previous and only 1 page in view so nothing ro reload\n\n  if (options.reloadPrevious && $pagesInView.length < 2) {\n    router.allowPageChange = true;\n    return router;\n  } // Find Detail' master page\n\n  var isDetail;\n  var reloadDetail;\n  var isDetailRoot;\n  if (masterDetailEnabled && !options.reloadAll) {\n    for (var i = 0; i < $pagesInView.length; i += 1) {\n      if (!masterPageEl && $pagesInView[i].classList.contains('page-master')) {\n        masterPageEl = $pagesInView[i];\n        continue; // eslint-disable-line\n      }\n    }\n\n    isDetail = !isMaster && masterPageEl;\n    if (isDetail) {\n      // Find Other Detail\n      if (masterPageEl) {\n        for (var _i = 0; _i < $pagesInView.length; _i += 1) {\n          if ($pagesInView[_i].classList.contains('page-master-detail')) {\n            otherDetailPageEl = $pagesInView[_i];\n            continue; // eslint-disable-line\n          }\n        }\n      }\n    }\n\n    reloadDetail = isDetail && options.reloadDetail && app.width >= router.params.masterDetailBreakpoint && masterPageEl;\n  }\n  if (isDetail) {\n    isDetailRoot = !otherDetailPageEl || reloadDetail || options.reloadAll || options.reloadCurrent;\n  } // New Page\n\n  var newPagePosition = 'next';\n  if (options.reloadCurrent || options.reloadAll || reloadDetail) {\n    newPagePosition = 'current';\n  } else if (options.reloadPrevious) {\n    newPagePosition = 'previous';\n  }\n  $newPage.removeClass('page-previous page-current page-next').addClass(\"page-\" + newPagePosition + (isMaster ? ' page-master' : '') + (isDetail ? ' page-master-detail' : '') + (isDetailRoot ? ' page-master-detail-root' : '')).removeClass('stacked').trigger('page:unstack').trigger('page:position', {\n    position: newPagePosition\n  });\n  router.emit('pageUnstack', $newPage[0]);\n  router.emit('pagePosition', $newPage[0], newPagePosition);\n  if (isMaster || isDetail) {\n    $newPage.trigger('page:role', {\n      role: isMaster ? 'master' : 'detail',\n      root: !!isDetailRoot\n    });\n    router.emit('pageRole', $newPage[0], {\n      role: isMaster ? 'master' : 'detail',\n      detailRoot: !!isDetailRoot\n    });\n  }\n  if (dynamicNavbar && $newNavbarEl.length) {\n    $newNavbarEl.removeClass('navbar-previous navbar-current navbar-next').addClass(\"navbar-\" + newPagePosition + (isMaster ? ' navbar-master' : '') + (isDetail ? ' navbar-master-detail' : '') + (isDetailRoot ? ' navbar-master-detail-root' : '')).removeClass('stacked');\n    $newNavbarEl.trigger('navbar:position', {\n      position: newPagePosition\n    });\n    router.emit('navbarPosition', $newNavbarEl[0], newPagePosition);\n    if (isMaster || isDetail) {\n      router.emit('navbarRole', $newNavbarEl[0], {\n        role: isMaster ? 'master' : 'detail',\n        detailRoot: !!isDetailRoot\n      });\n    }\n  } // Find Old Page\n\n  if (options.reloadCurrent || reloadDetail) {\n    if (reloadDetail) {\n      $oldPage = $pagesInView.filter(function (pageEl) {\n        return !pageEl.classList.contains('page-master');\n      });\n      if (dynamicNavbar) {\n        $oldNavbarEl = $($oldPage.map(function (pageEl) {\n          return app.navbar.getElByPage(pageEl);\n        }));\n      }\n      if ($oldPage.length > 1 && masterPageEl) {\n        detailsInBetweenRemoved = $oldPage.length - 1;\n        $(masterPageEl).removeClass('page-master-stacked').trigger('page:masterunstack');\n        router.emit('pageMasterUnstack', masterPageEl);\n        if (dynamicNavbar) {\n          $(app.navbar.getElByPage(masterPageEl)).removeClass('navbar-master-stacked');\n          router.emit('navbarMasterUnstack', app.navbar.getElByPage(masterPageEl));\n        }\n      }\n    } else {\n      $oldPage = $pagesInView.eq($pagesInView.length - 1);\n      if (dynamicNavbar) {\n        $oldNavbarEl = $(app.navbar.getElByPage($oldPage));\n      }\n    }\n  } else if (options.reloadPrevious) {\n    $oldPage = $pagesInView.eq($pagesInView.length - 2);\n    if (dynamicNavbar) {\n      // $oldNavbarEl = $navbarsInView.eq($pagesInView.length - 2);\n      $oldNavbarEl = $(app.navbar.getElByPage($oldPage));\n    }\n  } else if (options.reloadAll) {\n    $oldPage = $pagesInView.filter(function (pageEl) {\n      return pageEl !== $newPage[0];\n    });\n    if (dynamicNavbar) {\n      $oldNavbarEl = $navbarsInView.filter(function (navbarEl) {\n        return navbarEl !== $newNavbarEl[0];\n      });\n    }\n  } else {\n    var removedPageEls = [];\n    var removedNavbarEls = [];\n    if ($pagesInView.length > 1) {\n      var _i2 = 0;\n      for (_i2 = 0; _i2 < $pagesInView.length - 1; _i2 += 1) {\n        if (masterPageEl && $pagesInView[_i2] === masterPageEl) {\n          $pagesInView.eq(_i2).addClass('page-master-stacked');\n          $pagesInView.eq(_i2).trigger('page:masterstack');\n          router.emit('pageMasterStack', $pagesInView[_i2]);\n          if (dynamicNavbar) {\n            $(app.navbar.getElByPage(masterPageEl)).addClass('navbar-master-stacked');\n            router.emit('navbarMasterStack', app.navbar.getElByPage(masterPageEl));\n          }\n          continue; // eslint-disable-line\n        }\n\n        var oldNavbarEl = app.navbar.getElByPage($pagesInView.eq(_i2));\n        if (router.params.stackPages) {\n          $pagesInView.eq(_i2).addClass('stacked');\n          $pagesInView.eq(_i2).trigger('page:stack');\n          router.emit('pageStack', $pagesInView[_i2]);\n          if (dynamicNavbar) {\n            $(oldNavbarEl).addClass('stacked');\n          }\n        } else {\n          // Page remove event\n          removedPageEls.push($pagesInView[_i2]);\n          router.pageCallback('beforeRemove', $pagesInView[_i2], $navbarsInView && $navbarsInView[_i2], 'previous', undefined, options);\n          router.removePage($pagesInView[_i2]);\n          if (dynamicNavbar && oldNavbarEl) {\n            removedNavbarEls.push(oldNavbarEl);\n            router.removeNavbar(oldNavbarEl);\n          }\n        }\n      }\n    }\n    $oldPage = $viewEl.children('.page:not(.stacked)').filter(function (pageEl) {\n      return pageEl !== $newPage[0] && removedPageEls.indexOf(pageEl) < 0;\n    });\n    if (dynamicNavbar) {\n      $oldNavbarEl = $navbarsEl.children('.navbar:not(.stacked)').filter(function (navbarEl) {\n        return navbarEl !== $newNavbarEl[0] && removedNavbarEls.indexOf(removedNavbarEls) < 0;\n      });\n    }\n    removedPageEls = [];\n    removedNavbarEls = [];\n  }\n  if (isDetail && !options.reloadAll) {\n    if ($oldPage.length > 1 || reloadDetail) {\n      $oldPage = $oldPage.filter(function (pageEl) {\n        return !pageEl.classList.contains('page-master');\n      });\n    }\n    if ($oldNavbarEl && ($oldNavbarEl.length > 1 || reloadDetail)) {\n      $oldNavbarEl = $oldNavbarEl.filter(function (navbarEl) {\n        return !navbarEl.classList.contains('navbar-master');\n      });\n    }\n  } // Push State\n\n  if (router.params.browserHistory && (options.browserHistory || options.replaceState) && !options.reloadPrevious) {\n    var browserHistoryRoot = router.params.browserHistoryRoot || '';\n    History[options.reloadCurrent || reloadDetail && otherDetailPageEl || options.reloadAll || options.replaceState ? 'replace' : 'push'](view.id, {\n      url: options.route.url\n    }, browserHistoryRoot + router.params.browserHistorySeparator + options.route.url);\n  }\n  if (!options.reloadPrevious) {\n    // Current Page & Navbar\n    router.currentPageEl = $newPage[0];\n    if (dynamicNavbar && $newNavbarEl.length) {\n      router.currentNavbarEl = $newNavbarEl[0];\n    } else {\n      delete router.currentNavbarEl;\n    } // Current Route\n\n    router.currentRoute = options.route;\n  } // Update router history\n\n  var url = options.route.url;\n  if (options.history) {\n    if (((options.reloadCurrent || reloadDetail && otherDetailPageEl) && router.history.length) > 0 || options.replaceState) {\n      if (reloadDetail && detailsInBetweenRemoved > 0) {\n        router.history = router.history.slice(0, router.history.length - detailsInBetweenRemoved);\n      }\n      router.history[router.history.length - (options.reloadPrevious ? 2 : 1)] = url;\n    } else if (options.reloadPrevious) {\n      router.history[router.history.length - 2] = url;\n    } else if (options.reloadAll) {\n      router.history = [url];\n    } else {\n      router.history.push(url);\n    }\n  }\n  router.saveHistory(); // Insert new page and navbar\n\n  var newPageInDom = $newPage.parents(document).length > 0;\n  var f7Component = $newPage[0].f7Component;\n  if (options.reloadPrevious) {\n    if (f7Component && !newPageInDom) {\n      f7Component.mount(function (componentEl) {\n        $(componentEl).insertBefore($oldPage);\n      });\n    } else {\n      $newPage.insertBefore($oldPage);\n    }\n    if (dynamicNavbar && $newNavbarEl.length) {\n      if ($newNavbarEl.find('.title-large').length) {\n        $newNavbarEl.addClass('navbar-large');\n      }\n      if ($oldNavbarEl.length) {\n        $newNavbarEl.insertBefore($oldNavbarEl);\n      } else {\n        if (!router.$navbarsEl.parents(document).length) {\n          router.$el.prepend(router.$navbarsEl);\n        }\n        $navbarsEl.append($newNavbarEl);\n      }\n    }\n  } else {\n    if ($oldPage.next('.page')[0] !== $newPage[0]) {\n      if (f7Component && !newPageInDom) {\n        f7Component.mount(function (componentEl) {\n          $viewEl.append(componentEl);\n        });\n      } else {\n        $viewEl.append($newPage[0]);\n      }\n    }\n    if (dynamicNavbar && $newNavbarEl.length) {\n      if ($newNavbarEl.find('.title-large').length) {\n        $newNavbarEl.addClass('navbar-large');\n      }\n      if (!router.$navbarsEl.parents(document).length) {\n        router.$el.prepend(router.$navbarsEl);\n      }\n      $navbarsEl.append($newNavbarEl[0]);\n    }\n  }\n  if (!newPageInDom) {\n    router.pageCallback('mounted', $newPage, $newNavbarEl, newPagePosition, reload ? newPagePosition : 'current', options, $oldPage);\n  } else if (options.route && options.route.route && options.route.route.keepAlive && !$newPage[0].f7PageMounted) {\n    $newPage[0].f7PageMounted = true;\n    router.pageCallback('mounted', $newPage, $newNavbarEl, newPagePosition, reload ? newPagePosition : 'current', options, $oldPage);\n  } // Remove old page\n\n  if ((options.reloadCurrent || reloadDetail) && $oldPage.length > 0) {\n    if (router.params.stackPages && router.initialPages.indexOf($oldPage[0]) >= 0) {\n      $oldPage.addClass('stacked');\n      $oldPage.trigger('page:stack');\n      router.emit('pageStack', $oldPage[0]);\n      if (dynamicNavbar) {\n        $oldNavbarEl.addClass('stacked');\n      }\n    } else {\n      // Page remove event\n      router.pageCallback('beforeOut', $oldPage, $oldNavbarEl, 'current', undefined, options);\n      router.pageCallback('afterOut', $oldPage, $oldNavbarEl, 'current', undefined, options);\n      router.pageCallback('beforeRemove', $oldPage, $oldNavbarEl, 'current', undefined, options);\n      router.removePage($oldPage);\n      if (dynamicNavbar && $oldNavbarEl && $oldNavbarEl.length) {\n        router.removeNavbar($oldNavbarEl);\n      }\n    }\n  } else if (options.reloadAll) {\n    $oldPage.each(function (pageEl, index) {\n      var $oldPageEl = $(pageEl);\n      var $oldNavbarElEl = $(app.navbar.getElByPage($oldPageEl));\n      if (router.params.stackPages && router.initialPages.indexOf($oldPageEl[0]) >= 0) {\n        $oldPageEl.addClass('stacked');\n        $oldPageEl.trigger('page:stack');\n        router.emit('pageStack', $oldPageEl[0]);\n        if (dynamicNavbar) {\n          $oldNavbarElEl.addClass('stacked');\n        }\n      } else {\n        // Page remove event\n        if ($oldPageEl.hasClass('page-current')) {\n          router.pageCallback('beforeOut', $oldPage, $oldNavbarEl, 'current', undefined, options);\n          router.pageCallback('afterOut', $oldPage, $oldNavbarEl, 'current', undefined, options);\n        }\n        router.pageCallback('beforeRemove', $oldPageEl, $oldNavbarEl && $oldNavbarEl.eq(index), 'previous', undefined, options);\n        router.removePage($oldPageEl);\n        if (dynamicNavbar && $oldNavbarElEl.length) {\n          router.removeNavbar($oldNavbarElEl);\n        }\n      }\n    });\n  } else if (options.reloadPrevious) {\n    if (router.params.stackPages && router.initialPages.indexOf($oldPage[0]) >= 0) {\n      $oldPage.addClass('stacked');\n      $oldPage.trigger('page:stack');\n      router.emit('pageStack', $oldPage[0]);\n      if (dynamicNavbar) {\n        $oldNavbarEl.addClass('stacked');\n      }\n    } else {\n      // Page remove event\n      router.pageCallback('beforeRemove', $oldPage, $oldNavbarEl, 'previous', undefined, options);\n      router.removePage($oldPage);\n      if (dynamicNavbar && $oldNavbarEl && $oldNavbarEl.length) {\n        router.removeNavbar($oldNavbarEl);\n      }\n    }\n  } // Load Tab\n\n  if (options.route.route.tab) {\n    router.tabLoad(options.route.route.tab, extend({}, options, {\n      history: false,\n      browserHistory: false\n    }));\n  } // Check master detail\n\n  if (masterDetailEnabled) {\n    view.checkMasterDetailBreakpoint();\n  } // Page init and before init events\n\n  router.pageCallback('init', $newPage, $newNavbarEl, newPagePosition, reload ? newPagePosition : 'current', options, $oldPage);\n  if (options.reloadCurrent || options.reloadAll || reloadDetail) {\n    router.allowPageChange = true;\n    router.pageCallback('beforeIn', $newPage, $newNavbarEl, newPagePosition, 'current', options);\n    $newPage.removeAttr('aria-hidden');\n    if (dynamicNavbar && $newNavbarEl) {\n      $newNavbarEl.removeAttr('aria-hidden');\n    }\n    router.pageCallback('afterIn', $newPage, $newNavbarEl, newPagePosition, 'current', options);\n    if (options.reloadCurrent && options.clearPreviousHistory) router.clearPreviousHistory();\n    if (reloadDetail) {\n      router.setPagePosition($(masterPageEl), 'previous');\n      if (masterPageEl.f7Page && masterPageEl.f7Page.navbarEl) {\n        router.setNavbarPosition($(masterPageEl.f7Page.navbarEl), 'previous');\n      }\n    }\n    return router;\n  }\n  if (options.reloadPrevious) {\n    router.allowPageChange = true;\n    return router;\n  } // Before animation event\n\n  router.pageCallback('beforeOut', $oldPage, $oldNavbarEl, 'current', 'previous', options);\n  router.pageCallback('beforeIn', $newPage, $newNavbarEl, 'next', 'current', options); // Animation\n\n  function afterAnimation() {\n    router.setPagePosition($newPage, 'current', false);\n    router.setPagePosition($oldPage, 'previous', !$oldPage.hasClass('page-master'));\n    if (dynamicNavbar) {\n      router.setNavbarPosition($newNavbarEl, 'current', false);\n      router.setNavbarPosition($oldNavbarEl, 'previous', !$oldNavbarEl.hasClass('navbar-master'));\n    } // After animation event\n\n    router.allowPageChange = true;\n    router.pageCallback('afterOut', $oldPage, $oldNavbarEl, 'current', 'previous', options);\n    router.pageCallback('afterIn', $newPage, $newNavbarEl, 'next', 'current', options);\n    var keepOldPage = (router.params.preloadPreviousPage || router.params[app.theme + \"SwipeBack\"]) && !isMaster;\n    if (!keepOldPage) {\n      if ($newPage.hasClass('smart-select-page') || $newPage.hasClass('photo-browser-page') || $newPage.hasClass('autocomplete-page') || $newPage.hasClass('color-picker-page')) {\n        keepOldPage = true;\n      }\n    }\n    if (!keepOldPage) {\n      if (router.params.stackPages) {\n        $oldPage.addClass('stacked');\n        $oldPage.trigger('page:stack');\n        router.emit('pageStack', $oldPage[0]);\n        if (dynamicNavbar) {\n          $oldNavbarEl.addClass('stacked');\n        }\n      } else if (!($newPage.attr('data-name') && $newPage.attr('data-name') === 'smart-select-page')) {\n        // Remove event\n        router.pageCallback('beforeRemove', $oldPage, $oldNavbarEl, 'previous', undefined, options);\n        router.removePage($oldPage);\n        if (dynamicNavbar && $oldNavbarEl.length) {\n          router.removeNavbar($oldNavbarEl);\n        }\n      }\n    }\n    if (options.clearPreviousHistory) router.clearPreviousHistory();\n    router.emit('routeChanged', router.currentRoute, router.previousRoute, router);\n    if (router.params.browserHistory) {\n      History.clearRouterQueue();\n    }\n  }\n  function setPositionClasses() {\n    router.setPagePosition($oldPage, 'current', false);\n    router.setPagePosition($newPage, 'next', false);\n    if (dynamicNavbar) {\n      router.setNavbarPosition($oldNavbarEl, 'current', false);\n      router.setNavbarPosition($newNavbarEl, 'next', false);\n    }\n  }\n  if (options.animate && !(isMaster && app.width >= router.params.masterDetailBreakpoint)) {\n    var delay = router.params[router.app.theme + \"PageLoadDelay\"];\n    var transition = router.params.transition;\n    if (options.transition) transition = options.transition;\n    if (!transition && router.currentRoute && router.currentRoute.route) {\n      transition = router.currentRoute.route.transition;\n    }\n    if (!transition && router.currentRoute && router.currentRoute.route.options) {\n      transition = router.currentRoute.route.options.transition;\n    }\n    if (transition) {\n      $newPage[0].f7PageTransition = transition;\n    }\n    if (delay) {\n      setTimeout(function () {\n        setPositionClasses();\n        router.animate($oldPage, $newPage, $oldNavbarEl, $newNavbarEl, 'forward', transition, function () {\n          afterAnimation();\n        });\n      }, delay);\n    } else {\n      setPositionClasses();\n      router.animate($oldPage, $newPage, $oldNavbarEl, $newNavbarEl, 'forward', transition, function () {\n        afterAnimation();\n      });\n    }\n  } else {\n    afterAnimation();\n  }\n  return router;\n}\nfunction load(router, loadParams, loadOptions, ignorePageChange) {\n  if (loadParams === void 0) {\n    loadParams = {};\n  }\n  if (loadOptions === void 0) {\n    loadOptions = {};\n  }\n  if (!router.allowPageChange && !ignorePageChange) return router;\n  var params = loadParams;\n  var options = loadOptions;\n  var url = params.url,\n    content = params.content,\n    el = params.el,\n    pageName = params.pageName,\n    component = params.component,\n    componentUrl = params.componentUrl;\n  if (!options.reloadCurrent && options.route && options.route.route && options.route.route.parentPath && router.currentRoute.route && router.currentRoute.route.parentPath === options.route.route.parentPath) {\n    // Do something nested\n    if (options.route.url === router.url) {\n      router.allowPageChange = true;\n      return false;\n    } // Check for same params\n\n    var sameParams = Object.keys(options.route.params).length === Object.keys(router.currentRoute.params).length;\n    if (sameParams) {\n      // Check for equal params name\n      Object.keys(options.route.params).forEach(function (paramName) {\n        if (!(paramName in router.currentRoute.params) || router.currentRoute.params[paramName] !== options.route.params[paramName]) {\n          sameParams = false;\n        }\n      });\n    }\n    if (sameParams) {\n      if (options.route.route.tab) {\n        return router.tabLoad(options.route.route.tab, options);\n      }\n      return false;\n    }\n    if (!sameParams && options.route.route.tab && router.currentRoute.route.tab && router.currentRoute.parentPath === options.route.parentPath) {\n      return router.tabLoad(options.route.route.tab, options);\n    }\n  }\n  if (options.route && options.route.url && router.url === options.route.url && !(options.reloadCurrent || options.reloadPrevious) && !router.params.allowDuplicateUrls) {\n    router.allowPageChange = true;\n    return false;\n  }\n  if (!options.route && url) {\n    options.route = router.parseRouteUrl(url);\n    extend(options.route, {\n      route: {\n        url: url,\n        path: url\n      }\n    });\n  } // Component Callbacks\n\n  function resolve(pageEl, newOptions) {\n    return forward(router, pageEl, extend(options, newOptions));\n  }\n  function reject() {\n    router.allowPageChange = true;\n    return router;\n  }\n  if (url || componentUrl || component) {\n    router.allowPageChange = false;\n  } // Proceed\n\n  if (content) {\n    forward(router, router.getPageEl(content), options);\n  } else if (el) {\n    // Load page from specified HTMLElement or by page name in pages container\n    forward(router, router.getPageEl(el), options);\n  } else if (pageName) {\n    // Load page by page name in pages container\n    forward(router, router.$el.children(\".page[data-name=\\\"\" + pageName + \"\\\"]\").eq(0), options);\n  } else if (component || componentUrl) {\n    // Load from component (F7/Vue/React/...)\n    try {\n      router.pageComponentLoader({\n        routerEl: router.el,\n        component: component,\n        componentUrl: componentUrl,\n        options: options,\n        resolve: resolve,\n        reject: reject\n      });\n    } catch (err) {\n      router.allowPageChange = true;\n      throw err;\n    }\n  } else if (url) {\n    // Load using XHR\n    if (router.xhrAbortController) {\n      router.xhrAbortController.abort();\n      router.xhrAbortController = false;\n    }\n    router.xhrRequest(url, options).then(function (pageContent) {\n      forward(router, router.getPageEl(pageContent), options);\n    }).catch(function () {\n      router.allowPageChange = true;\n    });\n  }\n  return router;\n}\nfunction openIn(router, url, options) {\n  var navigateOptions = {\n    url: url,\n    route: {\n      path: url,\n      options: _extends({}, options, {\n        openIn: undefined\n      })\n    }\n  };\n  var params = _extends({}, options);\n  if (options.openIn === 'popup') {\n    params.content = \"<div class=\\\"popup popup-router-open-in\\\" data-url=\\\"\" + url + \"\\\"><div class=\\\"view view-init\\\" data-links-view=\\\"\" + router.view.selector + \"\\\" data-url=\\\"\" + url + \"\\\" data-ignore-open-in=\\\"true\\\"></div></div>\";\n    navigateOptions.route.popup = params;\n  }\n  if (options.openIn === 'loginScreen') {\n    params.content = \"<div class=\\\"login-screen login-screen-router-open-in\\\" data-url=\\\"\" + url + \"\\\"><div class=\\\"view view-init\\\" data-links-view=\\\"\" + router.view.selector + \"\\\" data-url=\\\"\" + url + \"\\\" data-ignore-open-in=\\\"true\\\"></div></div>\";\n    navigateOptions.route.loginScreen = params;\n  }\n  if (options.openIn === 'sheet') {\n    params.content = \"<div class=\\\"sheet-modal sheet-modal-router-open-in\\\" data-url=\\\"\" + url + \"\\\"><div class=\\\"sheet-modal-inner\\\"><div class=\\\"view view-init\\\" data-links-view=\\\"\" + router.view.selector + \"\\\" data-url=\\\"\" + url + \"\\\" data-ignore-open-in=\\\"true\\\"></div></div></div>\";\n    navigateOptions.route.sheet = params;\n  }\n  if (options.openIn === 'popover') {\n    params.targetEl = options.clickedEl || options.targetEl;\n    params.content = \"<div class=\\\"popover popover-router-open-in\\\" data-url=\\\"\" + url + \"\\\"><div class=\\\"popover-inner\\\"><div class=\\\"view view-init\\\" data-links-view=\\\"\" + router.view.selector + \"\\\" data-url=\\\"\" + url + \"\\\" data-ignore-open-in=\\\"true\\\"></div></div></div>\";\n    navigateOptions.route.popover = params;\n  }\n  if (options.openIn.indexOf('panel') >= 0) {\n    var parts = options.openIn.split(':');\n    var side = parts[1] || 'left';\n    var effect = parts[2] || 'cover';\n    params.targetEl = options.clickedEl || options.targetEl;\n    params.content = \"<div class=\\\"panel panel-router-open-in panel-\" + side + \" panel-\" + effect + \"\\\" data-url=\\\"\" + url + \"\\\"><div class=\\\"view view-init\\\" data-links-view=\\\"\" + router.view.selector + \"\\\" data-url=\\\"\" + url + \"\\\" data-ignore-open-in=\\\"true\\\"></div></div>\";\n    navigateOptions.route.panel = params;\n  }\n  return router.navigate(navigateOptions);\n}\nfunction navigate(navigateParams, navigateOptions) {\n  if (navigateOptions === void 0) {\n    navigateOptions = {};\n  }\n  var router = this;\n  if (router.swipeBackActive) return router;\n  var url;\n  var createRoute;\n  var name;\n  var path;\n  var query;\n  var params;\n  var route;\n  if (typeof navigateParams === 'string') {\n    url = navigateParams;\n  } else {\n    url = navigateParams.url;\n    createRoute = navigateParams.route;\n    name = navigateParams.name;\n    path = navigateParams.path;\n    query = navigateParams.query;\n    params = navigateParams.params;\n  }\n  if (name || path) {\n    url = router.generateUrl({\n      path: path,\n      name: name,\n      params: params,\n      query: query\n    });\n    if (url) {\n      return router.navigate(url, navigateOptions);\n    }\n    return router;\n  }\n  var app = router.app;\n  appRouterCheck(router, 'navigate');\n  if (url === '#' || url === '') {\n    return router;\n  }\n  var navigateUrl = url.replace('./', '');\n  if (navigateUrl[0] !== '/' && navigateUrl.indexOf('#') !== 0) {\n    var currentPath = router.currentRoute.parentPath || router.currentRoute.path;\n    navigateUrl = ((currentPath ? currentPath + \"/\" : '/') + navigateUrl).replace('///', '/').replace('//', '/');\n  }\n  if (createRoute) {\n    route = extend(router.parseRouteUrl(navigateUrl), {\n      route: extend({}, createRoute)\n    });\n  } else {\n    route = router.findMatchingRoute(navigateUrl);\n  }\n  if (!route) {\n    return router;\n  }\n  if (route.route && route.route.viewName) {\n    var anotherViewName = route.route.viewName;\n    var anotherView = app.views[anotherViewName];\n    if (!anotherView) {\n      throw new Error(\"Framework7: There is no View with \\\"\" + anotherViewName + \"\\\" name that was specified in this route\");\n    }\n    if (anotherView !== router.view) {\n      return anotherView.router.navigate(navigateParams, navigateOptions);\n    }\n  }\n  if (route.route.redirect) {\n    return redirect.call(router, 'forward', route, navigateOptions);\n  }\n  var options = {};\n  if (route.route.options) {\n    extend(options, route.route.options, navigateOptions);\n  } else {\n    extend(options, navigateOptions);\n  }\n  if (options.openIn && (!router.params.ignoreOpenIn || router.params.ignoreOpenIn && router.history.length > 0)) {\n    return openIn(router, navigateUrl, options);\n  }\n  options.route = route;\n  function resolve() {\n    var routerLoaded = false;\n    'popup popover sheet loginScreen actions customModal panel'.split(' ').forEach(function (modalLoadProp) {\n      if (route.route[modalLoadProp] && !routerLoaded) {\n        routerLoaded = true;\n        router.modalLoad(modalLoadProp, route, options, 'forward');\n      }\n    });\n    if (route.route.keepAlive && route.route.keepAliveData) {\n      load(router, {\n        el: route.route.keepAliveData.pageEl\n      }, options, false);\n      routerLoaded = true;\n    }\n    'url content component pageName el componentUrl'.split(' ').forEach(function (pageLoadProp) {\n      if (route.route[pageLoadProp] && !routerLoaded) {\n        var _load;\n        routerLoaded = true;\n        load(router, (_load = {}, _load[pageLoadProp] = route.route[pageLoadProp], _load), options, false);\n      }\n    });\n    if (routerLoaded) return; // Async\n\n    function asyncResolve(resolveParams, resolveOptions) {\n      router.allowPageChange = false;\n      var resolvedAsModal = false;\n      'popup popover sheet loginScreen actions customModal panel'.split(' ').forEach(function (modalLoadProp) {\n        if (resolveParams[modalLoadProp]) {\n          resolvedAsModal = true;\n          var modalRoute = extend({}, route, {\n            route: resolveParams\n          });\n          router.allowPageChange = true;\n          router.modalLoad(modalLoadProp, modalRoute, extend(options, resolveOptions), 'forward');\n        }\n      });\n      if (resolvedAsModal) return;\n      load(router, resolveParams, extend(options, resolveOptions), true);\n    }\n    function asyncReject() {\n      router.allowPageChange = true;\n    }\n    if (route.route.async) {\n      router.allowPageChange = false;\n      route.route.async.call(router, {\n        router: router,\n        to: options.route,\n        from: router.currentRoute,\n        resolve: asyncResolve,\n        reject: asyncReject,\n        direction: 'forward',\n        app: app\n      });\n    }\n    if (route.route.asyncComponent) {\n      asyncComponent(router, route.route.asyncComponent, asyncResolve, asyncReject);\n    }\n  }\n  function reject() {\n    router.allowPageChange = true;\n  }\n  if (router.params.masterDetailBreakpoint > 0 && route.route.masterRoute) {\n    // load detail route\n    var preloadMaster = true;\n    var masterLoaded = false;\n    if (router.currentRoute && router.currentRoute.route) {\n      if ((router.currentRoute.route.master === true || typeof router.currentRoute.route.master === 'function' && router.currentRoute.route.master(app, router)) && (router.currentRoute.route === route.route.masterRoute || router.currentRoute.route.path === route.route.masterRoute.path)) {\n        preloadMaster = false;\n      }\n      if (router.currentRoute.route.masterRoute && (router.currentRoute.route.masterRoute === route.route.masterRoute || router.currentRoute.route.masterRoute.path === route.route.masterRoute.path)) {\n        preloadMaster = false;\n        masterLoaded = true;\n      }\n    }\n    if (preloadMaster || masterLoaded && navigateOptions.reloadAll) {\n      router.navigate({\n        path: route.route.masterRoute.path,\n        params: route.params || {}\n      }, {\n        animate: false,\n        reloadAll: navigateOptions.reloadAll,\n        reloadCurrent: navigateOptions.reloadCurrent,\n        reloadPrevious: navigateOptions.reloadPrevious,\n        browserHistory: !navigateOptions.initial,\n        history: !navigateOptions.initial,\n        once: {\n          pageAfterIn: function pageAfterIn() {\n            router.navigate(navigateParams, extend({}, navigateOptions, {\n              animate: false,\n              reloadAll: false,\n              reloadCurrent: false,\n              reloadPrevious: false,\n              history: !navigateOptions.initial,\n              browserHistory: !navigateOptions.initial\n            }));\n          }\n        }\n      });\n      return router;\n    }\n  }\n  processRouteQueue.call(router, route, router.currentRoute, function () {\n    if (route.route.modules) {\n      app.loadModules(Array.isArray(route.route.modules) ? route.route.modules : [route.route.modules]).then(function () {\n        resolve();\n      }).catch(function () {\n        reject();\n      });\n    } else {\n      resolve();\n    }\n  }, function () {\n    reject();\n  }, 'forward'); // Return Router\n\n  return router;\n}\nexport { refreshPage, navigate };","map":null,"metadata":{},"sourceType":"module"}