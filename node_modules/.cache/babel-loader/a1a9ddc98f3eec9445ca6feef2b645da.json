{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';\nimport { classNames, getExtraAttrs, getSlots, noUndefinedProps, emit } from '../shared/utils';\nimport { colorClasses } from '../shared/mixins';\nimport { f7ready, f7 } from '../shared/f7';\nvar Searchbar = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _f7Searchbar = useRef(null);\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    noShadow = props.noShadow,\n    noHairline = props.noHairline,\n    _props$form = props.form,\n    form = _props$form === void 0 ? true : _props$form,\n    _props$placeholder = props.placeholder,\n    placeholder = _props$placeholder === void 0 ? 'Search' : _props$placeholder,\n    spellcheck = props.spellcheck,\n    _props$disableButton = props.disableButton,\n    disableButton = _props$disableButton === void 0 ? true : _props$disableButton,\n    _props$disableButtonT = props.disableButtonText,\n    disableButtonText = _props$disableButtonT === void 0 ? 'Cancel' : _props$disableButtonT,\n    _props$clearButton = props.clearButton,\n    clearButton = _props$clearButton === void 0 ? true : _props$clearButton,\n    value = props.value,\n    _props$inputEvents = props.inputEvents,\n    inputEvents = _props$inputEvents === void 0 ? 'change input compositionend' : _props$inputEvents,\n    expandable = props.expandable,\n    inline = props.inline,\n    searchContainer = props.searchContainer,\n    _props$searchIn = props.searchIn,\n    searchIn = _props$searchIn === void 0 ? '.item-title' : _props$searchIn,\n    _props$searchItem = props.searchItem,\n    searchItem = _props$searchItem === void 0 ? 'li' : _props$searchItem,\n    _props$searchGroup = props.searchGroup,\n    searchGroup = _props$searchGroup === void 0 ? '.list-group' : _props$searchGroup,\n    _props$searchGroupTit = props.searchGroupTitle,\n    searchGroupTitle = _props$searchGroupTit === void 0 ? '.item-divider, .list-group-title' : _props$searchGroupTit,\n    _props$foundEl = props.foundEl,\n    foundEl = _props$foundEl === void 0 ? '.searchbar-found' : _props$foundEl,\n    _props$notFoundEl = props.notFoundEl,\n    notFoundEl = _props$notFoundEl === void 0 ? '.searchbar-not-found' : _props$notFoundEl,\n    backdrop = props.backdrop,\n    backdropEl = props.backdropEl,\n    _props$hideOnEnableEl = props.hideOnEnableEl,\n    hideOnEnableEl = _props$hideOnEnableEl === void 0 ? '.searchbar-hide-on-enable' : _props$hideOnEnableEl,\n    _props$hideOnSearchEl = props.hideOnSearchEl,\n    hideOnSearchEl = _props$hideOnSearchEl === void 0 ? '.searchbar-hide-on-search' : _props$hideOnSearchEl,\n    _props$ignore = props.ignore,\n    ignore = _props$ignore === void 0 ? '.searchbar-ignore' : _props$ignore,\n    _props$customSearch = props.customSearch,\n    customSearch = _props$customSearch === void 0 ? false : _props$customSearch,\n    _props$removeDiacriti = props.removeDiacritics,\n    removeDiacritics = _props$removeDiacriti === void 0 ? false : _props$removeDiacriti,\n    _props$hideDividers = props.hideDividers,\n    hideDividers = _props$hideDividers === void 0 ? true : _props$hideDividers,\n    _props$hideGroups = props.hideGroups,\n    hideGroups = _props$hideGroups === void 0 ? true : _props$hideGroups,\n    _props$init = props.init,\n    init = _props$init === void 0 ? true : _props$init;\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  var search = function search(query) {\n    if (!_f7Searchbar.current) return undefined;\n    return _f7Searchbar.current.search(query);\n  };\n  var enable = function enable() {\n    if (!_f7Searchbar.current) return undefined;\n    return _f7Searchbar.current.enable();\n  };\n  var disable = function disable() {\n    if (!_f7Searchbar.current) return undefined;\n    return _f7Searchbar.current.disable();\n  };\n  var toggle = function toggle() {\n    if (!_f7Searchbar.current) return undefined;\n    return _f7Searchbar.current.toggle();\n  };\n  var clear = function clear() {\n    if (!_f7Searchbar.current) return undefined;\n    return _f7Searchbar.current.clear();\n  };\n  var onChange = function onChange(event) {\n    emit(props, 'change', event);\n  };\n  var onInput = function onInput(event) {\n    emit(props, 'input', event);\n  };\n  var onFocus = function onFocus(event) {\n    emit(props, 'focus', event);\n  };\n  var onBlur = function onBlur(event) {\n    emit(props, 'blur', event);\n  };\n  var onSubmit = function onSubmit(event) {\n    emit(props, 'submit', event);\n  };\n  var onClearButtonClick = function onClearButtonClick(event) {\n    emit(props, 'click:clear clickClear', event);\n  };\n  var onDisableButtonClick = function onDisableButtonClick(event) {\n    emit(props, 'click:disable clickDisable', event);\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current,\n      f7Searchbar: function f7Searchbar() {\n        return _f7Searchbar.current;\n      },\n      search: search,\n      enable: enable,\n      disable: disable,\n      toggle: toggle,\n      clear: clear\n    };\n  });\n  var onMount = function onMount() {\n    if (!init) return;\n    f7ready(function () {\n      var params = noUndefinedProps({\n        el: elRef.current,\n        inputEvents: inputEvents,\n        searchContainer: searchContainer,\n        searchIn: searchIn,\n        searchItem: searchItem,\n        searchGroup: searchGroup,\n        searchGroupTitle: searchGroupTitle,\n        hideOnEnableEl: hideOnEnableEl,\n        hideOnSearchEl: hideOnSearchEl,\n        foundEl: foundEl,\n        notFoundEl: notFoundEl,\n        backdrop: backdrop,\n        backdropEl: backdropEl,\n        disableButton: disableButton,\n        ignore: ignore,\n        customSearch: customSearch,\n        removeDiacritics: removeDiacritics,\n        hideDividers: hideDividers,\n        hideGroups: hideGroups,\n        expandable: expandable,\n        inline: inline,\n        on: {\n          search: function search(searchbar, query, previousQuery) {\n            emit(props, 'searchbarSearch', searchbar, query, previousQuery);\n          },\n          clear: function clear(searchbar, previousQuery) {\n            emit(props, 'searchbarClear', searchbar, previousQuery);\n          },\n          enable: function enable(searchbar) {\n            emit(props, 'searchbarEnable', searchbar);\n          },\n          disable: function disable(searchbar) {\n            emit(props, 'searchbarDisable', searchbar);\n          }\n        }\n      });\n      Object.keys(params).forEach(function (key) {\n        if (params[key] === '') {\n          delete params[key];\n        }\n      });\n      _f7Searchbar.current = f7.searchbar.create(params);\n    });\n  };\n  var onDestroy = function onDestroy() {\n    if (_f7Searchbar.current && _f7Searchbar.current.destroy) _f7Searchbar.current.destroy();\n    _f7Searchbar.current = null;\n  };\n  useIsomorphicLayoutEffect(function () {\n    onMount();\n    return onDestroy;\n  }, []);\n  var clearEl;\n  var disableEl;\n  if (clearButton) {\n    clearEl = /*#__PURE__*/React.createElement(\"span\", {\n      className: \"input-clear-button\",\n      onClick: onClearButtonClick\n    });\n  }\n  if (disableButton) {\n    disableEl = /*#__PURE__*/React.createElement(\"span\", {\n      className: \"searchbar-disable-button\",\n      onClick: onDisableButtonClick\n    }, disableButtonText);\n  }\n  var SearchbarTag = form ? 'form' : 'div';\n  var classes = classNames(className, 'searchbar', {\n    'searchbar-inline': inline,\n    'no-shadow': noShadow,\n    'no-hairline': noHairline,\n    'searchbar-expandable': expandable\n  }, colorClasses(props));\n  var slots = getSlots(props);\n  return /*#__PURE__*/React.createElement(SearchbarTag, _extends({\n    ref: elRef,\n    id: id,\n    style: style,\n    className: classes\n  }, extraAttrs, {\n    onSubmit: onSubmit\n  }), slots['before-inner'], /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchbar-inner\"\n  }, slots['inner-start'], /*#__PURE__*/React.createElement(\"div\", {\n    className: \"searchbar-input-wrap\"\n  }, slots['input-wrap-start'], /*#__PURE__*/React.createElement(\"input\", {\n    value: value,\n    placeholder: placeholder,\n    spellCheck: spellcheck,\n    type: \"search\",\n    onInput: onInput,\n    onChange: onChange,\n    onFocus: onFocus,\n    onBlur: onBlur\n  }), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"searchbar-icon\"\n  }), clearEl, slots['input-wrap-end']), disableEl, slots['inner-end'], slots.default), slots['after-inner']);\n});\nSearchbar.displayName = 'f7-searchbar';\nexport default Searchbar;","map":null,"metadata":{},"sourceType":"module"}