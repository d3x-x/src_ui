{"ast":null,"code":"import { getWindow, getDocument } from 'ssr-window';\nimport { id } from '../../shared/utils';\nimport $ from '../../shared/dom7';\nvar fetchedModules = [];\nfunction loadModule(moduleToLoad) {\n  var Framework7 = this;\n  var window = getWindow();\n  var document = getDocument();\n  return new Promise(function (resolve, reject) {\n    var app = Framework7.instance;\n    var modulePath;\n    var moduleObj;\n    var moduleFunc;\n    if (!moduleToLoad) {\n      reject(new Error('Framework7: Lazy module must be specified'));\n      return;\n    }\n    function install(module) {\n      Framework7.use(module);\n      if (app) {\n        app.useModuleParams(module, app.params);\n        app.useModule(module);\n      }\n    }\n    if (typeof moduleToLoad === 'string') {\n      var matchNamePattern = moduleToLoad.match(/([a-z0-9-]*)/i);\n      if (moduleToLoad.indexOf('.') < 0 && matchNamePattern && matchNamePattern[0].length === moduleToLoad.length) {\n        if (!app || app && !app.params.lazyModulesPath) {\n          reject(new Error('Framework7: \"lazyModulesPath\" app parameter must be specified to fetch module by name'));\n          return;\n        }\n        modulePath = app.params.lazyModulesPath + \"/\" + moduleToLoad + \"/\" + moduleToLoad + \".js\";\n      } else {\n        modulePath = moduleToLoad;\n      }\n    } else if (typeof moduleToLoad === 'function') {\n      moduleFunc = moduleToLoad;\n    } else {\n      // considering F7-Plugin object\n      moduleObj = moduleToLoad;\n    }\n    if (moduleFunc) {\n      var module = moduleFunc(Framework7, false);\n      if (!module) {\n        reject(new Error(\"Framework7: Can't find Framework7 component in specified component function\"));\n        return;\n      } // Check if it was added\n\n      if (Framework7.prototype.modules && Framework7.prototype.modules[module.name]) {\n        resolve();\n        return;\n      } // Install It\n\n      install(module);\n      resolve();\n    }\n    if (moduleObj) {\n      var _module = moduleObj;\n      if (!_module) {\n        reject(new Error(\"Framework7: Can't find Framework7 component in specified component\"));\n        return;\n      } // Check if it was added\n\n      if (Framework7.prototype.modules && Framework7.prototype.modules[_module.name]) {\n        resolve();\n        return;\n      } // Install It\n\n      install(_module);\n      resolve();\n    }\n    if (modulePath) {\n      if (fetchedModules.indexOf(modulePath) >= 0) {\n        resolve();\n        return;\n      }\n      fetchedModules.push(modulePath);\n      var scriptLoad = new Promise(function (resolveScript, rejectScript) {\n        Framework7.request.get(modulePath, function (scriptContent) {\n          var callbackId = id();\n          var callbackLoadName = \"f7_component_loader_callback_\" + callbackId;\n          var scriptEl = document.createElement('script');\n          scriptEl.innerHTML = \"window.\" + callbackLoadName + \" = function (Framework7, Framework7AutoInstallComponent) {return \" + scriptContent.trim() + \"}\";\n          $('head').append(scriptEl);\n          var componentLoader = window[callbackLoadName];\n          delete window[callbackLoadName];\n          $(scriptEl).remove();\n          var module = componentLoader(Framework7, false);\n          if (!module) {\n            rejectScript(new Error(\"Framework7: Can't find Framework7 component in \" + modulePath + \" file\"));\n            return;\n          } // Check if it was added\n\n          if (Framework7.prototype.modules && Framework7.prototype.modules[module.name]) {\n            resolveScript();\n            return;\n          } // Install It\n\n          install(module);\n          resolveScript();\n        }, function (xhr, status) {\n          rejectScript(xhr, status);\n        });\n      });\n      var styleLoad = new Promise(function (resolveStyle) {\n        Framework7.request.get(modulePath.replace('.js', app.rtl ? '.rtl.css' : '.css'), function (styleContent) {\n          var styleEl = document.createElement('style');\n          styleEl.innerHTML = styleContent;\n          $('head').append(styleEl);\n          resolveStyle();\n        }, function () {\n          resolveStyle();\n        });\n      });\n      Promise.all([scriptLoad, styleLoad]).then(function () {\n        resolve();\n      }).catch(function (err) {\n        reject(err);\n      });\n    }\n  });\n}\nexport default loadModule;","map":null,"metadata":{},"sourceType":"module"}