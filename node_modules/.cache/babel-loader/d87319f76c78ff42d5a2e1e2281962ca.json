{"ast":null,"code":"import React,{Component}from'react';import{capitalize}from'lodash';import rpc from'utils/rpc';import{showNotification}from'utils/notifications';export default function withStorage(WrappedComponent){return class extends Component{constructor(){super(...arguments);this.state={name:'self',items:[],equipment:{},cells:0,weight:{current:0,max:0}};}componentDidMount(){const{location}=this.props;if(location===null||location===void 0?void 0:location.state){const{storage,...data}=location.state;this.setState(()=>data);}else{this.setState(()=>this.props.data);}rpc.register('Inventory-SetCapacity',this.onChangeCapacity.bind(this));}componentWillUnmount(){rpc.unregister('Inventory-SetCapacity');}setItems(items){this.setState(()=>({items}));}onChangeCapacity(cells,maxWeight){this.setState(state=>({cells,weight:{...state.weight,max:maxWeight}}));}getItemsForCells(){const data=[];this.state.items.forEach(item=>{if(item.cell>=0)data[item.cell]=item;});return data;}setWeight(value){this.setState(state=>({weight:{...state.weight,current:value}}));}setEquipment(data){this.setState(()=>({equipment:data}));}async move(id,cell){try{const items=await rpc.callServer(\"Inventory-\".concat(capitalize(this.state.name),\"Move\"),[id,cell]);this.setState(()=>({items}));}catch(err){if(err.msg)showNotification('error',err.msg);}}async separate(target,amount){try{const{cell}=target;const data=await rpc.callServer(\"Inventory-\".concat(capitalize(this.state.name),\"Separate\"),[cell,amount]);this.setState(state=>({items:[...state.items.map(item=>item.cell===cell?{...item,amount:item.amount-amount}:item),data]}));}catch(err){if(err.msg)showNotification('error',err.msg);}}transfer(id,weight,data){this.setWeight(weight);if(data){const{items}=this.state;const isExists=!!items.find(item=>item.cell===data.cell);this.setItems(isExists?items.map(item=>item.cell===data.cell?data:item):[...items,data]);}else this.setItems(this.state.items.filter(item=>item.cell!==id));}render(){const{name,items,weight,cells,equipment}=this.state;return/*#__PURE__*/React.createElement(WrappedComponent,Object.assign({name:name,items:items,equipment:equipment,cells:cells,weight:weight,getItemsForCells:this.getItemsForCells.bind(this),setItems:this.setItems.bind(this),setEquipment:this.setEquipment.bind(this),setWeight:this.setWeight.bind(this),transfer:this.transfer.bind(this),move:this.move.bind(this),separate:this.separate.bind(this)},this.props));}};}","map":null,"metadata":{},"sourceType":"module"}