{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';\nimport { classNames, getExtraAttrs, emit } from '../shared/utils';\nimport { colorClasses } from '../shared/mixins';\nimport { f7ready, f7 } from '../shared/f7';\nimport { watchProp } from '../shared/watch-prop';\nimport { useTooltip } from '../shared/use-tooltip';\nvar Toggle = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _f7Toggle = useRef(null);\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    _props$init = props.init,\n    init = _props$init === void 0 ? true : _props$init,\n    checked = props.checked,\n    defaultChecked = props.defaultChecked,\n    disabled = props.disabled,\n    readonly = props.readonly,\n    name = props.name,\n    value = props.value;\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  var inputElRef = useRef(null);\n  var onChange = function onChange(event) {\n    emit(props, 'change', event);\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current,\n      f7Toggle: function f7Toggle() {\n        return _f7Toggle.current;\n      }\n    };\n  });\n  useTooltip(elRef, props);\n  watchProp(checked, function (newValue) {\n    if (!_f7Toggle.current) return;\n    _f7Toggle.current.checked = newValue;\n  });\n  var onToggleChange = function onToggleChange(toggleInstance) {\n    emit(props, 'toggleChange', toggleInstance.checked);\n  };\n  var toggleEvents = function toggleEvents(method) {\n    if (!_f7Toggle.current) return;\n    _f7Toggle.current[method]('toggleChange', onToggleChange);\n  };\n  var onMount = function onMount() {\n    f7ready(function () {\n      if (!init || !elRef.current) return;\n      _f7Toggle.current = f7.toggle.create({\n        el: elRef.current\n      });\n      toggleEvents('on');\n    });\n  };\n  var onDestroy = function onDestroy() {\n    if (_f7Toggle.current && _f7Toggle.current.destroy && _f7Toggle.current.$el) {\n      _f7Toggle.current.destroy();\n    }\n    _f7Toggle.current = null;\n  };\n  useIsomorphicLayoutEffect(function () {\n    toggleEvents('on');\n    if (inputElRef.current) {\n      inputElRef.current.addEventListener('change', onChange);\n    }\n    return function () {\n      toggleEvents('off');\n      if (inputElRef.current) {\n        inputElRef.current.removeEventListener('change', onChange);\n      }\n    };\n  });\n  useIsomorphicLayoutEffect(function () {\n    onMount();\n    return onDestroy;\n  }, []);\n  var labelClasses = classNames('toggle', className, {\n    disabled: disabled\n  }, colorClasses(props));\n  var inputEl = /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputElRef,\n    type: \"checkbox\",\n    name: name,\n    disabled: disabled,\n    readOnly: readonly,\n    checked: checked,\n    defaultChecked: defaultChecked,\n    value: value,\n    onChange: function onChange() {}\n  });\n  return /*#__PURE__*/React.createElement(\"label\", _extends({\n    id: id,\n    style: style,\n    className: labelClasses,\n    ref: elRef\n  }, extraAttrs), inputEl, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"toggle-icon\"\n  }));\n});\nToggle.displayName = 'f7-toggle';\nexport default Toggle;","map":null,"metadata":{},"sourceType":"module"}