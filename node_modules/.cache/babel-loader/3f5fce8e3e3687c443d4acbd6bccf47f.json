{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';\nimport { classNames, getExtraAttrs, noUndefinedProps } from '../shared/utils';\nimport { colorClasses } from '../shared/mixins';\nimport { f7ready, f7 } from '../shared/f7';\nimport { watchProp } from '../shared/watch-prop';\nvar Messages = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _f7Messages = useRef(null);\n  var mounted = useRef(false);\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    children = props.children,\n    _props$autoLayout = props.autoLayout,\n    autoLayout = _props$autoLayout === void 0 ? false : _props$autoLayout,\n    _props$messages = props.messages,\n    messages = _props$messages === void 0 ? [] : _props$messages,\n    _props$newMessagesFir = props.newMessagesFirst,\n    newMessagesFirst = _props$newMessagesFir === void 0 ? false : _props$newMessagesFir,\n    _props$scrollMessages = props.scrollMessages,\n    scrollMessages = _props$scrollMessages === void 0 ? true : _props$scrollMessages,\n    _props$scrollMessages2 = props.scrollMessagesOnEdge,\n    scrollMessagesOnEdge = _props$scrollMessages2 === void 0 ? true : _props$scrollMessages2,\n    firstMessageRule = props.firstMessageRule,\n    lastMessageRule = props.lastMessageRule,\n    tailMessageRule = props.tailMessageRule,\n    sameNameMessageRule = props.sameNameMessageRule,\n    sameHeaderMessageRule = props.sameHeaderMessageRule,\n    sameFooterMessageRule = props.sameFooterMessageRule,\n    sameAvatarMessageRule = props.sameAvatarMessageRule,\n    customClassMessageRule = props.customClassMessageRule,\n    renderMessage = props.renderMessage,\n    _props$typing = props.typing,\n    typing = _props$typing === void 0 ? false : _props$typing,\n    _props$init = props.init,\n    init = _props$init === void 0 ? true : _props$init;\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  var childrenBeforeUpdated = useRef(null);\n  var reactChildrenBefore = useRef(children ? React.Children.count(children) : 0);\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current,\n      f7Messages: function f7Messages() {\n        return _f7Messages.current;\n      }\n    };\n  });\n  var onMount = function onMount() {\n    if (!init) return;\n    f7ready(function () {\n      _f7Messages.current = f7.messages.create(noUndefinedProps({\n        el: elRef.current,\n        autoLayout: autoLayout,\n        messages: messages,\n        newMessagesFirst: newMessagesFirst,\n        scrollMessages: scrollMessages,\n        scrollMessagesOnEdge: scrollMessagesOnEdge,\n        firstMessageRule: firstMessageRule,\n        lastMessageRule: lastMessageRule,\n        tailMessageRule: tailMessageRule,\n        sameNameMessageRule: sameNameMessageRule,\n        sameHeaderMessageRule: sameHeaderMessageRule,\n        sameFooterMessageRule: sameFooterMessageRule,\n        sameAvatarMessageRule: sameAvatarMessageRule,\n        customClassMessageRule: customClassMessageRule,\n        renderMessage: renderMessage\n      }));\n      if (typing) {\n        _f7Messages.current.showTyping();\n      }\n    });\n  };\n  var onDestroy = function onDestroy() {\n    if (_f7Messages.current && _f7Messages.current.destroy) _f7Messages.current.destroy();\n    _f7Messages.current = null;\n  };\n  useIsomorphicLayoutEffect(function () {\n    onMount();\n    return onDestroy;\n  }, []);\n  var currentChildrenLength = children ? React.Children.count(children) : 0;\n  if (_f7Messages.current && scrollMessages) {\n    var beforeChildrenLength = reactChildrenBefore.current || 0;\n    if (currentChildrenLength !== beforeChildrenLength) {\n      _f7Messages.current.setScrollData();\n    }\n  }\n  reactChildrenBefore.current = currentChildrenLength;\n  useIsomorphicLayoutEffect(function () {\n    var wasMounted = mounted.current;\n    mounted.current = true;\n    if (!init || !elRef.current) return;\n    var childElements = elRef.current.children;\n    if (!childElements) return;\n    var childrenAfterUpdated = childElements.length;\n    if (!wasMounted) {\n      for (var i = 0; i < childElements.length; i += 1) {\n        childElements[i].classList.add('message-appeared');\n      }\n      return;\n    }\n    for (var _i = 0; _i < childElements.length; _i += 1) {\n      if (!childElements[_i].classList.contains('message-appeared')) {\n        childElements[_i].classList.add('message-appear-from-bottom');\n      }\n    }\n    if (_f7Messages.current) {\n      if (_f7Messages.current.layout && autoLayout) {\n        _f7Messages.current.layout();\n      }\n      if (childrenBeforeUpdated.current !== childrenAfterUpdated && _f7Messages.current.scroll && _f7Messages.current.scrollData && scrollMessages) {\n        _f7Messages.current.scrollWithEdgeCheck(true);\n      }\n    }\n    childrenBeforeUpdated.current = childrenAfterUpdated;\n  });\n  watchProp(typing, function (newValue) {\n    if (!_f7Messages.current) return;\n    if (newValue) _f7Messages.current.showTyping();else _f7Messages.current.hideTyping();\n  });\n  var classes = classNames(className, 'messages', colorClasses(props));\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    id: id,\n    style: style,\n    className: classes,\n    ref: elRef\n  }, extraAttrs), children);\n});\nMessages.displayName = 'f7-messages';\nexport default Messages;","map":null,"metadata":{},"sourceType":"module"}