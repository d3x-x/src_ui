{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { classNames, getExtraAttrs, getSlots, emit } from '../shared/utils';\nimport { colorClasses } from '../shared/mixins';\nimport { useTooltip } from '../shared/use-tooltip';\nvar Fab = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    morphTo = props.morphTo,\n    href = props.href,\n    target = props.target,\n    text = props.text,\n    _props$position = props.position,\n    position = _props$position === void 0 ? 'right-bottom' : _props$position;\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  var onClick = function onClick(e) {\n    emit(props, 'click', e);\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current\n    };\n  });\n  useTooltip(elRef, props);\n  var hrefComputed = href;\n  if (hrefComputed === true) hrefComputed = '#';\n  if (hrefComputed === false) hrefComputed = undefined; // no href attribute\n\n  var linkChildren = [];\n  var rootChildren = [];\n  var _getSlots = getSlots(props),\n    linkSlots = _getSlots.link,\n    defaultSlots = _getSlots.default,\n    rootSlots = _getSlots.root,\n    textSlots = _getSlots.text;\n  if (defaultSlots) {\n    for (var i = 0; i < defaultSlots.length; i += 1) {\n      var child = defaultSlots[i];\n      var isRoot = void 0;\n      var tag = child.type && (child.type.displayName || child.type.name);\n      if (tag === 'FabButtons' || tag === 'f7-fab-buttons') isRoot = true;\n      if (isRoot) rootChildren.push(child);else linkChildren.push(child);\n    }\n  }\n  var textEl;\n  if (text || textSlots && textSlots.length) {\n    textEl = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fab-text\"\n    }, text, textSlots);\n  }\n  var linkEl;\n  if (linkChildren.length || linkSlots && linkSlots.length || textEl) {\n    linkEl = /*#__PURE__*/React.createElement(\"a\", {\n      target: target,\n      href: hrefComputed,\n      onClick: onClick\n    }, linkChildren, textEl, linkSlots);\n  }\n  var classes = classNames(className, 'fab', \"fab-\" + position, {\n    'fab-morph': morphTo,\n    'fab-extended': typeof textEl !== 'undefined'\n  }, colorClasses(props));\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    id: id,\n    style: style,\n    className: classes,\n    \"data-morph-to\": morphTo,\n    ref: elRef\n  }, extraAttrs), linkEl, rootChildren, rootSlots);\n});\nFab.displayName = 'f7-fab';\nexport default Fab;","map":null,"metadata":{},"sourceType":"module"}