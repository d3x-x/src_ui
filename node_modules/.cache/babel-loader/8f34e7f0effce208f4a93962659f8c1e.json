{"ast":null,"code":"import React,{Component,Fragment}from'react';import rpc from'utils/rpc';import{IoIosAdd}from'react-icons/io';import{showNotification}from'utils/notifications';import Title from'../partials/title';import Navigation from'../partials/navigation';import SearchInput from'../partials/search';import List from'./list';import Contact from'./contact';import Editor from'./editor';export default class Contacts extends Component{constructor(){super(...arguments);this.state={contacts:[],blacklist:[],showEditor:false,searchValue:''};}componentDidMount(){rpc.callServer('Phone-GetContactsData').then(data=>this.setState(()=>data));}toggleEditor(){this.setState(state=>({showEditor:!state.showEditor}));}selectContact(contact){this.setState(()=>({selectedContact:contact}));}async saveContact(data){const{selectedContact:contact}=this.state;try{await rpc.callServer(contact?'Phone-EditContact':'Phone-AddContact',contact?[contact.phone,data]:data);this.setState(state=>({contacts:contact?state.contacts.map(item=>item.phone===contact.phone?data:item):[...state.contacts,data],selectedContact:data}));this.toggleEditor();}catch(err){showNotification('error','Контакт iз зазначеним номером вже iснує');}}async deleteContact(){const{selectedContact:contact}=this.state;if(!contact)return;await rpc.callServer('Phone-DeleteContact',contact.phone);this.setState(state=>({contacts:state.contacts.filter(item=>item.phone!==contact.phone),selectedContact:undefined}));this.toggleEditor();}async toggleBlacklist(){const{selectedContact:contact}=this.state;if(!contact)return;const isBlocked=this.isBlocked(contact);await rpc.callServer(isBlocked?'Phone-UnblockContact':'Phone-BlockContact',contact.phone);this.setState(state=>({blacklist:isBlocked?state.blacklist.filter(item=>item!==contact.phone):[...state.blacklist,contact.phone]}));}getFilteredItems(){const{searchValue}=this.state;return this.state.contacts.filter(item=>{const name=\"\".concat(item.firstName,\" \").concat(item.lastName);return name.toLowerCase().indexOf(searchValue.toLowerCase())!==-1;}).sort((a,b)=>a.firstName.localeCompare(b.firstName));}isBlocked(contact){return this.state.blacklist.includes(contact.phone);}render(){const{selectedContact,showEditor}=this.state;return/*#__PURE__*/React.createElement(\"div\",{className:\"contacts\"},showEditor?/*#__PURE__*/React.createElement(Editor,{contact:selectedContact,save:this.saveContact.bind(this),remove:this.deleteContact.bind(this),close:this.toggleEditor.bind(this)}):selectedContact?/*#__PURE__*/React.createElement(Contact,{contact:selectedContact,blocked:this.isBlocked(selectedContact),showEditor:this.toggleEditor.bind(this),toggleBlacklist:this.toggleBlacklist.bind(this),close:()=>this.selectContact()}):/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(Navigation,{action:{title:IoIosAdd,onClick:this.toggleEditor.bind(this)}}),/*#__PURE__*/React.createElement(\"div\",{className:\"header\"},/*#__PURE__*/React.createElement(Title,null,\"\\u041A\\u043E\\u043D\\u0442\\u0430\\u043A\\u0442\\u0438\"),/*#__PURE__*/React.createElement(SearchInput,{placeholder:\"\\u041F\\u043E\\u0438\\u0441\\u043A\",value:this.state.searchValue,onChange:value=>this.setState(()=>({searchValue:value}))})),/*#__PURE__*/React.createElement(List,{contacts:this.getFilteredItems(),selectContact:this.selectContact.bind(this)})));}}","map":null,"metadata":{},"sourceType":"module"}