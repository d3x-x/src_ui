{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle, useContext } from 'react';\nimport { classNames, getExtraAttrs, isStringProp, emit } from '../shared/utils';\nimport { colorClasses, routerAttrs, routerClasses, actionsAttrs, actionsClasses } from '../shared/mixins';\nimport { useIcon } from '../shared/use-icon';\nimport { useRouteProps } from '../shared/use-route-props';\nimport { useTooltip } from '../shared/use-tooltip';\nimport { TabbarContext } from '../shared/tabbar-context';\nimport Badge from './badge';\nimport { useSmartSelect } from '../shared/use-smart-select';\nvar Link = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _f7SmartSelect = useRef(null);\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    children = props.children,\n    noLinkClass = props.noLinkClass,\n    text = props.text,\n    tabLink = props.tabLink,\n    tabLinkActive = props.tabLinkActive,\n    tabbarLabel = props.tabbarLabel,\n    iconOnly = props.iconOnly,\n    badge = props.badge,\n    badgeColor = props.badgeColor,\n    _props$href = props.href,\n    href = _props$href === void 0 ? '#' : _props$href,\n    target = props.target,\n    smartSelect = props.smartSelect,\n    smartSelectParams = props.smartSelectParams;\n  var tabbarContext = useContext(TabbarContext);\n  var isTabbarLabel = tabbarLabel || tabbarContext.tabbarHasLabels;\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  var onClick = function onClick(e) {\n    emit(props, 'click', e);\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current,\n      f7SmartSelect: function f7SmartSelect() {\n        return _f7SmartSelect.current;\n      }\n    };\n  });\n  useTooltip(elRef, props);\n  useRouteProps(elRef, props);\n  useSmartSelect(smartSelect, smartSelectParams, _f7SmartSelect, function () {\n    return elRef.current;\n  });\n  var textEl;\n  var badgeEl;\n  if (text) {\n    if (badge) badgeEl = /*#__PURE__*/React.createElement(Badge, {\n      color: badgeColor\n    }, badge);\n    textEl = /*#__PURE__*/React.createElement(\"span\", {\n      className: isTabbarLabel ? 'tabbar-label' : ''\n    }, text, badgeEl);\n  }\n  var iconEl = useIcon(props);\n  var iconOnlyComputed;\n  if (iconOnly || !text && children && children.length === 0 || !text && !children) {\n    iconOnlyComputed = true;\n  } else {\n    iconOnlyComputed = false;\n  }\n  var classes = classNames(className, {\n    link: !(noLinkClass || isTabbarLabel),\n    'icon-only': iconOnlyComputed,\n    'tab-link': tabLink || tabLink === '',\n    'tab-link-active': tabLinkActive,\n    'smart-select': smartSelect\n  }, colorClasses(props), routerClasses(props), actionsClasses(props));\n  var hrefComputed = href;\n  if (href === true) hrefComputed = '#';\n  if (href === false) hrefComputed = undefined; // no href attribute\n\n  var attrs = _extends({\n    href: hrefComputed,\n    target: target,\n    'data-tab': isStringProp(tabLink) && tabLink || undefined\n  }, routerAttrs(props), actionsAttrs(props));\n  return /*#__PURE__*/React.createElement(\"a\", _extends({\n    ref: elRef,\n    id: id,\n    style: style,\n    className: classes\n  }, attrs, extraAttrs, {\n    onClick: onClick\n  }), iconEl, textEl, children);\n});\nLink.displayName = 'f7-link';\nexport default Link;","map":null,"metadata":{},"sourceType":"module"}