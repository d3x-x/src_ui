{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle, useContext } from 'react';\nimport { classNames, getExtraAttrs } from '../shared/utils';\nimport { colorClasses } from '../shared/mixins';\nimport { ListContext } from '../shared/list-context';\nvar ListGroup = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    children = props.children,\n    simpleList = props.simpleList,\n    mediaList = props.mediaList,\n    sortable = props.sortable,\n    sortableOpposite = props.sortableOpposite,\n    sortableTapHold = props.sortableTapHold,\n    sortableMoveElements = props.sortableMoveElements;\n  var extraAttrs = getExtraAttrs(props);\n  var listContext = useContext(ListContext);\n  var elRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current\n    };\n  });\n  var classes = classNames(className, 'list-group', {\n    'media-list': mediaList,\n    sortable: sortable,\n    'sortable-tap-hold': sortableTapHold,\n    'sortable-opposite': sortableOpposite\n  }, colorClasses(props));\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    id: id,\n    style: style,\n    className: classes,\n    \"data-sortable-move-elements\": typeof sortableMoveElements !== 'undefined' ? sortableMoveElements.toString() : undefined,\n    ref: elRef\n  }, extraAttrs), /*#__PURE__*/React.createElement(\"ul\", null, /*#__PURE__*/React.createElement(ListContext.Provider, {\n    value: {\n      listIsMedia: mediaList || listContext.listIsMedia,\n      listIsSimple: simpleList || listContext.listIsSimple,\n      listIsSortable: sortable || listContext.listIsSortable,\n      listIsSortableOpposite: sortableOpposite || listContext.listIsSortableOpposite\n    }\n  }, children)));\n});\nListGroup.displayName = 'f7-list-group';\nexport default ListGroup;","map":null,"metadata":{},"sourceType":"module"}