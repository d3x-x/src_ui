{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';\nimport { classNames, getExtraAttrs, getSlots, noUndefinedProps, emit } from '../shared/utils';\nimport { colorClasses } from '../shared/mixins';\nimport { f7ready, f7 } from '../shared/f7';\nimport { watchProp } from '../shared/watch-prop';\nvar TextEditor = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _f7TextEditor = useRef(null);\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    mode = props.mode,\n    value = props.value,\n    buttons = props.buttons,\n    customButtons = props.customButtons,\n    dividers = props.dividers,\n    imageUrlText = props.imageUrlText,\n    linkUrlText = props.linkUrlText,\n    placeholder = props.placeholder,\n    clearFormattingOnPaste = props.clearFormattingOnPaste,\n    _props$resizable = props.resizable,\n    resizable = _props$resizable === void 0 ? false : _props$resizable;\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  var onChange = function onChange(editor, editorValue) {\n    emit(props, 'textEditorChange', editorValue);\n  };\n  var onInput = function onInput(editor, editorValue) {\n    emit(props, 'textEditorInput', editorValue);\n  };\n  var onFocus = function onFocus() {\n    emit(props, 'textEditorFocus');\n  };\n  var onBlur = function onBlur() {\n    emit(props, 'textEditorBlur');\n  };\n  var onButtonClick = function onButtonClick(editor, button) {\n    emit(props, 'textEditorButtonClick', button);\n  };\n  var onKeyboardOpen = function onKeyboardOpen() {\n    emit(props, 'textEditorKeyboardOpen');\n  };\n  var onKeyboardClose = function onKeyboardClose() {\n    emit(props, 'textEditorKeyboardClose');\n  };\n  var onPopoverOpen = function onPopoverOpen() {\n    emit(props, 'textEditorPopoverOpen');\n  };\n  var onPopoverClose = function onPopoverClose() {\n    emit(props, 'textEditorPopoverClose');\n  };\n  var onInsertLink = function onInsertLink(editor, url) {\n    emit(props, 'textEditorInsertLink', url);\n  };\n  var onInsertImage = function onInsertImage(editor, url) {\n    emit(props, 'textEditorInsertImage', url);\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current,\n      f7TextEditor: function f7TextEditor() {\n        return _f7TextEditor.current;\n      }\n    };\n  });\n  watchProp(value, function (newValue) {\n    if (_f7TextEditor.current) {\n      _f7TextEditor.current.setValue(newValue);\n    }\n  });\n  var onMount = function onMount() {\n    var params = noUndefinedProps({\n      el: elRef.current,\n      mode: mode,\n      value: value,\n      buttons: buttons,\n      customButtons: customButtons,\n      dividers: dividers,\n      imageUrlText: imageUrlText,\n      linkUrlText: linkUrlText,\n      placeholder: placeholder,\n      clearFormattingOnPaste: clearFormattingOnPaste,\n      on: {\n        change: onChange,\n        input: onInput,\n        focus: onFocus,\n        blur: onBlur,\n        buttonClick: onButtonClick,\n        keyboardOpen: onKeyboardOpen,\n        keyboardClose: onKeyboardClose,\n        popoverOpen: onPopoverOpen,\n        popoverClose: onPopoverClose,\n        insertLink: onInsertLink,\n        insertImage: onInsertImage\n      }\n    });\n    f7ready(function () {\n      _f7TextEditor.current = f7.textEditor.create(params);\n    });\n  };\n  var onDestroy = function onDestroy() {\n    if (_f7TextEditor.current && _f7TextEditor.current.destroy) {\n      _f7TextEditor.current.destroy();\n    }\n    _f7TextEditor.current = null;\n  };\n  useIsomorphicLayoutEffect(function () {\n    onMount();\n    return onDestroy;\n  }, []);\n  var slots = getSlots(props);\n  var classes = classNames(className, 'text-editor', resizable && 'text-editor-resizable', colorClasses(props));\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: elRef,\n    id: id,\n    style: style,\n    className: classes\n  }, extraAttrs), slots['root-start'], /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-editor-content\",\n    contentEditable: true\n  }, slots.default), slots['root-end'], slots.root);\n});\nTextEditor.displayName = 'f7-text-editor';\nexport default TextEditor;","map":null,"metadata":{},"sourceType":"module"}