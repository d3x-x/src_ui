{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle, useState, useEffect } from 'react';\nimport { classNames, getExtraAttrs, emit } from '../shared/utils';\nimport { f7 } from '../shared/f7';\nvar AreaChart = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    _props$lineChart = props.lineChart,\n    lineChart = _props$lineChart === void 0 ? false : _props$lineChart,\n    _props$datasets = props.datasets,\n    datasets = _props$datasets === void 0 ? [] : _props$datasets,\n    _props$axis = props.axis,\n    axis = _props$axis === void 0 ? false : _props$axis,\n    _props$axisLabels = props.axisLabels,\n    axisLabels = _props$axisLabels === void 0 ? [] : _props$axisLabels,\n    _props$tooltip = props.tooltip,\n    tooltip = _props$tooltip === void 0 ? false : _props$tooltip,\n    _props$legend = props.legend,\n    legend = _props$legend === void 0 ? false : _props$legend,\n    _props$toggleDatasets = props.toggleDatasets,\n    toggleDatasets = _props$toggleDatasets === void 0 ? false : _props$toggleDatasets,\n    _props$width = props.width,\n    width = _props$width === void 0 ? 640 : _props$width,\n    _props$height = props.height,\n    height = _props$height === void 0 ? 320 : _props$height,\n    _props$maxAxisLabels = props.maxAxisLabels,\n    maxAxisLabels = _props$maxAxisLabels === void 0 ? 8 : _props$maxAxisLabels,\n    formatAxisLabelProp = props.formatAxisLabel,\n    formatLegendLabelProp = props.formatLegendLabel,\n    formatTooltipProp = props.formatTooltip,\n    formatTooltipAxisLabel = props.formatTooltipAxisLabel,\n    formatTooltipTotal = props.formatTooltipTotal,\n    formatTooltipDataset = props.formatTooltipDataset,\n    children = props.children;\n  var _useState = useState(null),\n    currentIndex = _useState[0],\n    setCurrentIndex = _useState[1];\n  var previousIndex = useRef(null);\n  var _useState2 = useState([]),\n    hiddenDatasets = _useState2[0],\n    setHiddenDatasets = _useState2[1];\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  var svgElRef = useRef(null);\n  var f7Tooltip = useRef(null);\n  var linesOffsets = useRef(null);\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current\n    };\n  });\n  var getVisibleLegends = function getVisibleLegends() {\n    if (!maxAxisLabels || axisLabels.length <= maxAxisLabels) return axisLabels;\n    var skipStep = Math.ceil(axisLabels.length / maxAxisLabels);\n    var filtered = axisLabels.filter(function (label, index) {\n      return index % skipStep === 0;\n    });\n    return filtered;\n  };\n  var getSummValues = function getSummValues() {\n    var summValues = [];\n    datasets.filter(function (dataset, index) {\n      return !hiddenDatasets.includes(index);\n    }).forEach(function (_ref) {\n      var values = _ref.values;\n      values.forEach(function (value, valueIndex) {\n        if (!summValues[valueIndex]) summValues[valueIndex] = 0;\n        summValues[valueIndex] += value;\n      });\n    });\n    return summValues;\n  };\n  var getChartData = function getChartData() {\n    var data = [];\n    if (!datasets.length) {\n      return data;\n    }\n    var lastValues = datasets[0].values.map(function () {\n      return 0;\n    });\n    var maxValue = 0;\n    if (lineChart) {\n      datasets.forEach(function (_ref2) {\n        var values = _ref2.values;\n        var datasetMaxValue = Math.max.apply(Math, values);\n        if (datasetMaxValue > maxValue) maxValue = datasetMaxValue;\n      });\n    } else {\n      maxValue = Math.max.apply(Math, getSummValues());\n    }\n    datasets.filter(function (dataset, index) {\n      return !hiddenDatasets.includes(index);\n    }).forEach(function (_ref3) {\n      var label = _ref3.label,\n        values = _ref3.values,\n        color = _ref3.color;\n      var points = values.map(function (originalValue, valueIndex) {\n        lastValues[valueIndex] += originalValue;\n        var value = lineChart ? originalValue : lastValues[valueIndex];\n        var x = valueIndex / (values.length - 1) * width;\n        var y = height - value / maxValue * height;\n        if (lineChart) {\n          return \"\" + (valueIndex === 0 ? 'M' : 'L') + x + \",\" + y;\n        }\n        return x + \" \" + y;\n      });\n      if (!lineChart) {\n        points.push(width + \" \" + height + \" 0 \" + height);\n      }\n      data.push({\n        label: label,\n        points: points.join(' '),\n        color: color\n      });\n    });\n    return data.reverse();\n  };\n  var getVerticalLines = function getVerticalLines() {\n    var lines = [];\n    if (!datasets.length) {\n      return lines;\n    }\n    var values = datasets[0].values;\n    values.forEach(function (value, valueIndex) {\n      var x = valueIndex / (values.length - 1) * width;\n      lines.push(x);\n    });\n    return lines;\n  };\n  var toggleDataset = function toggleDataset(index) {\n    if (!toggleDatasets) return;\n    if (hiddenDatasets.includes(index)) {\n      hiddenDatasets.splice(hiddenDatasets.indexOf(index), 1);\n    } else {\n      hiddenDatasets.push(index);\n    }\n    setHiddenDatasets([].concat(hiddenDatasets));\n  };\n  var formatAxisLabel = function formatAxisLabel(label) {\n    if (formatAxisLabelProp) return formatAxisLabelProp(label);\n    return label;\n  };\n  var formatLegendLabel = function formatLegendLabel(label) {\n    if (formatLegendLabelProp) return formatLegendLabelProp(label);\n    return label;\n  };\n  var calcLinesOffsets = function calcLinesOffsets() {\n    var lines = svgElRef.current.querySelectorAll('line');\n    linesOffsets.current = [];\n    for (var i = 0; i < lines.length; i += 1) {\n      linesOffsets.current.push(lines[i].getBoundingClientRect().left);\n    }\n  };\n  var formatTooltip = function formatTooltip() {\n    if (currentIndex === null) return '';\n    var total = 0;\n    var currentValues = datasets.filter(function (dataset, index) {\n      return !hiddenDatasets.includes(index);\n    }).map(function (dataset) {\n      return {\n        color: dataset.color,\n        label: dataset.label,\n        value: dataset.values[currentIndex]\n      };\n    });\n    currentValues.forEach(function (dataset) {\n      total += dataset.value;\n    });\n    if (formatTooltipProp) {\n      return formatTooltipProp({\n        index: currentIndex,\n        total: total,\n        datasets: currentValues\n      });\n    }\n    var labelText = formatTooltipAxisLabel ? formatTooltipAxisLabel(axisLabels[currentIndex]) : formatAxisLabel(axisLabels[currentIndex]);\n    if (!labelText) labelText = '';\n    var totalText = formatTooltipTotal ? formatTooltipTotal(total) : total; // prettier-ignore\n\n    var datasetsText = currentValues.length > 0 ? \"\\n      <ul class=\\\"area-chart-tooltip-list\\\">\\n        \" + currentValues.map(function (_ref4) {\n      var label = _ref4.label,\n        color = _ref4.color,\n        value = _ref4.value;\n      var valueText = formatTooltipDataset ? formatTooltipDataset(label, value, color) : label + \": \" + value;\n      return \"\\n              <li><span style=\\\"background-color: \" + color + \";\\\"></span>\" + valueText + \"</li>\\n            \";\n    }).join('') + \"\\n      </ul>\" : ''; // prettier-ignore\n\n    return \"\\n      <div class=\\\"area-chart-tooltip-label\\\">\" + labelText + \"</div>\\n      <div class=\\\"area-chart-tooltip-total\\\">\" + totalText + \"</div>\\n      \" + datasetsText + \"\\n    \";\n  };\n  var setTooltip = function setTooltip() {\n    if (!tooltip) return;\n    var hasVisibleDataSets = datasets.filter(function (dataset, index) {\n      return !hiddenDatasets.includes(index);\n    }).length > 0;\n    if (!hasVisibleDataSets) {\n      if (f7Tooltip.current && f7Tooltip.current.hide) f7Tooltip.current.hide();\n      return;\n    }\n    if (currentIndex !== null && !f7Tooltip.current) {\n      f7Tooltip.current = f7.tooltip.create({\n        trigger: 'manual',\n        containerEl: elRef.current,\n        targetEl: svgElRef.current.querySelector(\"line[data-index=\\\"\" + currentIndex + \"\\\"]\"),\n        text: formatTooltip(),\n        cssClass: 'area-chart-tooltip'\n      });\n      if (f7Tooltip.current && f7Tooltip.current.show) {\n        f7Tooltip.current.show();\n      }\n      return;\n    }\n    if (!f7Tooltip.current || !f7Tooltip.current.hide || !f7Tooltip.current.show) {\n      return;\n    }\n    if (currentIndex !== null) {\n      f7Tooltip.current.setText(formatTooltip());\n      f7Tooltip.current.setTargetEl(svgElRef.current.querySelector(\"line[data-index=\\\"\" + currentIndex + \"\\\"]\"));\n      f7Tooltip.current.show();\n    } else {\n      f7Tooltip.current.hide();\n    }\n  };\n  var onMouseEnter = function onMouseEnter() {\n    calcLinesOffsets();\n  };\n  var onMouseMove = function onMouseMove(e) {\n    if (!linesOffsets.current) {\n      calcLinesOffsets();\n    }\n    var currentLeft = e.pageX;\n    if (typeof currentLeft === 'undefined') currentLeft = 0;\n    var distances = linesOffsets.current.map(function (left) {\n      return Math.abs(currentLeft - left);\n    });\n    var minDistance = Math.min.apply(Math, distances);\n    var closestIndex = distances.indexOf(minDistance);\n    setCurrentIndex(closestIndex);\n  };\n  var onMouseLeave = function onMouseLeave() {\n    setCurrentIndex(null);\n  };\n  var attachEvents = function attachEvents() {\n    if (!svgElRef.current) return;\n    svgElRef.current.addEventListener('mouseenter', onMouseEnter);\n    svgElRef.current.addEventListener('mousemove', onMouseMove);\n    svgElRef.current.addEventListener('mouseleave', onMouseLeave);\n  };\n  var detachEvents = function detachEvents() {\n    if (!svgElRef.current) return;\n    svgElRef.current.removeEventListener('mouseenter', onMouseEnter);\n    svgElRef.current.removeEventListener('mousemove', onMouseMove);\n    svgElRef.current.removeEventListener('mouseleave', onMouseLeave);\n  };\n  useEffect(function () {\n    if (previousIndex.current === currentIndex) return;\n    previousIndex.current = currentIndex;\n    emit(props, 'select', currentIndex);\n    setTooltip();\n  }, [currentIndex]);\n  useEffect(function () {\n    attachEvents();\n    return detachEvents;\n  });\n  useEffect(function () {\n    return function () {\n      if (f7Tooltip.current && f7Tooltip.current.destroy) {\n        f7Tooltip.current.destroy();\n      }\n      f7Tooltip.current = null;\n    };\n  }, []);\n  var classes = classNames('area-chart', className);\n  var chartData = getChartData();\n  var verticalLines = getVerticalLines();\n  var visibleLegends = getVisibleLegends();\n  var LegendItemTag = toggleDatasets ? 'button' : 'span';\n  var ChartTag = lineChart ? 'path' : 'polygon';\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    id: id,\n    style: style,\n    className: classes,\n    ref: elRef\n  }, extraAttrs), /*#__PURE__*/React.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: width,\n    height: height,\n    viewBox: \"0 0 \" + width + \" \" + height,\n    preserveAspectRatio: \"none\",\n    ref: svgElRef\n  }, chartData.map(function (data, index) {\n    return /*#__PURE__*/React.createElement(ChartTag, {\n      key: ChartTag + \"-\" + index,\n      fill: lineChart ? undefined : data.color,\n      stroke: lineChart ? data.color : undefined,\n      fillRule: \"evenodd\",\n      points: lineChart ? undefined : data.points,\n      d: lineChart ? data.points : undefined\n    });\n  }), verticalLines.map(function (line, index) {\n    return /*#__PURE__*/React.createElement(\"line\", {\n      key: \"line-\" + index,\n      \"data-index\": index,\n      fill: \"#000\",\n      x1: line,\n      y1: 0,\n      x2: line,\n      y2: height,\n      className: classNames({\n        'area-chart-current-line': currentIndex === index\n      })\n    });\n  })), axis && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"area-chart-axis\"\n  }, axisLabels.map(function (label, index) {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      key: index\n    }, visibleLegends.includes(label) && /*#__PURE__*/React.createElement(\"span\", null, formatAxisLabel(label)));\n  })), legend && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"area-chart-legend\"\n  }, datasets.map(function (dataset, index) {\n    return /*#__PURE__*/React.createElement(LegendItemTag, {\n      key: index,\n      className: classNames('area-chart-legend-item', {\n        'area-chart-legend-item-hidden': hiddenDatasets.includes(index),\n        'area-chart-legend-button': toggleDatasets\n      }),\n      type: toggleDatasets ? 'button' : undefined,\n      onClick: function onClick() {\n        return toggleDataset(index);\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        backgroundColor: dataset.color\n      }\n    }), formatLegendLabel(dataset.label));\n  })), children);\n});\nAreaChart.displayName = 'f7-area-chart';\nexport default AreaChart;","map":null,"metadata":{},"sourceType":"module"}