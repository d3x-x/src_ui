{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle, useState, useEffect } from 'react';\nimport { classNames, getExtraAttrs, emit } from '../shared/utils';\nimport { f7 } from '../shared/f7';\nvar PieChart = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    _props$size = props.size,\n    size = _props$size === void 0 ? 320 : _props$size,\n    _props$tooltip = props.tooltip,\n    tooltip = _props$tooltip === void 0 ? false : _props$tooltip,\n    _props$datasets = props.datasets,\n    datasets = _props$datasets === void 0 ? [] : _props$datasets,\n    formatTooltip = props.formatTooltip,\n    children = props.children;\n  var extraAttrs = getExtraAttrs(props);\n  var _useState = useState(null),\n    currentIndex = _useState[0],\n    setCurrentIndex = _useState[1];\n  var previousIndex = useRef(null);\n  var elRef = useRef(null);\n  var f7Tooltip = useRef(null);\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current\n    };\n  });\n  var getSummValue = function getSummValue() {\n    var summ = 0;\n    datasets.map(function (d) {\n      return d.value || 0;\n    }).forEach(function (value) {\n      summ += value;\n    });\n    return summ;\n  };\n  var getPaths = function getPaths() {\n    var paths = [];\n    var cumulativePercentage = 0;\n    function getCoordinatesForPercentage(percentage) {\n      var x = Math.cos(2 * Math.PI * percentage) * (size / 3);\n      var y = Math.sin(2 * Math.PI * percentage) * (size / 3);\n      return [x, y];\n    }\n    datasets.forEach(function (_ref) {\n      var value = _ref.value,\n        label = _ref.label,\n        color = _ref.color;\n      var percentage = value / getSummValue();\n      var _getCoordinatesForPer = getCoordinatesForPercentage(cumulativePercentage),\n        startX = _getCoordinatesForPer[0],\n        startY = _getCoordinatesForPer[1];\n      cumulativePercentage += percentage;\n      var _getCoordinatesForPer2 = getCoordinatesForPercentage(cumulativePercentage),\n        endX = _getCoordinatesForPer2[0],\n        endY = _getCoordinatesForPer2[1];\n      var largeArcFlag = percentage > 0.5 ? 1 : 0;\n      var points = [\"M \" + startX + \" \" + startY,\n      // Move\n      \"A \" + size / 3 + \" \" + size / 3 + \" 0 \" + largeArcFlag + \" 1 \" + endX + \" \" + endY,\n      // Arc\n      'L 0 0' // Line\n      ].join(' ');\n      paths.push({\n        points: points,\n        label: label,\n        color: color\n      });\n    });\n    return paths;\n  };\n  var formatTooltipText = function formatTooltipText() {\n    if (currentIndex === null) return '';\n    var _datasets$currentInde = datasets[currentIndex],\n      value = _datasets$currentInde.value,\n      label = _datasets$currentInde.label,\n      color = _datasets$currentInde.color;\n    var percentage = value / getSummValue() * 100;\n    var round = function round(v) {\n      if (parseInt(v, 10) === v) return v;\n      return Math.round(v * 100) / 100;\n    };\n    if (formatTooltip) {\n      return formatTooltip({\n        index: currentIndex,\n        value: value,\n        label: label,\n        color: color,\n        percentage: percentage\n      });\n    }\n    var tooltipText = \"\" + (label ? label + \": \" : '') + round(value) + \" (\" + round(percentage) + \"%)\";\n    return \"\\n      <div class=\\\"pie-chart-tooltip-label\\\">\\n        <span class=\\\"pie-chart-tooltip-color\\\" style=\\\"background-color: \" + color + \";\\\"></span> \" + tooltipText + \"\\n      </div>\\n    \";\n  };\n  var setTooltip = function setTooltip() {\n    if (currentIndex === null && !f7Tooltip.current) return;\n    if (!tooltip || !elRef.current || !f7) return;\n    if (currentIndex !== null && !f7Tooltip.current) {\n      f7Tooltip.current = f7.tooltip.create({\n        trigger: 'manual',\n        containerEl: elRef.current,\n        targetEl: elRef.current.querySelector(\"path[data-index=\\\"\" + currentIndex + \"\\\"]\"),\n        text: formatTooltipText(),\n        cssClass: 'pie-chart-tooltip'\n      });\n      f7Tooltip.current.show();\n      return;\n    }\n    if (!f7Tooltip.current) return;\n    if (currentIndex !== null) {\n      f7Tooltip.current.setText(formatTooltipText());\n      f7Tooltip.current.setTargetEl(elRef.current.querySelector(\"path[data-index=\\\"\" + currentIndex + \"\\\"]\"));\n      f7Tooltip.current.show();\n    } else {\n      f7Tooltip.current.hide();\n    }\n  };\n  useEffect(function () {\n    if (previousIndex.current === currentIndex) return;\n    previousIndex.current = currentIndex;\n    emit(props, 'select', currentIndex, datasets[currentIndex]);\n    setTooltip();\n  }, [currentIndex]);\n  useEffect(function () {\n    return function () {\n      if (f7Tooltip.current && f7Tooltip.current.destroy) {\n        f7Tooltip.current.destroy();\n      }\n      f7Tooltip.current = null;\n    };\n  }, []);\n  var classes = classNames('pie-chart', className);\n  var paths = getPaths();\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    id: id,\n    style: style,\n    className: classes,\n    ref: elRef\n  }, extraAttrs), /*#__PURE__*/React.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"-\" + size / 3 + \" -\" + size / 3 + \" \" + size * 2 / 3 + \" \" + size * 2 / 3,\n    style: {\n      transform: 'rotate(-90deg)'\n    }\n  }, paths.map(function (path, index) {\n    return /*#__PURE__*/React.createElement(\"path\", {\n      key: path.label || index,\n      d: path.points,\n      fill: path.color,\n      \"data-index\": index,\n      className: classNames({\n        'pie-chart-hidden': currentIndex !== null && currentIndex !== index\n      }),\n      onClick: function onClick() {\n        return setCurrentIndex(index);\n      },\n      onMouseEnter: function onMouseEnter() {\n        return setCurrentIndex(index);\n      },\n      onMouseLeave: function onMouseLeave() {\n        return setCurrentIndex(null);\n      }\n    });\n  })), children);\n});\nPieChart.displayName = 'f7-pie-chart';\nexport default PieChart;","map":null,"metadata":{},"sourceType":"module"}