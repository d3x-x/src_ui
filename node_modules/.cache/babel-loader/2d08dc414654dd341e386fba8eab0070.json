{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';\nimport { classNames, getExtraAttrs, getSlots, emit } from '../shared/utils';\nimport { colorClasses, routerAttrs, routerClasses, actionsClasses, actionsAttrs } from '../shared/mixins';\nimport { useRouteProps } from '../shared/use-route-props';\nimport { useIcon } from '../shared/use-icon';\nimport { f7ready, f7 } from '../shared/f7';\nimport { useTooltip } from '../shared/use-tooltip';\nvar MenuItem = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    link = props.link,\n    href = props.href,\n    target = props.target,\n    text = props.text,\n    dropdown = props.dropdown,\n    iconOnly = props.iconOnly;\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  var onClick = function onClick(e) {\n    emit(props, 'click', e);\n  };\n  var onOpened = function onOpened(el) {\n    if (elRef.current !== el) return;\n    emit(props, 'menuOpened', el);\n  };\n  var onClosed = function onClosed(el) {\n    if (elRef.current !== el) return;\n    emit(props, 'menuClosed', el);\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current\n    };\n  });\n  useTooltip(elRef, props);\n  useRouteProps(elRef, props);\n  var attachEvents = function attachEvents() {\n    f7ready(function () {\n      f7.on('menuOpened', onOpened);\n      f7.on('menuClosed', onClosed);\n    });\n  };\n  var detachEvents = function detachEvents() {\n    f7.off('menuOpened', onOpened);\n    f7.off('menuClosed', onOpened);\n  };\n  useIsomorphicLayoutEffect(function () {\n    attachEvents();\n    return detachEvents;\n  });\n  var iconEl = useIcon(props);\n  var slots = getSlots(props);\n  var iconOnlyComputed;\n  if (iconOnly || !text && slots.text && slots.text.length === 0 || !text && !slots.text) {\n    iconOnlyComputed = true;\n  } else {\n    iconOnlyComputed = false;\n  }\n  var isLink = link || href || href === '';\n  var Tag = isLink ? 'a' : 'div';\n  var isDropdown = dropdown || dropdown === '';\n  var classes = classNames({\n    'menu-item': true,\n    'menu-item-dropdown': isDropdown,\n    'icon-only': iconOnlyComputed\n  }, className, colorClasses(props), routerClasses(props), actionsClasses(props));\n  var hrefComputed = href;\n  if (typeof hrefComputed === 'undefined' && link) hrefComputed = '#';\n  var attrs = _extends({\n    href: hrefComputed,\n    target: target\n  }, routerAttrs(props), actionsAttrs(props));\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    ref: elRef,\n    className: classes,\n    id: id,\n    style: style\n  }, attrs, extraAttrs, {\n    onClick: onClick\n  }), (text || slots.text && slots.text.length || iconEl) && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"menu-item-content\"\n  }, text, iconEl, slots.text), slots.default);\n});\nMenuItem.displayName = 'f7-menu-item';\nexport default MenuItem;","map":null,"metadata":{},"sourceType":"module"}