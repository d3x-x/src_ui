{"ast":null,"code":"var _excluded = [\"tag\", \"effect\", \"className\", \"children\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React from 'react';\nvar SkeletonText = function SkeletonText(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n    _ref$tag = _ref.tag,\n    Tag = _ref$tag === void 0 ? 'span' : _ref$tag,\n    effect = _ref.effect,\n    className = _ref.className,\n    children = _ref.children,\n    other = _objectWithoutPropertiesLoose(_ref, _excluded);\n  var skeletonClassName = ['skeleton-text', effect && \"skeleton-effect-\" + effect, className].filter(function (c) {\n    return !!c;\n  }).join(' ');\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    className: skeletonClassName\n  }, other), children);\n};\nexport default SkeletonText;","map":null,"metadata":{},"sourceType":"module"}