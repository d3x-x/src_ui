{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { classNames, getExtraAttrs, getSlots, emit } from '../shared/utils';\nimport { colorClasses } from '../shared/mixins';\nimport { useTooltip } from '../shared/use-tooltip';\nimport { useIcon } from '../shared/use-icon';\nvar Chip = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    media = props.media,\n    text = props.text,\n    deleteable = props.deleteable,\n    mediaTextColor = props.mediaTextColor,\n    mediaBgColor = props.mediaBgColor,\n    outline = props.outline;\n  var extraAttrs = getExtraAttrs(props);\n  var onClick = function onClick(event) {\n    emit(props, 'click', event);\n  };\n  var onDeleteClick = function onDeleteClick(event) {\n    emit(props, 'delete', event);\n  };\n  var elRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current\n    };\n  });\n  useTooltip(elRef, props);\n  var slots = getSlots(props);\n  var iconEl = useIcon(props);\n  var mediaEl;\n  var labelEl;\n  var deleteEl;\n  if (media || iconEl || slots && slots.media) {\n    var mediaClasses = classNames('chip-media', mediaTextColor && \"text-color-\" + mediaTextColor, mediaBgColor && \"bg-color-\" + mediaBgColor);\n    mediaEl = /*#__PURE__*/React.createElement(\"div\", {\n      className: mediaClasses\n    }, iconEl, media, slots.media);\n  }\n  if (text || slots && (slots.text || slots.default && slots.default.length)) {\n    labelEl = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chip-label\"\n    }, text, slots.text, slots.default);\n  }\n  if (deleteable) {\n    deleteEl = /*#__PURE__*/React.createElement(\"a\", {\n      className: \"chip-delete\",\n      onClick: onDeleteClick\n    });\n  }\n  var classes = classNames(className, 'chip', {\n    'chip-outline': outline\n  }, colorClasses(props));\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    id: id,\n    style: style,\n    className: classes,\n    ref: elRef\n  }, extraAttrs, {\n    onClick: onClick\n  }), mediaEl, labelEl, deleteEl);\n});\nChip.displayName = 'f7-chip';\nexport default Chip;","map":null,"metadata":{},"sourceType":"module"}