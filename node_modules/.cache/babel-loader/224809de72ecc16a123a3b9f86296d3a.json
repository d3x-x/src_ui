{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useImperativeHandle, useRef } from 'react';\nimport { f7, f7ready } from '../shared/f7';\nimport { colorClasses } from '../shared/mixins';\nimport { modalStateClasses } from '../shared/modal-state-classes';\nimport { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';\nimport { classNames, emit, getExtraAttrs } from '../shared/utils';\nimport { watchProp } from '../shared/watch-prop';\nvar Popup = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _f7Popup = useRef(null);\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    children = props.children,\n    tabletFullscreen = props.tabletFullscreen,\n    push = props.push,\n    opened = props.opened,\n    closeByBackdropClick = props.closeByBackdropClick,\n    backdrop = props.backdrop,\n    backdropEl = props.backdropEl,\n    animate = props.animate,\n    closeOnEscape = props.closeOnEscape,\n    _props$swipeToClose = props.swipeToClose,\n    swipeToClose = _props$swipeToClose === void 0 ? false : _props$swipeToClose,\n    swipeHandler = props.swipeHandler,\n    containerEl = props.containerEl;\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  var isOpened = useRef(opened);\n  var isClosing = useRef(false);\n  var onSwipeStart = function onSwipeStart(instance) {\n    emit(props, 'popupSwipeStart', instance);\n  };\n  var onSwipeMove = function onSwipeMove(instance) {\n    emit(props, 'popupSwipeMove', instance);\n  };\n  var onSwipeEnd = function onSwipeEnd(instance) {\n    emit(props, 'popupSwipeEnd', instance);\n  };\n  var onSwipeClose = function onSwipeClose(instance) {\n    emit(props, 'popupSwipeClose', instance);\n  };\n  var onOpen = function onOpen(instance) {\n    isOpened.current = true;\n    isClosing.current = false;\n    emit(props, 'popupOpen', instance);\n  };\n  var onOpened = function onOpened(instance) {\n    emit(props, 'popupOpened', instance);\n  };\n  var onClose = function onClose(instance) {\n    isOpened.current = false;\n    isClosing.current = true;\n    emit(props, 'popupClose', instance);\n  };\n  var onClosed = function onClosed(instance) {\n    isClosing.current = false;\n    emit(props, 'popupClosed', instance);\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current,\n      f7Popup: function f7Popup() {\n        return _f7Popup.current;\n      }\n    };\n  });\n  watchProp(opened, function (value) {\n    if (!_f7Popup.current) return;\n    if (value) {\n      _f7Popup.current.open();\n    } else {\n      _f7Popup.current.close();\n    }\n  });\n  var modalEvents = function modalEvents(method) {\n    if (!_f7Popup.current) return;\n    _f7Popup.current[method]('swipeStart', onSwipeStart);\n    _f7Popup.current[method]('swipeMove', onSwipeMove);\n    _f7Popup.current[method]('swipeEnd', onSwipeEnd);\n    _f7Popup.current[method]('swipeClose', onSwipeClose);\n    _f7Popup.current[method]('open', onOpen);\n    _f7Popup.current[method]('opened', onOpened);\n    _f7Popup.current[method]('close', onClose);\n    _f7Popup.current[method]('closed', onClosed);\n  };\n  var onMount = function onMount() {\n    if (!elRef.current) return;\n    var popupParams = {\n      el: elRef.current\n    };\n    if ('closeByBackdropClick' in props) popupParams.closeByBackdropClick = closeByBackdropClick;\n    if ('closeOnEscape' in props) popupParams.closeOnEscape = closeOnEscape;\n    if ('animate' in props) popupParams.animate = animate;\n    if ('backdrop' in props) popupParams.backdrop = backdrop;\n    if ('backdropEl' in props) popupParams.backdropEl = backdropEl;\n    if ('swipeToClose' in props) popupParams.swipeToClose = swipeToClose;\n    if ('swipeHandler' in props) popupParams.swipeHandler = swipeHandler;\n    if ('containerEl' in props) popupParams.containerEl = containerEl;\n    f7ready(function () {\n      _f7Popup.current = f7.popup.create(popupParams);\n      modalEvents('on');\n      if (opened) {\n        _f7Popup.current.open(false);\n      }\n    });\n  };\n  var onDestroy = function onDestroy() {\n    if (_f7Popup.current) {\n      _f7Popup.current.destroy();\n    }\n    _f7Popup.current = null;\n  };\n  useIsomorphicLayoutEffect(function () {\n    modalEvents('on');\n    return function () {\n      modalEvents('off');\n    };\n  });\n  useIsomorphicLayoutEffect(function () {\n    onMount();\n    return onDestroy;\n  }, []);\n  var classes = classNames(className, 'popup', {\n    'popup-tablet-fullscreen': tabletFullscreen,\n    'popup-push': push\n  }, modalStateClasses({\n    isOpened: isOpened,\n    isClosing: isClosing\n  }), colorClasses(props));\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    id: id,\n    style: style,\n    className: classes,\n    ref: elRef\n  }, extraAttrs), children);\n});\nPopup.displayName = 'f7-popup';\nexport default Popup;","map":null,"metadata":{},"sourceType":"module"}