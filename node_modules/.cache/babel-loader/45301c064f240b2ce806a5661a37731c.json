{"ast":null,"code":"function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nimport { getDocument } from 'ssr-window';\nimport $ from '../../shared/dom7';\nimport { extend, deleteProps } from '../../shared/utils';\nimport Framework7Class from '../../shared/class';\nvar openedModals = [];\nvar dialogsQueue = [];\nfunction clearDialogsQueue() {\n  if (dialogsQueue.length === 0) return;\n  var dialog = dialogsQueue.shift();\n  dialog.open();\n}\nvar Modal = /*#__PURE__*/function (_Framework7Class) {\n  _inheritsLoose(Modal, _Framework7Class);\n  function Modal(app, params) {\n    var _this;\n    _this = _Framework7Class.call(this, params, [app]) || this;\n    var modal = _assertThisInitialized(_this);\n    var defaults = {}; // Extend defaults with modules params\n\n    modal.useModulesParams(defaults);\n    modal.params = extend(defaults, params);\n    modal.opened = false;\n    var $containerEl = modal.params.containerEl ? $(modal.params.containerEl).eq(0) : app.$el;\n    if (!$containerEl.length) $containerEl = app.$el;\n    modal.$containerEl = $containerEl;\n    modal.containerEl = $containerEl[0]; // Install Modules\n\n    modal.useModules();\n    return _assertThisInitialized(_this) || _assertThisInitialized(_this);\n  }\n  var _proto = Modal.prototype;\n  _proto.onOpen = function onOpen() {\n    var modal = this;\n    modal.opened = true;\n    openedModals.push(modal);\n    $('html').addClass(\"with-modal-\" + modal.type.toLowerCase());\n    modal.$el.trigger(\"modal:open \" + modal.type.toLowerCase() + \":open\");\n    modal.emit(\"local::open modalOpen \" + modal.type + \"Open\", modal);\n  };\n  _proto.onOpened = function onOpened() {\n    var modal = this;\n    modal.$el.trigger(\"modal:opened \" + modal.type.toLowerCase() + \":opened\");\n    modal.emit(\"local::opened modalOpened \" + modal.type + \"Opened\", modal);\n  };\n  _proto.onClose = function onClose() {\n    var modal = this;\n    modal.opened = false;\n    if (!modal.type || !modal.$el) return;\n    openedModals.splice(openedModals.indexOf(modal), 1);\n    $('html').removeClass(\"with-modal-\" + modal.type.toLowerCase());\n    modal.$el.trigger(\"modal:close \" + modal.type.toLowerCase() + \":close\");\n    modal.emit(\"local::close modalClose \" + modal.type + \"Close\", modal);\n  };\n  _proto.onClosed = function onClosed() {\n    var modal = this;\n    if (!modal.type || !modal.$el) return;\n    modal.$el.removeClass('modal-out');\n    modal.$el.hide();\n    modal.$el.trigger(\"modal:closed \" + modal.type.toLowerCase() + \":closed\");\n    modal.emit(\"local::closed modalClosed \" + modal.type + \"Closed\", modal);\n  };\n  _proto.open = function open(animateModal) {\n    var modal = this;\n    var document = getDocument();\n    var app = modal.app;\n    var $el = modal.$el;\n    var $backdropEl = modal.$backdropEl;\n    var type = modal.type;\n    var animate = true;\n    if (typeof animateModal !== 'undefined') animate = animateModal;else if (typeof modal.params.animate !== 'undefined') {\n      animate = modal.params.animate;\n    }\n    if (!$el || $el.hasClass('modal-in')) {\n      if (animateModal === false && $el[0] && type !== 'dialog') {\n        $el[0].style.display = 'block';\n      }\n      return modal;\n    }\n    if (type === 'dialog' && app.params.modal.queueDialogs) {\n      var pushToQueue;\n      if ($('.dialog.modal-in').length > 0) {\n        pushToQueue = true;\n      } else if (openedModals.length > 0) {\n        openedModals.forEach(function (openedModal) {\n          if (openedModal.type === 'dialog') pushToQueue = true;\n        });\n      }\n      if (pushToQueue) {\n        dialogsQueue.push(modal);\n        return modal;\n      }\n    }\n    var $modalParentEl = $el.parent();\n    var wasInDom = $el.parents(document).length > 0;\n    if (!$modalParentEl.is(modal.$containerEl)) {\n      modal.$containerEl.append($el);\n      modal.once(type + \"Closed\", function () {\n        if (wasInDom) {\n          $modalParentEl.append($el);\n        } else {\n          $el.remove();\n        }\n      });\n    } // Show Modal\n\n    $el.show();\n    /* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"_clientLeft\"] }] */\n\n    modal._clientLeft = $el[0].clientLeft; // Modal\n\n    function transitionEnd() {\n      if ($el.hasClass('modal-out')) {\n        modal.onClosed();\n      } else if ($el.hasClass('modal-in')) {\n        modal.onOpened();\n      }\n    }\n    if (animate) {\n      if ($backdropEl) {\n        $backdropEl.removeClass('not-animated');\n        $backdropEl.addClass('backdrop-in');\n      }\n      $el.animationEnd(function () {\n        transitionEnd();\n      });\n      $el.transitionEnd(function () {\n        transitionEnd();\n      });\n      $el.removeClass('modal-out not-animated').addClass('modal-in');\n      modal.onOpen();\n    } else {\n      if ($backdropEl) {\n        $backdropEl.addClass('backdrop-in not-animated');\n      }\n      $el.removeClass('modal-out').addClass('modal-in not-animated');\n      modal.onOpen();\n      modal.onOpened();\n    }\n    return modal;\n  };\n  _proto.close = function close(animateModal) {\n    var modal = this;\n    var $el = modal.$el;\n    var $backdropEl = modal.$backdropEl;\n    var animate = true;\n    if (typeof animateModal !== 'undefined') animate = animateModal;else if (typeof modal.params.animate !== 'undefined') {\n      animate = modal.params.animate;\n    }\n    if (!$el || !$el.hasClass('modal-in')) {\n      if (dialogsQueue.indexOf(modal) >= 0) {\n        dialogsQueue.splice(dialogsQueue.indexOf(modal), 1);\n      }\n      return modal;\n    } // backdrop\n\n    if ($backdropEl) {\n      var needToHideBackdrop = true;\n      if (modal.type === 'popup') {\n        modal.$el.prevAll('.popup.modal-in').add(modal.$el.nextAll('.popup.modal-in')).each(function (popupEl) {\n          var popupInstance = popupEl.f7Modal;\n          if (!popupInstance) return;\n          if (popupInstance.params.closeByBackdropClick && popupInstance.params.backdrop && popupInstance.backdropEl === modal.backdropEl) {\n            needToHideBackdrop = false;\n          }\n        });\n      }\n      if (needToHideBackdrop) {\n        $backdropEl[animate ? 'removeClass' : 'addClass']('not-animated');\n        $backdropEl.removeClass('backdrop-in');\n      }\n    } // Modal\n\n    $el[animate ? 'removeClass' : 'addClass']('not-animated');\n    function transitionEnd() {\n      if ($el.hasClass('modal-out')) {\n        modal.onClosed();\n      } else if ($el.hasClass('modal-in')) {\n        modal.onOpened();\n      }\n    }\n    if (animate) {\n      $el.animationEnd(function () {\n        transitionEnd();\n      });\n      $el.transitionEnd(function () {\n        transitionEnd();\n      });\n      $el.removeClass('modal-in').addClass('modal-out'); // Emit close\n\n      modal.onClose();\n    } else {\n      $el.addClass('not-animated').removeClass('modal-in').addClass('modal-out'); // Emit close\n\n      modal.onClose();\n      modal.onClosed();\n    }\n    if (modal.type === 'dialog') {\n      clearDialogsQueue();\n    }\n    return modal;\n  };\n  _proto.destroy = function destroy() {\n    var modal = this;\n    if (modal.destroyed) return;\n    modal.emit(\"local::beforeDestroy modalBeforeDestroy \" + modal.type + \"BeforeDestroy\", modal);\n    if (modal.$el) {\n      modal.$el.trigger(\"modal:beforedestroy \" + modal.type.toLowerCase() + \":beforedestroy\");\n      if (modal.$el.length && modal.$el[0].f7Modal) {\n        delete modal.$el[0].f7Modal;\n      }\n    }\n    deleteProps(modal);\n    modal.destroyed = true;\n  };\n  return Modal;\n}(Framework7Class);\nexport default Modal;","map":null,"metadata":{},"sourceType":"module"}