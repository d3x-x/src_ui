{"ast":null,"code":"import React,{Component}from'react';import{connect}from'react-redux';import classNames from'classnames';import rpc from'utils/rpc';import{sendMessage}from'store/app/actions';import{commandsList,COMMANDS}from'./data';import Messages from'./messages';import Form from'./form';export const messagesRef=React.createRef();export const inputRef=React.createRef();class Chat extends Component{constructor(){super(...arguments);this.visibilityTimeout=void 0;this.state={visible:false,showMessages:false,showForm:false};this.keyHandler=ev=>{const{visible,showForm}=this.state;const{activeElement}=document;if(visible&&!showForm&&ev.keyCode===84&&(activeElement===null||activeElement===void 0?void 0:activeElement.tagName)!=='INPUT'){this.toggleMenu(true);}};}componentDidMount(){this.registerToEvents();this.scrollDown();this.showMessages(true);}componentDidUpdate(prevProps){const{messages}=this.props;if(prevProps.messages.length<messages.length){this.showMessages(!this.state.showForm);this.scrollDown();}}componentWillUnmount(){document.removeEventListener('keydown',this.keyHandler);mp.invoke('setTypingInChatState',false);}registerToEvents(){var _mp;const api={'chat:push':this.addMessage.bind(this),'chat:activate':this.toggleMenu.bind(this),'chat:show':status=>{this.setState(()=>({visible:status}));}};document.addEventListener('keydown',this.keyHandler);if(!((_mp=mp)===null||_mp===void 0?void 0:_mp.events))return;Object.entries(api).forEach(_ref=>{let[event,callback]=_ref;mp.events.add(event,callback);});window.chatAPI={push:api['chat:push'],activate:api['chat:activate'],show:api['chat:show']};}scrollDown(){if(!messagesRef.current)return;messagesRef.current.scrollTop=messagesRef.current.scrollHeight;}toggleMenu(status){const enabled=status!==null&&status!==void 0?status:!this.state.showForm;this.setState(()=>({showForm:enabled}));mp.invoke('focus',enabled);mp.invoke('setTypingInChatState',enabled);if(enabled)setTimeout(()=>{var _inputRef$current;return inputRef===null||inputRef===void 0?void 0:(_inputRef$current=inputRef.current)===null||_inputRef$current===void 0?void 0:_inputRef$current.focus();},10);this.showMessages(!enabled);}showMessages(autoHide){this.setState(()=>({showMessages:true}));if(this.visibilityTimeout)clearTimeout(this.visibilityTimeout);if(autoHide){this.visibilityTimeout=setTimeout(()=>this.setState(()=>({showMessages:false})),30000);}}async addMessage(text){const prepared=await rpc.callClient('PlayerFriends-PrepareString',text);this.props.sendMessage(prepared);}getMode(text){var _text$split$;const command=(_text$split$=text.split(' ')[0])===null||_text$split$===void 0?void 0:_text$split$.replace('/','');return commandsList[command]?command:null;}sendMessage(value){const text=value.trim();const mode=this.getMode(text);if(text[0]==='/'&&!mode){mp.invoke('command',text.substr(1));}else if(text.length){mp.invoke('chatMessage',JSON.stringify({mode:mode?commandsList[mode]:COMMANDS.SAY,text:text.replace(\"/\".concat(mode,\" \"),'')}));}this.toggleMenu();}render(){const{visible,showForm,showMessages}=this.state;return/*#__PURE__*/React.createElement(\"div\",{className:classNames('chat',{active:showForm}),style:{display:visible?'block':'none'}},/*#__PURE__*/React.createElement(Messages,{active:showMessages,items:this.props.messages}),showForm&&/*#__PURE__*/React.createElement(Form,{onSubmit:this.sendMessage.bind(this)}));}}const mapStateToProps=state=>({messages:state.app.chat});const mapDispatchToProps={sendMessage};export default connect(mapStateToProps,mapDispatchToProps)(Chat);","map":null,"metadata":{},"sourceType":"module"}