{"ast":null,"code":"import $ from '../../shared/dom7';\nvar TouchRipple = /*#__PURE__*/function () {\n  function TouchRipple(app, $el, x, y) {\n    var ripple = this;\n    if (!$el) return undefined;\n    var _$el$0$getBoundingCli = $el[0].getBoundingClientRect(),\n      left = _$el$0$getBoundingCli.left,\n      top = _$el$0$getBoundingCli.top,\n      width = _$el$0$getBoundingCli.width,\n      height = _$el$0$getBoundingCli.height;\n    var center = {\n      x: x - left,\n      y: y - top\n    };\n    var diameter = Math.max(Math.pow(Math.pow(height, 2) + Math.pow(width, 2), 0.5), 48);\n    var isInset = false;\n    var insetElements = app.params.touch.touchRippleInsetElements || '';\n    if (insetElements && $el.is(insetElements)) {\n      isInset = true;\n    }\n    if (isInset) {\n      diameter = Math.max(Math.min(width, height), 48);\n    }\n    if (!isInset && $el.css('overflow') === 'hidden') {\n      var distanceFromCenter = Math.pow(Math.pow(center.x - width / 2, 2) + Math.pow(center.y - height / 2, 2), 0.5);\n      var scale = (diameter / 2 + distanceFromCenter) / (diameter / 2);\n      ripple.rippleTransform = \"translate3d(0px, 0px, 0) scale(\" + scale + \")\";\n    } else {\n      // prettier-ignore\n      ripple.rippleTransform = \"translate3d(\" + (-center.x + width / 2) + \"px, \" + (-center.y + height / 2) + \"px, 0) scale(1)\";\n    }\n    if (isInset) {\n      $el.addClass('ripple-inset');\n    }\n    ripple.$rippleWaveEl = $(\"<div class=\\\"ripple-wave\\\" style=\\\"width: \" + diameter + \"px; height: \" + diameter + \"px; margin-top:-\" + diameter / 2 + \"px; margin-left:-\" + diameter / 2 + \"px; left:\" + center.x + \"px; top:\" + center.y + \"px; --f7-ripple-transform: \" + ripple.rippleTransform + \"\\\"></div>\");\n    $el.prepend(ripple.$rippleWaveEl);\n    ripple.$rippleWaveEl.animationEnd(function () {\n      if (!ripple.$rippleWaveEl) return;\n      if (ripple.$rippleWaveEl.hasClass('ripple-wave-out')) return;\n      ripple.$rippleWaveEl.addClass('ripple-wave-in');\n      if (ripple.shouldBeRemoved) {\n        ripple.out();\n      }\n    });\n    return ripple;\n  }\n  var _proto = TouchRipple.prototype;\n  _proto.destroy = function destroy() {\n    var ripple = this;\n    if (ripple.$rippleWaveEl) {\n      ripple.$rippleWaveEl.remove();\n    }\n    Object.keys(ripple).forEach(function (key) {\n      ripple[key] = null;\n      delete ripple[key];\n    });\n    ripple = null;\n  };\n  _proto.out = function out() {\n    var ripple = this;\n    var $rippleWaveEl = this.$rippleWaveEl;\n    clearTimeout(ripple.removeTimeout);\n    $rippleWaveEl.addClass('ripple-wave-out');\n    ripple.removeTimeout = setTimeout(function () {\n      ripple.destroy();\n    }, 300);\n    $rippleWaveEl.animationEnd(function () {\n      clearTimeout(ripple.removeTimeout);\n      ripple.destroy();\n    });\n  };\n  _proto.remove = function remove() {\n    var ripple = this;\n    if (ripple.shouldBeRemoved) return;\n    ripple.removeTimeout = setTimeout(function () {\n      ripple.destroy();\n    }, 400);\n    ripple.shouldBeRemoved = true;\n    if (ripple.$rippleWaveEl.hasClass('ripple-wave-in')) {\n      ripple.out();\n    }\n  };\n  return TouchRipple;\n}();\nexport { TouchRipple as default };","map":null,"metadata":{},"sourceType":"module"}