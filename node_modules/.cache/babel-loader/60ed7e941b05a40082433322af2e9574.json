{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { classNames, getExtraAttrs, getSlots } from '../shared/utils';\nimport { colorClasses } from '../shared/mixins';\nvar Appbar = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    children = props.children,\n    _props$inner = props.inner,\n    inner = _props$inner === void 0 ? true : _props$inner,\n    innerClass = props.innerClass,\n    innerClassName = props.innerClassName,\n    noShadow = props.noShadow,\n    noHairline = props.noHairline;\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current\n    };\n  });\n  var innerEl;\n  if (inner) {\n    innerEl = /*#__PURE__*/React.createElement(\"div\", {\n      className: classNames('appbar-inner', innerClass, innerClassName)\n    }, children);\n  }\n  var classes = classNames(className, 'appbar', {\n    'no-shadow': noShadow,\n    'no-hairline': noHairline\n  }, colorClasses(props));\n  var slots = getSlots(props);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    id: id,\n    style: style,\n    className: classes,\n    ref: elRef\n  }, extraAttrs), slots['before-inner'], innerEl || slots.default, slots['after-inner']);\n});\nAppbar.displayName = 'f7-appbar';\nexport default Appbar;","map":null,"metadata":{},"sourceType":"module"}