{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';\nimport { classNames, getExtraAttrs, emit } from '../shared/utils';\nimport { colorClasses } from '../shared/mixins';\nimport { f7ready, f7 } from '../shared/f7';\nimport { watchProp } from '../shared/watch-prop';\nimport { modalStateClasses } from '../shared/modal-state-classes';\nvar LoginScreen = /*#__PURE__*/forwardRef(function (props, ref) {\n  var _f7LoginScreen = useRef(null);\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    children = props.children,\n    opened = props.opened,\n    animate = props.animate,\n    containerEl = props.containerEl;\n  var extraAttrs = getExtraAttrs(props);\n  var isOpened = useRef(opened);\n  var isClosing = useRef(false);\n  var elRef = useRef(null);\n  var onOpen = function onOpen(instance) {\n    isOpened.current = true;\n    isClosing.current = false;\n    emit(props, 'loginScreenOpen', instance);\n  };\n  var onOpened = function onOpened(instance) {\n    emit(props, 'loginScreenOpened', instance);\n  };\n  var onClose = function onClose(instance) {\n    isOpened.current = false;\n    isClosing.current = true;\n    emit(props, 'loginScreenClose', instance);\n  };\n  var onClosed = function onClosed(instance) {\n    isClosing.current = false;\n    emit(props, 'loginScreenClosed', instance);\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current,\n      f7LoginScreen: function f7LoginScreen() {\n        return _f7LoginScreen.current;\n      }\n    };\n  }); // watch opened changes\n\n  watchProp(opened, function (value) {\n    if (!_f7LoginScreen.current) return;\n    if (value) {\n      _f7LoginScreen.current.open();\n    } else {\n      _f7LoginScreen.current.close();\n    }\n  });\n  var modalEvents = function modalEvents(method) {\n    if (!_f7LoginScreen.current) return;\n    _f7LoginScreen.current[method]('open', onOpen);\n    _f7LoginScreen.current[method]('opened', onOpened);\n    _f7LoginScreen.current[method]('close', onClose);\n    _f7LoginScreen.current[method]('closed', onClosed);\n  };\n  var onMount = function onMount() {\n    if (!elRef.current) return;\n    f7ready(function () {\n      var loginScreenParams = {\n        el: elRef.current\n      };\n      if ('animate' in props) loginScreenParams.animate = animate;\n      if ('containerEl' in props) loginScreenParams.containerEl = containerEl;\n      _f7LoginScreen.current = f7.loginScreen.create(loginScreenParams);\n      modalEvents('on');\n      if (opened) {\n        _f7LoginScreen.current.open(false);\n      }\n    });\n  };\n  var onDestroy = function onDestroy() {\n    if (_f7LoginScreen.current) {\n      _f7LoginScreen.current.destroy();\n    }\n    _f7LoginScreen.current = null;\n  };\n  useIsomorphicLayoutEffect(function () {\n    modalEvents('on');\n    return function () {\n      modalEvents('off');\n    };\n  });\n  useIsomorphicLayoutEffect(function () {\n    onMount();\n    return onDestroy;\n  }, []);\n  var classes = classNames(className, 'login-screen', modalStateClasses({\n    isOpened: isOpened,\n    isClosing: isClosing\n  }), colorClasses(props));\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    id: id,\n    style: style,\n    className: classes,\n    ref: elRef\n  }, extraAttrs), children);\n});\nLoginScreen.displayName = 'f7-login-screen';\nexport default LoginScreen;","map":null,"metadata":{},"sourceType":"module"}