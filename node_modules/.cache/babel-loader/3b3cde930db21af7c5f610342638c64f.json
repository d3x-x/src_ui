{"ast":null,"code":"/* eslint no-underscore-dangle: \"off\" */\nimport { f7events, f7routers } from './f7';\nimport { extend, getComponentId } from './utils';\nvar getChildrenArray = function getChildrenArray(el) {\n  var arr = [];\n  for (var i = 0; i < el.children.length; i += 1) {\n    arr.push(el.children[i]);\n  }\n  return arr;\n};\nvar hasSameChildren = function hasSameChildren(childrenBefore, childrenAfter) {\n  if (childrenBefore.length !== childrenAfter.length) return false;\n  var set = new Set([].concat(childrenBefore, childrenAfter));\n  if (set.size === childrenBefore.length) return true;\n  return false;\n};\nexport default {\n  proto: {\n    pageComponentLoader: function pageComponentLoader(_ref) {\n      var routerEl = _ref.routerEl,\n        component = _ref.component,\n        options = _ref.options,\n        resolve = _ref.resolve,\n        reject = _ref.reject;\n      var router = this;\n      var routerId = router.id;\n      var el = routerEl;\n      var viewRouter;\n      f7routers.views.forEach(function (data) {\n        if (data.el && data.el === routerEl || data.routerId && data.routerId === routerId) {\n          viewRouter = data;\n        }\n      });\n      if (!viewRouter) {\n        reject();\n        return;\n      }\n      var pageData = {\n        component: component,\n        id: getComponentId(),\n        props: extend({\n          f7route: options.route,\n          f7router: router\n        }, options.route.params, options.props || {})\n      };\n      var resolved;\n      var childrenBefore = getChildrenArray(el);\n      function onDidUpdate(componentRouterData) {\n        if (componentRouterData !== viewRouter || resolved) return;\n        var childrenAfter = getChildrenArray(el);\n        if (hasSameChildren(childrenBefore, childrenAfter)) return;\n        f7events.off('viewRouterDidUpdate', onDidUpdate);\n        var pageEl = el.children[el.children.length - 1];\n        pageData.el = pageEl;\n        resolve(pageEl);\n        resolved = true;\n      }\n      f7events.on('viewRouterDidUpdate', onDidUpdate);\n      viewRouter.pages.push(pageData);\n      viewRouter.setPages(viewRouter.pages);\n    },\n    removePage: function removePage($pageEl) {\n      if (!$pageEl) return;\n      var router = this;\n      var f7Page;\n      if ('length' in $pageEl && $pageEl[0]) f7Page = $pageEl[0].f7Page;else f7Page = $pageEl.f7Page;\n      if (f7Page && f7Page.route && f7Page.route.route && f7Page.route.route.keepAlive) {\n        router.app.$($pageEl).remove();\n        return;\n      }\n      var viewRouter;\n      f7routers.views.forEach(function (data) {\n        if (data.el && data.el === router.el) {\n          viewRouter = data;\n        }\n      });\n      var pageEl;\n      if ('length' in $pageEl) {\n        // Dom7\n        if ($pageEl.length === 0) return;\n        pageEl = $pageEl[0];\n      } else {\n        pageEl = $pageEl;\n      }\n      if (!pageEl) return;\n      var pageComponentFound;\n      viewRouter.pages.forEach(function (page, index) {\n        if (page.el === pageEl) {\n          pageComponentFound = true;\n          viewRouter.pages.splice(index, 1);\n          viewRouter.setPages(viewRouter.pages);\n        }\n      });\n      if (!pageComponentFound) {\n        pageEl.parentNode.removeChild(pageEl);\n      }\n    },\n    tabComponentLoader: function tabComponentLoader(_temp) {\n      var _ref2 = _temp === void 0 ? {} : _temp,\n        tabEl = _ref2.tabEl,\n        component = _ref2.component,\n        options = _ref2.options,\n        resolve = _ref2.resolve,\n        reject = _ref2.reject;\n      var router = this;\n      if (!tabEl) reject();\n      var tabRouter;\n      f7routers.tabs.forEach(function (tabData) {\n        if (tabData.el && tabData.el === tabEl) {\n          tabRouter = tabData;\n        }\n      });\n      if (!tabRouter) {\n        reject();\n        return;\n      }\n      var id = getComponentId();\n      var tabContent = {\n        id: id,\n        component: component,\n        props: extend({\n          f7route: options.route,\n          f7router: router\n        }, options.route.route && options.route.route.tab && options.route.route.tab.options && options.route.route.tab.options.props || {}, options.route.params, options.props || {})\n      };\n      var resolved;\n      function onDidUpdate(componentRouterData) {\n        if (componentRouterData !== tabRouter || resolved) return;\n        f7events.off('tabRouterDidUpdate', onDidUpdate);\n        var tabContentEl = tabEl.children[0];\n        resolve(tabContentEl);\n        resolved = true;\n      }\n      f7events.on('tabRouterDidUpdate', onDidUpdate);\n      tabRouter.setTabContent(tabContent);\n    },\n    removeTabContent: function removeTabContent(tabEl) {\n      if (!tabEl) return;\n      var tabRouter;\n      f7routers.tabs.forEach(function (tabData) {\n        if (tabData.el && tabData.el === tabEl) {\n          tabRouter = tabData;\n        }\n      });\n      if (!tabRouter) {\n        tabEl.innerHTML = ''; // eslint-disable-line\n\n        return;\n      }\n      tabRouter.setTabContent(null);\n    },\n    modalComponentLoader: function modalComponentLoader(_temp2) {\n      var _ref3 = _temp2 === void 0 ? {} : _temp2,\n        component = _ref3.component,\n        options = _ref3.options,\n        resolve = _ref3.resolve,\n        reject = _ref3.reject;\n      var router = this;\n      var modalsRouter = f7routers.modals;\n      if (!modalsRouter) {\n        reject();\n        return;\n      }\n      var modalData = {\n        component: component,\n        id: getComponentId(),\n        props: extend({\n          f7route: options.route,\n          f7router: router\n        }, options.route.params, options.props || {})\n      };\n      var resolved;\n      function onDidUpdate() {\n        if (resolved) return;\n        f7events.off('modalsRouterDidUpdate', onDidUpdate);\n        var modalEl = modalsRouter.el.children[modalsRouter.el.children.length - 1];\n        modalData.el = modalEl;\n        resolve(modalEl);\n        resolved = true;\n      }\n      f7events.on('modalsRouterDidUpdate', onDidUpdate);\n      modalsRouter.modals.push(modalData);\n      modalsRouter.setModals(modalsRouter.modals);\n    },\n    removeModal: function removeModal(modalEl) {\n      var modalsRouter = f7routers.modals;\n      if (!modalsRouter) return;\n      var modalDataToRemove;\n      modalsRouter.modals.forEach(function (modalData) {\n        if (modalData.el === modalEl) modalDataToRemove = modalData;\n      });\n      modalsRouter.modals.splice(modalsRouter.modals.indexOf(modalDataToRemove), 1);\n      modalsRouter.setModals(modalsRouter.modals);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}