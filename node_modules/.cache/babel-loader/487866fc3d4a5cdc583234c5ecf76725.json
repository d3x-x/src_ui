{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { classNames, getExtraAttrs, extend, isStringProp, emit } from '../shared/utils';\nimport { colorClasses, actionsAttrs, actionsClasses, routerAttrs, routerClasses } from '../shared/mixins';\nimport { useTooltip } from '../shared/use-tooltip';\nimport { useIcon } from '../shared/use-icon';\nimport { useRouteProps } from '../shared/use-route-props';\nimport Preloader from './preloader';\nvar Button = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    children = props.children,\n    text = props.text,\n    type = props.type,\n    _props$href = props.href,\n    href = _props$href === void 0 ? '#' : _props$href,\n    target = props.target,\n    tabLink = props.tabLink,\n    tabLinkActive = props.tabLinkActive,\n    round = props.round,\n    roundIos = props.roundIos,\n    roundAurora = props.roundAurora,\n    roundMd = props.roundMd,\n    fill = props.fill,\n    fillIos = props.fillIos,\n    fillAurora = props.fillAurora,\n    fillMd = props.fillMd,\n    large = props.large,\n    largeIos = props.largeIos,\n    largeAurora = props.largeAurora,\n    largeMd = props.largeMd,\n    small = props.small,\n    smallIos = props.smallIos,\n    smallAurora = props.smallAurora,\n    smallMd = props.smallMd,\n    raised = props.raised,\n    raisedIos = props.raisedIos,\n    raisedAurora = props.raisedAurora,\n    raisedMd = props.raisedMd,\n    active = props.active,\n    outline = props.outline,\n    outlineIos = props.outlineIos,\n    outlineAurora = props.outlineAurora,\n    outlineMd = props.outlineMd,\n    disabled = props.disabled,\n    preloader = props.preloader,\n    preloaderSize = props.preloaderSize,\n    preloaderColor = props.preloaderColor,\n    loading = props.loading;\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  var onClick = function onClick(e) {\n    emit(props, 'click', e);\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current\n    };\n  });\n  useTooltip(elRef, props);\n  useRouteProps(elRef, props);\n  var getClasses = function getClasses() {\n    return classNames(className, 'button', {\n      'tab-link': tabLink || tabLink === '',\n      'tab-link-active': tabLinkActive,\n      'button-round': round,\n      'button-round-ios': roundIos,\n      'button-round-aurora': roundAurora,\n      'button-round-md': roundMd,\n      'button-fill': fill,\n      'button-fill-ios': fillIos,\n      'button-fill-aurora': fillAurora,\n      'button-fill-md': fillMd,\n      'button-large': large,\n      'button-large-ios': largeIos,\n      'button-large-aurora': largeAurora,\n      'button-large-md': largeMd,\n      'button-small': small,\n      'button-small-ios': smallIos,\n      'button-small-aurora': smallAurora,\n      'button-small-md': smallMd,\n      'button-raised': raised,\n      'button-raised-ios': raisedIos,\n      'button-raised-aurora': raisedAurora,\n      'button-raised-md': raisedMd,\n      'button-active': active,\n      'button-outline': outline,\n      'button-outline-ios': outlineIos,\n      'button-outline-aurora': outlineAurora,\n      'button-outline-md': outlineMd,\n      'button-preloader': preloader,\n      'button-loading': loading,\n      disabled: disabled\n    }, colorClasses(props), routerClasses(props), actionsClasses(props));\n  };\n  var ButtonTag = type === 'submit' || type === 'reset' || type === 'button' ? 'button' : 'a';\n  var getAttrs = function getAttrs() {\n    var hrefComputed = href;\n    if (href === true) hrefComputed = '#';\n    if (href === false || ButtonTag === 'button') hrefComputed = undefined; // no href attribute\n\n    return extend({\n      href: hrefComputed,\n      target: target,\n      type: type,\n      'data-tab': isStringProp(tabLink) && tabLink || undefined\n    }, routerAttrs(props), actionsAttrs(props));\n  };\n  var iconEl = useIcon(props);\n  var textEl;\n  if (text) {\n    textEl = /*#__PURE__*/React.createElement(\"span\", null, text);\n  }\n  if (preloader) {\n    return /*#__PURE__*/React.createElement(ButtonTag, _extends({\n      ref: elRef,\n      id: id,\n      style: style,\n      className: getClasses()\n    }, getAttrs(), extraAttrs, {\n      onClick: onClick\n    }), /*#__PURE__*/React.createElement(Preloader, {\n      size: preloaderSize,\n      color: preloaderColor\n    }), /*#__PURE__*/React.createElement(\"span\", null, iconEl, textEl, children));\n  }\n  return /*#__PURE__*/React.createElement(ButtonTag, _extends({\n    ref: elRef,\n    id: id,\n    style: style,\n    className: getClasses()\n  }, getAttrs(), extraAttrs, {\n    onClick: onClick\n  }), iconEl, textEl, children);\n});\nButton.displayName = 'f7-button';\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}