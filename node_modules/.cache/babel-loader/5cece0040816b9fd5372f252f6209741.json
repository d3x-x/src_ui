{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { classNames, getExtraAttrs, extend } from '../shared/utils';\nimport { colorClasses } from '../shared/mixins';\nimport { useTheme } from '../shared/use-theme';\nvar Preloader = /*#__PURE__*/forwardRef(function (props, ref) {\n  var theme = useTheme();\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    size = props.size;\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current\n    };\n  });\n  var preloaderStyle = {};\n  var sizeComputed = size;\n  if (sizeComputed && typeof sizeComputed === 'string' && sizeComputed.indexOf('px') >= 0) {\n    sizeComputed = sizeComputed.replace('px', '');\n  }\n  if (sizeComputed) {\n    preloaderStyle.width = sizeComputed + \"px\";\n    preloaderStyle.height = sizeComputed + \"px\";\n    preloaderStyle['--f7-preloader-size'] = sizeComputed + \"px\";\n  }\n  if (style) extend(preloaderStyle, style || {});\n  var innerEl;\n  if (theme && theme.md) {\n    innerEl = /*#__PURE__*/React.createElement(\"span\", {\n      className: \"preloader-inner\"\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      viewBox: \"0 0 36 36\"\n    }, /*#__PURE__*/React.createElement(\"circle\", {\n      cx: \"18\",\n      cy: \"18\",\n      r: \"16\"\n    })));\n  } else if (theme && theme.ios) {\n    innerEl = /*#__PURE__*/React.createElement(\"span\", {\n      className: \"preloader-inner\"\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"preloader-inner-line\"\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"preloader-inner-line\"\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"preloader-inner-line\"\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"preloader-inner-line\"\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"preloader-inner-line\"\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"preloader-inner-line\"\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"preloader-inner-line\"\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"preloader-inner-line\"\n    }));\n  } else if (theme && theme.aurora) {\n    innerEl = /*#__PURE__*/React.createElement(\"span\", {\n      className: \"preloader-inner\"\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"preloader-inner-circle\"\n    }));\n  } else if (!theme) {\n    innerEl = /*#__PURE__*/React.createElement(\"span\", {\n      className: \"preloader-inner\"\n    });\n  }\n  var classes = classNames(className, 'preloader', colorClasses(props));\n  return /*#__PURE__*/React.createElement(\"span\", _extends({\n    id: id,\n    style: preloaderStyle,\n    className: classes,\n    ref: elRef\n  }, extraAttrs), innerEl);\n});\nPreloader.displayName = 'f7-preloader';\nexport default Preloader;","map":null,"metadata":{},"sourceType":"module"}