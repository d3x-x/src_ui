{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';\nimport CardHeader from './card-header';\nimport CardContent from './card-content';\nimport CardFooter from './card-footer';\nimport { classNames, getExtraAttrs, getSlots, emit } from '../shared/utils';\nimport { colorClasses } from '../shared/mixins';\nimport { f7, f7ready } from '../shared/f7';\nimport { watchProp } from '../shared/watch-prop';\nvar Card = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    title = props.title,\n    content = props.content,\n    footer = props.footer,\n    padding = props.padding,\n    outline = props.outline,\n    expandable = props.expandable,\n    expandableAnimateWidth = props.expandableAnimateWidth,\n    expandableOpened = props.expandableOpened,\n    animate = props.animate,\n    hideNavbarOnOpen = props.hideNavbarOnOpen,\n    hideToolbarOnOpen = props.hideToolbarOnOpen,\n    hideStatusbarOnOpen = props.hideStatusbarOnOpen,\n    scrollableEl = props.scrollableEl,\n    swipeToClose = props.swipeToClose,\n    closeByBackdropClick = props.closeByBackdropClick,\n    backdrop = props.backdrop,\n    backdropEl = props.backdropEl,\n    noShadow = props.noShadow,\n    noBorder = props.noBorder;\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  var open = function open() {\n    if (!elRef.current) return;\n    f7.card.open(elRef.current);\n  };\n  var close = function close() {\n    if (!elRef.current) return;\n    f7.card.close(elRef.current);\n  };\n  var onBeforeOpen = function onBeforeOpen(el, prevent) {\n    if (elRef.current !== el) return;\n    emit(props, 'cardBeforeOpen', el, prevent);\n  };\n  var onOpen = function onOpen(el) {\n    if (elRef.current !== el) return;\n    emit(props, 'cardOpen', el);\n  };\n  var onOpened = function onOpened(el, pageEl) {\n    if (elRef.current !== el) return;\n    emit(props, 'cardOpened', el, pageEl);\n  };\n  var onClose = function onClose(el) {\n    if (elRef.current !== el) return;\n    emit(props, 'cardClose', el);\n  };\n  var onClosed = function onClosed(el, pageEl) {\n    if (elRef.current !== el) return;\n    emit(props, 'cardClosed', el, pageEl);\n  };\n  var attachEvents = function attachEvents() {\n    if (!expandable || !elRef.current) return;\n    f7ready(function () {\n      f7.on('cardBeforeOpen', onBeforeOpen);\n      f7.on('cardOpen', onOpen);\n      f7.on('cardOpened', onOpened);\n      f7.on('cardClose', onClose);\n      f7.on('cardClosed', onClosed);\n    });\n  };\n  var detachEvents = function detachEvents() {\n    f7.off('cardBeforeOpen', onBeforeOpen);\n    f7.off('cardOpen', onOpen);\n    f7.off('cardOpened', onOpened);\n    f7.off('cardClose', onClose);\n    f7.off('cardClosed', onClosed);\n  };\n  var onMount = function onMount() {\n    if (!expandable || !elRef.current) return;\n    f7ready(function () {\n      if (expandable && expandableOpened) {\n        f7.card.open(elRef.current, false);\n      }\n    });\n  };\n  useIsomorphicLayoutEffect(function () {\n    onMount();\n  }, []);\n  useIsomorphicLayoutEffect(function () {\n    attachEvents();\n    return detachEvents;\n  });\n  watchProp(expandableOpened, function (value) {\n    if (value) {\n      open();\n    } else {\n      close();\n    }\n  });\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current,\n      open: open,\n      close: close\n    };\n  });\n  var headerEl;\n  var contentEl;\n  var footerEl;\n  var classes = classNames(className, 'card', {\n    'card-outline': outline,\n    'card-expandable': expandable,\n    'card-expandable-animate-width': expandableAnimateWidth,\n    'no-shadow': noShadow,\n    'no-border': noBorder\n  }, colorClasses(props));\n  var slots = getSlots(props);\n  if (title || slots.header) {\n    headerEl = /*#__PURE__*/React.createElement(CardHeader, null, title, slots.header);\n  }\n  if (content || slots.content) {\n    contentEl = /*#__PURE__*/React.createElement(CardContent, {\n      padding: padding\n    }, content, slots.content);\n  }\n  if (footer || slots.footer) {\n    footerEl = /*#__PURE__*/React.createElement(CardFooter, null, footer, slots.footer);\n  }\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    id: id,\n    style: style,\n    className: classes,\n    \"data-animate\": typeof animate === 'undefined' ? animate : animate.toString(),\n    \"data-hide-navbar-on-open\": typeof hideNavbarOnOpen === 'undefined' ? hideNavbarOnOpen : hideNavbarOnOpen.toString(),\n    \"data-hide-toolbar-on-open\": typeof hideToolbarOnOpen === 'undefined' ? hideToolbarOnOpen : hideToolbarOnOpen.toString(),\n    \"data-hide-statusbar-on-open\": typeof hideStatusbarOnOpen === 'undefined' ? hideStatusbarOnOpen : hideStatusbarOnOpen.toString(),\n    \"data-scrollable-el\": scrollableEl,\n    \"data-swipe-to-close\": typeof swipeToClose === 'undefined' ? swipeToClose : swipeToClose.toString(),\n    \"data-close-by-backdrop-click\": typeof closeByBackdropClick === 'undefined' ? closeByBackdropClick : closeByBackdropClick.toString(),\n    \"data-backdrop\": typeof backdrop === 'undefined' ? backdrop : backdrop.toString(),\n    \"data-backdrop-el\": backdropEl,\n    ref: elRef\n  }, extraAttrs), headerEl, contentEl, footerEl, slots.default);\n});\nCard.displayName = 'f7-card';\nexport default Card;","map":null,"metadata":{},"sourceType":"module"}