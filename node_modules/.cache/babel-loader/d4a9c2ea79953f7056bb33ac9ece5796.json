{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useRef, useImperativeHandle } from 'react';\nimport { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';\nimport { classNames, getExtraAttrs, getSlots, emit } from '../shared/utils';\nimport { colorClasses, actionsAttrs, actionsClasses, routerAttrs, routerClasses } from '../shared/mixins';\nimport { useIcon } from '../shared/use-icon';\nimport { f7ready, f7 } from '../shared/f7';\nvar TreeviewItem = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    toggle = props.toggle,\n    itemToggle = props.itemToggle,\n    selectable = props.selectable,\n    selected = props.selected,\n    opened = props.opened,\n    label = props.label,\n    loadChildren = props.loadChildren,\n    link = props.link;\n  var extraAttrs = getExtraAttrs(props);\n  var elRef = useRef(null);\n  var onClick = function onClick(event) {\n    emit(props, 'click', event);\n  };\n  var onOpen = function onOpen(el) {\n    if (elRef.current !== el) return;\n    emit(props, 'treeviewOpen', el);\n  };\n  var onClose = function onClose(el) {\n    if (elRef.current !== el) return;\n    emit(props, 'treeviewClose', el);\n  };\n  var onLoadChildren = function onLoadChildren(el, done) {\n    if (elRef.current !== el) return;\n    emit(props, 'treeviewLoadChildren', el, done);\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current\n    };\n  });\n  var attachEvents = function attachEvents() {\n    if (!elRef.current) return;\n    f7ready(function () {\n      f7.on('treeviewOpen', onOpen);\n      f7.on('treeviewClose', onClose);\n      f7.on('treeviewLoadChildren', onLoadChildren);\n    });\n  };\n  var detachEvents = function detachEvents() {\n    if (!f7) return;\n    f7.off('treeviewOpen', onOpen);\n    f7.off('treeviewClose', onClose);\n    f7.off('treeviewLoadChildren', onLoadChildren);\n  };\n  useIsomorphicLayoutEffect(function () {\n    attachEvents();\n    return detachEvents;\n  });\n  var slots = getSlots(props);\n  var hasChildren = slots.default && slots.default.length || slots.children && slots.children.length || slots['children-start'] && slots['children-start'].length;\n  var needToggle = typeof toggle === 'undefined' ? hasChildren : toggle;\n  var iconEl = useIcon(props);\n  var TreeviewRootTag = link || link === '' ? 'a' : 'div';\n  var classes = classNames(className, 'treeview-item', {\n    'treeview-item-opened': opened,\n    'treeview-load-children': loadChildren\n  }, colorClasses(props));\n  var itemRootClasses = classNames('treeview-item-root', {\n    'treeview-item-selectable': selectable,\n    'treeview-item-selected': selected,\n    'treeview-item-toggle': itemToggle\n  }, routerClasses(props), actionsClasses(props));\n  var href = link;\n  if (link === true) href = '#';\n  if (link === false) href = undefined; // no href attribute\n\n  var itemRootAttrs = _extends({\n    href: href\n  }, routerAttrs(props), actionsAttrs(props));\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    id: id,\n    style: style,\n    className: classes,\n    ref: elRef\n  }, extraAttrs), /*#__PURE__*/React.createElement(TreeviewRootTag, _extends({\n    onClick: onClick,\n    className: itemRootClasses\n  }, itemRootAttrs), slots['root-start'], needToggle && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"treeview-toggle\"\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"treeview-item-content\"\n  }, slots['content-start'], iconEl, slots.media, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"treeview-item-label\"\n  }, slots['label-start'], label, slots.label), slots.content, slots['content-end']), slots.root, slots['root-end']), hasChildren && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"treeview-item-children\"\n  }, slots['children-start'], slots.default, slots.children));\n});\nTreeviewItem.displayName = 'f7-treeview-item';\nexport default TreeviewItem;","map":null,"metadata":{},"sourceType":"module"}