{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/* eslint-disable no-underscore-dangle */\nimport { extend } from '../../shared/utils';\nfunction createStore(storeParams) {\n  if (storeParams === void 0) {\n    storeParams = {};\n  }\n  var store = {\n    __store: true\n  };\n  var originalState = _extends({}, storeParams.state || {});\n  var actions = _extends({}, storeParams.actions || {});\n  var getters = _extends({}, storeParams.getters || {});\n  var state = extend({}, originalState);\n  var propsQueue = [];\n  var gettersDependencies = {};\n  var gettersCallbacks = {};\n  Object.keys(getters).forEach(function (getterKey) {\n    gettersDependencies[getterKey] = [];\n    gettersCallbacks[getterKey] = [];\n  });\n  var getGetterValue = function getGetterValue(getterKey) {\n    return getters[getterKey]({\n      state: store.state\n    });\n  };\n  var addGetterDependencies = function addGetterDependencies(getterKey, deps) {\n    if (!gettersDependencies[getterKey]) gettersDependencies[getterKey] = [];\n    deps.forEach(function (dep) {\n      if (gettersDependencies[getterKey].indexOf(dep) < 0) {\n        gettersDependencies[getterKey].push(dep);\n      }\n    });\n  };\n  var addGetterCallback = function addGetterCallback(getterKey, callback) {\n    if (!gettersCallbacks[getterKey]) gettersCallbacks[getterKey] = [];\n    gettersCallbacks[getterKey].push(callback);\n  };\n  var runGetterCallbacks = function runGetterCallbacks(stateKey) {\n    var keys = Object.keys(gettersDependencies).filter(function (getterKey) {\n      return gettersDependencies[getterKey].indexOf(stateKey) >= 0;\n    });\n    keys.forEach(function (getterKey) {\n      if (!gettersCallbacks[getterKey] || !gettersCallbacks[getterKey].length) return;\n      gettersCallbacks[getterKey].forEach(function (callback) {\n        callback(getGetterValue(getterKey));\n      });\n    });\n  };\n  var removeGetterCallback = function removeGetterCallback(callback) {\n    Object.keys(gettersCallbacks).forEach(function (stateKey) {\n      var callbacks = gettersCallbacks[stateKey];\n      if (callbacks.indexOf(callback) >= 0) {\n        callbacks.splice(callbacks.indexOf(callback), 1);\n      }\n    });\n  }; // eslint-disable-next-line\n\n  store.__removeCallback = function (callback) {\n    removeGetterCallback(callback);\n  };\n  var getterValue = function getterValue(getterKey, addCallback) {\n    if (addCallback === void 0) {\n      addCallback = true;\n    }\n    if (getterKey === 'constructor') return undefined;\n    propsQueue = [];\n    var value = getGetterValue(getterKey);\n    addGetterDependencies(getterKey, propsQueue);\n    var onUpdated = function onUpdated(callback) {\n      addGetterCallback(getterKey, callback);\n    };\n    var obj = {\n      value: value,\n      onUpdated: onUpdated\n    };\n    if (!addCallback) {\n      return obj;\n    }\n    var callback = function callback(v) {\n      obj.value = v;\n    };\n    obj.__callback = callback;\n    addGetterCallback(getterKey, callback); // eslint-disable-next-line\n\n    return obj;\n  };\n  store.state = new Proxy(state, {\n    set: function set(target, prop, value) {\n      target[prop] = value;\n      runGetterCallbacks(prop);\n      return true;\n    },\n    get: function get(target, prop) {\n      propsQueue.push(prop);\n      return target[prop];\n    }\n  });\n  store.getters = new Proxy(getters, {\n    set: function set() {\n      return false;\n    },\n    get: function get(target, prop) {\n      if (!target[prop]) {\n        return undefined;\n      }\n      return getterValue(prop, true);\n    }\n  });\n  store._gettersPlain = new Proxy(getters, {\n    set: function set() {\n      return false;\n    },\n    get: function get(target, prop) {\n      if (!target[prop]) {\n        return undefined;\n      }\n      return getterValue(prop, false);\n    }\n  });\n  store.dispatch = function (actionName, data) {\n    return new Promise(function (resolve, reject) {\n      if (!actions[actionName]) {\n        reject();\n        throw new Error(\"Framework7: Store action \\\"\" + actionName + \"\\\" is not found\");\n      }\n      var result = actions[actionName]({\n        state: store.state,\n        dispatch: store.dispatch\n      }, data);\n      resolve(result);\n    });\n  };\n  return store;\n}\nexport default createStore;","map":null,"metadata":{},"sourceType":"module"}