{"ast":null,"code":"import $ from '../../shared/dom7';\nimport { bindMethods } from '../../shared/utils';\nimport { getSupport } from '../../shared/get-support';\nvar Navbar = {\n  size: function size(el) {\n    var app = this;\n    var $el = $(el);\n    if ($el.hasClass('navbars')) {\n      $el = $el.children('.navbar').each(function (navbarEl) {\n        app.navbar.size(navbarEl);\n      });\n      return;\n    }\n    var $innerEl = $el.children('.navbar-inner');\n    if (!$innerEl.length) return;\n    var needCenterTitle = $innerEl.hasClass('navbar-inner-centered-title') || app.params.navbar[app.theme + \"CenterTitle\"];\n    var needLeftTitle = app.theme === 'ios' && !app.params.navbar[app.theme + \"CenterTitle\"];\n    if (!needCenterTitle && !needLeftTitle) return;\n    if ($el.hasClass('stacked') || $el.parents('.stacked').length > 0 || $el.parents('.tab:not(.tab-active)').length > 0 || $el.parents('.popup:not(.modal-in)').length > 0) {\n      return;\n    }\n    if (app.theme !== 'ios' && app.params.navbar[app.theme + \"CenterTitle\"]) {\n      $innerEl.addClass('navbar-inner-centered-title');\n    }\n    if (app.theme === 'ios' && !app.params.navbar.iosCenterTitle) {\n      $innerEl.addClass('navbar-inner-left-title');\n    }\n    var $viewEl = $el.parents('.view').eq(0);\n    var left = app.rtl ? $innerEl.children('.right') : $innerEl.children('.left');\n    var right = app.rtl ? $innerEl.children('.left') : $innerEl.children('.right');\n    var title = $innerEl.children('.title');\n    var subnavbar = $innerEl.children('.subnavbar');\n    var noLeft = left.length === 0;\n    var noRight = right.length === 0;\n    var leftWidth = noLeft ? 0 : left.outerWidth(true);\n    var rightWidth = noRight ? 0 : right.outerWidth(true);\n    var titleWidth = title.outerWidth(true);\n    var navbarStyles = $innerEl.styles();\n    var navbarWidth = $innerEl[0].offsetWidth;\n    var navbarInnerWidth = navbarWidth - parseInt(navbarStyles.paddingLeft, 10) - parseInt(navbarStyles.paddingRight, 10);\n    var isPrevious = $el.hasClass('navbar-previous');\n    var sliding = $innerEl.hasClass('sliding');\n    var router;\n    var dynamicNavbar;\n    if ($viewEl.length > 0 && $viewEl[0].f7View) {\n      router = $viewEl[0].f7View.router;\n      dynamicNavbar = router && router.dynamicNavbar;\n    }\n    var currLeft;\n    var diff;\n    if (noRight) {\n      currLeft = navbarInnerWidth - titleWidth;\n    }\n    if (noLeft) {\n      currLeft = 0;\n    }\n    if (!noLeft && !noRight) {\n      currLeft = (navbarInnerWidth - rightWidth - titleWidth + leftWidth) / 2;\n    }\n    var requiredLeft = (navbarInnerWidth - titleWidth) / 2;\n    if (navbarInnerWidth - leftWidth - rightWidth > titleWidth) {\n      if (requiredLeft < leftWidth) {\n        requiredLeft = leftWidth;\n      }\n      if (requiredLeft + titleWidth > navbarInnerWidth - rightWidth) {\n        requiredLeft = navbarInnerWidth - rightWidth - titleWidth;\n      }\n      diff = requiredLeft - currLeft;\n    } else {\n      diff = 0;\n    } // RTL inverter\n\n    var inverter = app.rtl ? -1 : 1;\n    if (dynamicNavbar && app.theme === 'ios') {\n      if (title.hasClass('sliding') || title.length > 0 && sliding) {\n        var titleLeftOffset = -(currLeft + diff) * inverter;\n        var titleRightOffset = (navbarInnerWidth - currLeft - diff - titleWidth) * inverter;\n        if (isPrevious) {\n          if (router && router.params.iosAnimateNavbarBackIcon) {\n            var activeNavbarBackLink = $el.parent().find('.navbar-current').children('.left.sliding').find('.back .icon ~ span');\n            if (activeNavbarBackLink.length > 0) {\n              titleLeftOffset += activeNavbarBackLink[0].offsetLeft;\n            }\n          }\n        }\n        title[0].f7NavbarLeftOffset = titleLeftOffset;\n        title[0].f7NavbarRightOffset = titleRightOffset;\n      }\n      if (!noLeft && (left.hasClass('sliding') || sliding)) {\n        if (app.rtl) {\n          left[0].f7NavbarLeftOffset = -(navbarInnerWidth - left[0].offsetWidth) / 2 * inverter;\n          left[0].f7NavbarRightOffset = leftWidth * inverter;\n        } else {\n          left[0].f7NavbarLeftOffset = -leftWidth;\n          left[0].f7NavbarRightOffset = (navbarInnerWidth - left[0].offsetWidth) / 2;\n          if (router && router.params.iosAnimateNavbarBackIcon && left.find('.back .icon').length > 0) {\n            if (left.find('.back .icon ~ span').length) {\n              var leftOffset = left[0].f7NavbarLeftOffset;\n              var rightOffset = left[0].f7NavbarRightOffset;\n              left[0].f7NavbarLeftOffset = 0;\n              left[0].f7NavbarRightOffset = 0;\n              left.find('.back .icon ~ span')[0].f7NavbarLeftOffset = leftOffset;\n              left.find('.back .icon ~ span')[0].f7NavbarRightOffset = rightOffset - left.find('.back .icon')[0].offsetWidth;\n            }\n          }\n        }\n      }\n      if (!noRight && (right.hasClass('sliding') || sliding)) {\n        if (app.rtl) {\n          right[0].f7NavbarLeftOffset = -rightWidth * inverter;\n          right[0].f7NavbarRightOffset = (navbarInnerWidth - right[0].offsetWidth) / 2 * inverter;\n        } else {\n          right[0].f7NavbarLeftOffset = -(navbarInnerWidth - right[0].offsetWidth) / 2;\n          right[0].f7NavbarRightOffset = rightWidth;\n        }\n      }\n      if (subnavbar.length && (subnavbar.hasClass('sliding') || sliding)) {\n        subnavbar[0].f7NavbarLeftOffset = app.rtl ? subnavbar[0].offsetWidth : -subnavbar[0].offsetWidth;\n        subnavbar[0].f7NavbarRightOffset = -subnavbar[0].f7NavbarLeftOffset;\n      }\n    } // Center title\n\n    if (needCenterTitle) {\n      var titleLeft = diff;\n      if (app.rtl && noLeft && noRight && title.length > 0) titleLeft = -titleLeft;\n      title.css({\n        left: titleLeft + \"px\"\n      });\n    }\n  },\n  hide: function hide(el, animate, hideStatusbar, hideOnlyCurrent) {\n    if (animate === void 0) {\n      animate = true;\n    }\n    if (hideStatusbar === void 0) {\n      hideStatusbar = false;\n    }\n    if (hideOnlyCurrent === void 0) {\n      hideOnlyCurrent = false;\n    }\n    var app = this;\n    var $el = $(el);\n    var isDynamic = $el.hasClass('navbar') && $el.parent('.navbars').length && !hideOnlyCurrent;\n    if (isDynamic) $el = $el.parents('.navbars');\n    if (!$el.length) return;\n    if ($el.hasClass('navbar-hidden')) return;\n    var className = \"navbar-hidden\" + (animate ? ' navbar-transitioning' : '');\n    var currentIsLarge = isDynamic ? $el.find('.navbar-current .title-large').length : $el.find('.title-large').length;\n    if (currentIsLarge) {\n      className += ' navbar-large-hidden';\n    }\n    if (hideStatusbar) {\n      className += ' navbar-hidden-statusbar';\n    }\n    $el.transitionEnd(function () {\n      $el.removeClass('navbar-transitioning');\n    });\n    $el.addClass(className);\n    if (isDynamic) {\n      $el.children('.navbar').each(function (subEl) {\n        $(subEl).trigger('navbar:hide');\n        app.emit('navbarHide', subEl);\n      });\n    } else {\n      $el.trigger('navbar:hide');\n      app.emit('navbarHide', $el[0]);\n    }\n  },\n  show: function show(el, animate, hideOnlyCurrent) {\n    if (el === void 0) {\n      el = '.navbar-hidden';\n    }\n    if (animate === void 0) {\n      animate = true;\n    }\n    if (hideOnlyCurrent === void 0) {\n      hideOnlyCurrent = false;\n    }\n    var app = this;\n    var $el = $(el);\n    var isDynamic = $el.hasClass('navbar') && $el.parent('.navbars').length && !hideOnlyCurrent;\n    if (isDynamic) $el = $el.parents('.navbars');\n    if (!$el.length) return;\n    if (!$el.hasClass('navbar-hidden')) return;\n    if (animate) {\n      $el.addClass('navbar-transitioning');\n      $el.transitionEnd(function () {\n        $el.removeClass('navbar-transitioning');\n      });\n    }\n    $el.removeClass('navbar-hidden navbar-large-hidden navbar-hidden-statusbar');\n    if (isDynamic) {\n      $el.children('.navbar').each(function (subEl) {\n        $(subEl).trigger('navbar:show');\n        app.emit('navbarShow', subEl);\n      });\n    } else {\n      $el.trigger('navbar:show');\n      app.emit('navbarShow', $el[0]);\n    }\n  },\n  getElByPage: function getElByPage(page) {\n    var $pageEl;\n    var $navbarEl;\n    var pageData;\n    if (page.$navbarEl || page.$el) {\n      pageData = page;\n      $pageEl = page.$el;\n    } else {\n      $pageEl = $(page);\n      if ($pageEl.length > 0) pageData = $pageEl[0].f7Page;\n    }\n    if (pageData && pageData.$navbarEl && pageData.$navbarEl.length > 0) {\n      $navbarEl = pageData.$navbarEl;\n    } else if ($pageEl) {\n      $navbarEl = $pageEl.children('.navbar');\n    }\n    if (!$navbarEl || $navbarEl && $navbarEl.length === 0) return undefined;\n    return $navbarEl[0];\n  },\n  getPageByEl: function getPageByEl(navbarEl) {\n    var $navbarEl = $(navbarEl);\n    if ($navbarEl.parents('.page').length) {\n      return $navbarEl.parents('.page')[0];\n    }\n    var pageEl;\n    $navbarEl.parents('.view').find('.page').each(function (el) {\n      if (el && el.f7Page && el.f7Page.navbarEl && $navbarEl[0] === el.f7Page.navbarEl) {\n        pageEl = el;\n      }\n    });\n    return pageEl;\n  },\n  collapseLargeTitle: function collapseLargeTitle(navbarEl) {\n    var app = this;\n    var $navbarEl = $(navbarEl);\n    if ($navbarEl.hasClass('navbars')) {\n      $navbarEl = $navbarEl.find('.navbar');\n      if ($navbarEl.length > 1) {\n        $navbarEl = $(navbarEl).find('.navbar-large.navbar-current');\n      }\n      if ($navbarEl.length > 1 || !$navbarEl.length) {\n        return;\n      }\n    }\n    var $pageEl = $(app.navbar.getPageByEl($navbarEl));\n    $navbarEl.addClass('navbar-large-collapsed');\n    $pageEl.eq(0).addClass('page-with-navbar-large-collapsed').trigger('page:navbarlargecollapsed');\n    app.emit('pageNavbarLargeCollapsed', $pageEl[0]);\n    $navbarEl.trigger('navbar:collapse');\n    app.emit('navbarCollapse', $navbarEl[0]);\n  },\n  expandLargeTitle: function expandLargeTitle(navbarEl) {\n    var app = this;\n    var $navbarEl = $(navbarEl);\n    if ($navbarEl.hasClass('navbars')) {\n      $navbarEl = $navbarEl.find('.navbar-large');\n      if ($navbarEl.length > 1) {\n        $navbarEl = $(navbarEl).find('.navbar-large.navbar-current');\n      }\n      if ($navbarEl.length > 1 || !$navbarEl.length) {\n        return;\n      }\n    }\n    var $pageEl = $(app.navbar.getPageByEl($navbarEl));\n    $navbarEl.removeClass('navbar-large-collapsed');\n    $pageEl.eq(0).removeClass('page-with-navbar-large-collapsed').trigger('page:navbarlargeexpanded');\n    app.emit('pageNavbarLargeExpanded', $pageEl[0]);\n    $navbarEl.trigger('navbar:expand');\n    app.emit('navbarExpand', $navbarEl[0]);\n  },\n  toggleLargeTitle: function toggleLargeTitle(navbarEl) {\n    var app = this;\n    var $navbarEl = $(navbarEl);\n    if ($navbarEl.hasClass('navbars')) {\n      $navbarEl = $navbarEl.find('.navbar-large');\n      if ($navbarEl.length > 1) {\n        $navbarEl = $(navbarEl).find('.navbar-large.navbar-current');\n      }\n      if ($navbarEl.length > 1 || !$navbarEl.length) {\n        return;\n      }\n    }\n    if ($navbarEl.hasClass('navbar-large-collapsed')) {\n      app.navbar.expandLargeTitle($navbarEl);\n    } else {\n      app.navbar.collapseLargeTitle($navbarEl);\n    }\n  },\n  initNavbarOnScroll: function initNavbarOnScroll(pageEl, navbarEl, needHide, needCollapse, needTransparent) {\n    var app = this;\n    var support = getSupport();\n    var $pageEl = $(pageEl);\n    var $navbarEl = $(navbarEl);\n    var $titleLargeEl = $navbarEl.find('.title-large');\n    var isLarge = $titleLargeEl.length || $navbarEl.hasClass('.navbar-large');\n    var navbarHideHeight = 44;\n    var snapPageScrollToLargeTitle = app.params.navbar.snapPageScrollToLargeTitle;\n    var snapPageScrollToTransparentNavbar = app.params.navbar.snapPageScrollToTransparentNavbar;\n    var previousScrollTop;\n    var currentScrollTop;\n    var scrollHeight;\n    var offsetHeight;\n    var reachEnd;\n    var action;\n    var navbarHidden;\n    var navbarCollapsed;\n    var navbarTitleLargeHeight;\n    var navbarOffsetHeight;\n    if (needCollapse || needHide && isLarge) {\n      navbarTitleLargeHeight = $navbarEl.css('--f7-navbar-large-title-height');\n      if (navbarTitleLargeHeight && navbarTitleLargeHeight.indexOf('px') >= 0) {\n        navbarTitleLargeHeight = parseInt(navbarTitleLargeHeight, 10);\n        if (Number.isNaN(navbarTitleLargeHeight) && $titleLargeEl.length) {\n          navbarTitleLargeHeight = $titleLargeEl[0].offsetHeight;\n        } else if (Number.isNaN(navbarTitleLargeHeight)) {\n          if (app.theme === 'ios') navbarTitleLargeHeight = 52;else if (app.theme === 'md') navbarTitleLargeHeight = 48;else if (app.theme === 'aurora') navbarTitleLargeHeight = 38;\n        }\n      } else if ($titleLargeEl.length) {\n        navbarTitleLargeHeight = $titleLargeEl[0].offsetHeight;\n      } else {\n        // eslint-disable-next-line\n        if (app.theme === 'ios') navbarTitleLargeHeight = 52;else if (app.theme === 'md') navbarTitleLargeHeight = 48;else if (app.theme === 'aurora') navbarTitleLargeHeight = 38;\n      }\n    }\n    if (needHide && isLarge) {\n      navbarHideHeight += navbarTitleLargeHeight;\n    }\n    var scrollChanged;\n    var scrollContent;\n    var scrollTimeoutId;\n    var touchEndTimeoutId;\n    var touchSnapTimeout = 70;\n    var desktopSnapTimeout = 300;\n    function calcScrollableDistance() {\n      $pageEl.find('.page-content').each(function (pageContentEl) {\n        pageContentEl.f7ScrollableDistance = pageContentEl.scrollHeight - pageContentEl.offsetHeight;\n      });\n    }\n    function snapLargeNavbar() {\n      var inSearchbarExpanded = $navbarEl.hasClass('with-searchbar-expandable-enabled');\n      if (inSearchbarExpanded) return;\n      if (!scrollContent || currentScrollTop < 0) return;\n      if (currentScrollTop >= navbarTitleLargeHeight / 2 && currentScrollTop < navbarTitleLargeHeight) {\n        $(scrollContent).scrollTop(navbarTitleLargeHeight, 100);\n      } else if (currentScrollTop < navbarTitleLargeHeight) {\n        $(scrollContent).scrollTop(0, 200);\n      }\n    }\n    function snapTransparentNavbar() {\n      var inSearchbarExpanded = $navbarEl.hasClass('with-searchbar-expandable-enabled');\n      if (inSearchbarExpanded) return;\n      if (!scrollContent || currentScrollTop < 0) return;\n      if (currentScrollTop >= navbarOffsetHeight / 2 && currentScrollTop < navbarOffsetHeight) {\n        $(scrollContent).scrollTop(navbarOffsetHeight, 100);\n      } else if (currentScrollTop < navbarOffsetHeight) {\n        $(scrollContent).scrollTop(0, 200);\n      }\n    }\n    function handleNavbarTransparent() {\n      var isHidden = $navbarEl.hasClass('navbar-hidden') || $navbarEl.parent('.navbars').hasClass('navbar-hidden');\n      var inSearchbarExpanded = $navbarEl.hasClass('with-searchbar-expandable-enabled');\n      if (inSearchbarExpanded || isHidden) return;\n      if (!navbarOffsetHeight) {\n        navbarOffsetHeight = navbarEl.offsetHeight;\n      }\n      var opacity = currentScrollTop / navbarOffsetHeight;\n      var notTransparent = $navbarEl.hasClass('navbar-transparent-visible');\n      opacity = Math.max(Math.min(opacity, 1), 0);\n      if (notTransparent && opacity === 1 || !notTransparent && opacity === 0) {\n        $navbarEl.find('.navbar-bg, .title').css('opacity', '');\n        return;\n      }\n      if (notTransparent && opacity === 0) {\n        $navbarEl.trigger('navbar:transparenthide');\n        app.emit('navbarTransparentHide', $navbarEl[0]);\n        $navbarEl.removeClass('navbar-transparent-visible');\n        $navbarEl.find('.navbar-bg, .title').css('opacity', '');\n        return;\n      }\n      if (!notTransparent && opacity === 1) {\n        $navbarEl.trigger('navbar:transparentshow');\n        app.emit('navbarTransparentShow', $navbarEl[0]);\n        $navbarEl.addClass('navbar-transparent-visible');\n        $navbarEl.find('.navbar-bg, .title').css('opacity', '');\n        return;\n      }\n      $navbarEl.find('.navbar-bg, .title').css('opacity', opacity);\n      if (snapPageScrollToTransparentNavbar) {\n        if (!support.touch) {\n          clearTimeout(scrollTimeoutId);\n          scrollTimeoutId = setTimeout(function () {\n            snapTransparentNavbar();\n          }, desktopSnapTimeout);\n        } else if (touchEndTimeoutId) {\n          clearTimeout(touchEndTimeoutId);\n          touchEndTimeoutId = null;\n          touchEndTimeoutId = setTimeout(function () {\n            snapTransparentNavbar();\n            clearTimeout(touchEndTimeoutId);\n            touchEndTimeoutId = null;\n          }, touchSnapTimeout);\n        }\n      }\n    }\n    var previousCollapseProgress = null;\n    var collapseProgress = null;\n    function handleLargeNavbarCollapse(pageContentEl) {\n      var isHidden = $navbarEl.hasClass('navbar-hidden') || $navbarEl.parent('.navbars').hasClass('navbar-hidden');\n      if (isHidden) return;\n      var isLargeTransparent = $navbarEl.hasClass('navbar-large-transparent') || $navbarEl.hasClass('navbar-large') && $navbarEl.hasClass('navbar-transparent');\n      previousCollapseProgress = collapseProgress;\n      var scrollableDistance = Math.min(navbarTitleLargeHeight, pageContentEl.f7ScrollableDistance || navbarTitleLargeHeight);\n      collapseProgress = Math.min(Math.max(currentScrollTop / scrollableDistance, 0), 1);\n      var previousCollapseWasInMiddle = previousCollapseProgress > 0 && previousCollapseProgress < 1;\n      var inSearchbarExpanded = $navbarEl.hasClass('with-searchbar-expandable-enabled');\n      if (inSearchbarExpanded) return;\n      navbarCollapsed = $navbarEl.hasClass('navbar-large-collapsed');\n      if (collapseProgress === 0 && navbarCollapsed) {\n        app.navbar.expandLargeTitle($navbarEl[0]);\n      } else if (collapseProgress === 1 && !navbarCollapsed) {\n        app.navbar.collapseLargeTitle($navbarEl[0]);\n      }\n      if (collapseProgress === 0 && navbarCollapsed || collapseProgress === 0 && previousCollapseWasInMiddle || collapseProgress === 1 && !navbarCollapsed || collapseProgress === 1 && previousCollapseWasInMiddle) {\n        if (app.theme === 'md') {\n          $navbarEl.find('.navbar-inner').css('overflow', '');\n        }\n        $navbarEl.find('.title').css('opacity', '');\n        $navbarEl.find('.title-large-text, .subnavbar').css('transform', '');\n        if (isLargeTransparent) {\n          $navbarEl.find('.navbar-bg').css('opacity', '');\n        } else {\n          $navbarEl.find('.navbar-bg').css('transform', '');\n        }\n      } else if (collapseProgress > 0 && collapseProgress < 1) {\n        if (app.theme === 'md') {\n          $navbarEl.find('.navbar-inner').css('overflow', 'visible');\n        }\n        $navbarEl.find('.title').css('opacity', collapseProgress);\n        $navbarEl.find('.title-large-text, .subnavbar').css('transform', \"translate3d(0px, \" + -1 * collapseProgress * navbarTitleLargeHeight + \"px, 0)\");\n        if (isLargeTransparent) {\n          $navbarEl.find('.navbar-bg').css('opacity', collapseProgress);\n        } else {\n          $navbarEl.find('.navbar-bg').css('transform', \"translate3d(0px, \" + -1 * collapseProgress * navbarTitleLargeHeight + \"px, 0)\");\n        }\n      }\n      if (snapPageScrollToLargeTitle) {\n        if (!support.touch) {\n          clearTimeout(scrollTimeoutId);\n          scrollTimeoutId = setTimeout(function () {\n            snapLargeNavbar();\n          }, desktopSnapTimeout);\n        } else if (touchEndTimeoutId) {\n          clearTimeout(touchEndTimeoutId);\n          touchEndTimeoutId = null;\n          touchEndTimeoutId = setTimeout(function () {\n            snapLargeNavbar();\n            clearTimeout(touchEndTimeoutId);\n            touchEndTimeoutId = null;\n          }, touchSnapTimeout);\n        }\n      }\n    }\n    function handleTitleHideShow() {\n      if ($pageEl.hasClass('page-with-card-opened')) return;\n      scrollHeight = scrollContent.scrollHeight;\n      offsetHeight = scrollContent.offsetHeight;\n      reachEnd = currentScrollTop + offsetHeight >= scrollHeight;\n      navbarHidden = $navbarEl.hasClass('navbar-hidden') || $navbarEl.parent('.navbars').hasClass('navbar-hidden');\n      if (reachEnd) {\n        if (app.params.navbar.showOnPageScrollEnd) {\n          action = 'show';\n        }\n      } else if (previousScrollTop > currentScrollTop) {\n        if (app.params.navbar.showOnPageScrollTop || currentScrollTop <= navbarHideHeight) {\n          action = 'show';\n        } else {\n          action = 'hide';\n        }\n      } else if (currentScrollTop > navbarHideHeight) {\n        action = 'hide';\n      } else {\n        action = 'show';\n      }\n      if (action === 'show' && navbarHidden) {\n        app.navbar.show($navbarEl, true, true);\n        navbarHidden = false;\n      } else if (action === 'hide' && !navbarHidden) {\n        app.navbar.hide($navbarEl, true, false, true);\n        navbarHidden = true;\n      }\n      previousScrollTop = currentScrollTop;\n    }\n    function handleScroll(e) {\n      scrollContent = this;\n      if (e && e.target && e.target !== scrollContent) {\n        return;\n      }\n      currentScrollTop = scrollContent.scrollTop;\n      scrollChanged = currentScrollTop;\n      if (needCollapse) {\n        handleLargeNavbarCollapse(scrollContent);\n      } else if (needTransparent) {\n        handleNavbarTransparent();\n      }\n      if ($pageEl.hasClass('page-previous')) return;\n      if (needHide) {\n        handleTitleHideShow();\n      }\n    }\n    function handeTouchStart() {\n      scrollChanged = false;\n    }\n    function handleTouchEnd() {\n      clearTimeout(touchEndTimeoutId);\n      touchEndTimeoutId = null;\n      touchEndTimeoutId = setTimeout(function () {\n        if (scrollChanged !== false) {\n          if (needTransparent && !needCollapse) {\n            snapTransparentNavbar();\n          } else {\n            snapLargeNavbar();\n          }\n          clearTimeout(touchEndTimeoutId);\n          touchEndTimeoutId = null;\n        }\n      }, touchSnapTimeout);\n    }\n    $pageEl.on('scroll', '.page-content', handleScroll, true);\n    if (support.touch && (needCollapse && snapPageScrollToLargeTitle || needTransparent && snapPageScrollToTransparentNavbar)) {\n      app.on('touchstart:passive', handeTouchStart);\n      app.on('touchend:passive', handleTouchEnd);\n    }\n    calcScrollableDistance();\n    if (needCollapse || needTransparent) {\n      $pageEl.find('.page-content').each(function (pageContentEl) {\n        if (pageContentEl.scrollTop > 0) handleScroll.call(pageContentEl);\n      });\n    }\n    app.on('resize', calcScrollableDistance);\n    $pageEl[0].f7DetachNavbarScrollHandlers = function f7DetachNavbarScrollHandlers() {\n      app.off('resize', calcScrollableDistance);\n      delete $pageEl[0].f7DetachNavbarScrollHandlers;\n      $pageEl.off('scroll', '.page-content', handleScroll, true);\n      if (support.touch && (needCollapse && snapPageScrollToLargeTitle || needTransparent && snapPageScrollToTransparentNavbar)) {\n        app.off('touchstart:passive', handeTouchStart);\n        app.off('touchend:passive', handleTouchEnd);\n      }\n    };\n  }\n};\nexport default {\n  name: 'navbar',\n  create: function create() {\n    var app = this;\n    bindMethods(app, {\n      navbar: Navbar\n    });\n  },\n  params: {\n    navbar: {\n      scrollTopOnTitleClick: true,\n      iosCenterTitle: true,\n      mdCenterTitle: false,\n      auroraCenterTitle: true,\n      hideOnPageScroll: false,\n      showOnPageScrollEnd: true,\n      showOnPageScrollTop: true,\n      collapseLargeTitleOnScroll: true,\n      snapPageScrollToLargeTitle: true,\n      snapPageScrollToTransparentNavbar: true\n    }\n  },\n  on: {\n    'panelBreakpoint panelCollapsedBreakpoint panelResize viewResize resize viewMasterDetailBreakpoint': function onPanelResize() {\n      var app = this;\n      $('.navbar').each(function (navbarEl) {\n        app.navbar.size(navbarEl);\n      });\n    },\n    pageBeforeRemove: function pageBeforeRemove(page) {\n      if (page.$el[0].f7DetachNavbarScrollHandlers) {\n        page.$el[0].f7DetachNavbarScrollHandlers();\n      }\n    },\n    pageBeforeIn: function pageBeforeIn(page) {\n      var app = this;\n      if (app.theme !== 'ios') return;\n      var $navbarsEl;\n      var view = page.$el.parents('.view')[0].f7View;\n      var navbarEl = app.navbar.getElByPage(page);\n      if (!navbarEl) {\n        $navbarsEl = page.$el.parents('.view').children('.navbars');\n      } else {\n        $navbarsEl = $(navbarEl).parents('.navbars');\n      }\n      if (page.$el.hasClass('no-navbar') || view.router.dynamicNavbar && !navbarEl) {\n        var animate = !!(page.pageFrom && page.router.history.length > 0);\n        app.navbar.hide($navbarsEl, animate);\n      } else {\n        app.navbar.show($navbarsEl);\n      }\n    },\n    pageReinit: function pageReinit(page) {\n      var app = this;\n      var $navbarEl = $(app.navbar.getElByPage(page));\n      if (!$navbarEl || $navbarEl.length === 0) return;\n      app.navbar.size($navbarEl);\n    },\n    pageInit: function pageInit(page) {\n      var app = this;\n      var $navbarEl = $(app.navbar.getElByPage(page));\n      if (!$navbarEl || $navbarEl.length === 0) return; // Size\n\n      app.navbar.size($navbarEl); // Need Collapse On Scroll\n\n      var needCollapseOnScrollHandler;\n      if ($navbarEl.find('.title-large').length > 0) {\n        $navbarEl.addClass('navbar-large');\n      }\n      if ($navbarEl.hasClass('navbar-large')) {\n        if (app.params.navbar.collapseLargeTitleOnScroll) needCollapseOnScrollHandler = true;\n        page.$el.addClass('page-with-navbar-large');\n      } // Need transparent on scroll\n\n      var needTransparentOnScroll;\n      if (!needCollapseOnScrollHandler && $navbarEl.hasClass('navbar-transparent')) {\n        needTransparentOnScroll = true;\n      } // Need Hide On Scroll\n\n      var needHideOnScrollHandler;\n      if (app.params.navbar.hideOnPageScroll || page.$el.find('.hide-navbar-on-scroll').length || page.$el.hasClass('hide-navbar-on-scroll') || page.$el.find('.hide-bars-on-scroll').length || page.$el.hasClass('hide-bars-on-scroll')) {\n        if (page.$el.find('.keep-navbar-on-scroll').length || page.$el.hasClass('keep-navbar-on-scroll') || page.$el.find('.keep-bars-on-scroll').length || page.$el.hasClass('keep-bars-on-scroll')) {\n          needHideOnScrollHandler = false;\n        } else {\n          needHideOnScrollHandler = true;\n        }\n      }\n      if (needCollapseOnScrollHandler || needHideOnScrollHandler || needTransparentOnScroll) {\n        app.navbar.initNavbarOnScroll(page.el, $navbarEl[0], needHideOnScrollHandler, needCollapseOnScrollHandler, needTransparentOnScroll);\n      }\n    },\n    'panelOpen panelSwipeOpen modalOpen': function onPanelModalOpen(instance) {\n      var app = this;\n      instance.$el.find('.navbar:not(.navbar-previous):not(.stacked)').each(function (navbarEl) {\n        app.navbar.size(navbarEl);\n      });\n    },\n    tabShow: function tabShow(tabEl) {\n      var app = this;\n      $(tabEl).find('.navbar:not(.navbar-previous):not(.stacked)').each(function (navbarEl) {\n        app.navbar.size(navbarEl);\n      });\n    }\n  },\n  clicks: {\n    '.navbar .title': function onTitleClick($clickedEl, clickedData, e) {\n      var app = this;\n      if (!app.params.navbar.scrollTopOnTitleClick) return;\n      if ($(e.target).closest('a, button').length > 0) {\n        return;\n      }\n      var $pageContentEl; // Find active page\n\n      var $navbarEl = $clickedEl.parents('.navbar');\n      var $navbarsEl = $navbarEl.parents('.navbars'); // Static Layout\n\n      $pageContentEl = $navbarEl.parents('.page-content');\n      if ($pageContentEl.length === 0) {\n        // Fixed Layout\n        if ($navbarEl.parents('.page').length > 0) {\n          $pageContentEl = $navbarEl.parents('.page').find('.page-content');\n        } // Through Layout iOS\n\n        if ($pageContentEl.length === 0 && $navbarsEl.length) {\n          if ($navbarsEl.nextAll('.page-current:not(.stacked)').length > 0) {\n            $pageContentEl = $navbarsEl.nextAll('.page-current:not(.stacked)').find('.page-content');\n          }\n        } // Through Layout\n\n        if ($pageContentEl.length === 0) {\n          if ($navbarEl.nextAll('.page-current:not(.stacked)').length > 0) {\n            $pageContentEl = $navbarEl.nextAll('.page-current:not(.stacked)').find('.page-content');\n          }\n        }\n      }\n      if ($pageContentEl && $pageContentEl.length > 0) {\n        // Check for tab\n        if ($pageContentEl.hasClass('tab')) {\n          $pageContentEl = $pageContentEl.parent('.tabs').children('.page-content.tab-active');\n        }\n        if ($pageContentEl.length > 0) $pageContentEl.scrollTop(0, 300);\n      }\n    }\n  },\n  vnode: {\n    navbar: {\n      postpatch: function postpatch(vnode) {\n        var app = this;\n        app.navbar.size(vnode.elm);\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}