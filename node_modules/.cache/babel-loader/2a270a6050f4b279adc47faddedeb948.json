{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n/* eslint-disable no-nested-ternary */\nimport React, { forwardRef, useRef, useImperativeHandle, useState } from 'react';\nimport { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';\nimport { classNames, getExtraAttrs, noUndefinedProps, emit, getRouterId } from '../shared/utils';\nimport { colorClasses } from '../shared/mixins';\nimport { f7ready, f7routers, f7, f7events } from '../shared/f7';\nimport { useTab } from '../shared/use-tab';\nimport { useAsyncComponent } from '../shared/use-async-component';\nimport { getRouterInitialComponent } from '../shared/get-router-initial-component';\nimport { RouterContext } from '../shared/router-context';\nvar View = /*#__PURE__*/forwardRef(function (props, ref) {\n  var className = props.className,\n    id = props.id,\n    style = props.style,\n    children = props.children,\n    _props$init = props.init,\n    init = _props$init === void 0 ? true : _props$init,\n    main = props.main,\n    tab = props.tab,\n    tabActive = props.tabActive,\n    url = props.url,\n    _props$browserHistory = props.browserHistoryInitialMatch,\n    browserHistoryInitialMatch = _props$browserHistory === void 0 ? true : _props$browserHistory;\n  var childrenArray = React.Children.toArray(children);\n  var initialPageComponent = childrenArray.filter(function (c) {\n    return c.props && c.props.initialPage;\n  })[0];\n  var restChildren = childrenArray.filter(function (c) {\n    return !c.props || !c.props.initialPage;\n  });\n  var extraAttrs = getExtraAttrs(props);\n  var _f7View = useRef(null);\n  var elRef = useRef(null);\n  var routerData = useRef(null);\n  var initialPage;\n  var initialRoute;\n  var onViewInit = function onViewInit(view) {\n    emit(props, 'viewInit', view);\n    if (!init) {\n      routerData.current.instance = view;\n      _f7View.current = routerData.current.instance;\n    }\n  };\n  if (f7 && !_f7View.current && init) {\n    var routerId = getRouterId();\n    _f7View.current = f7.views.create(elRef.current, _extends({\n      routerId: routerId,\n      init: false\n    }, noUndefinedProps(props), {\n      browserHistoryInitialMatch: browserHistoryInitialMatch,\n      on: {\n        init: onViewInit\n      }\n    }));\n    routerData.current = {\n      routerId: routerId,\n      instance: _f7View.current\n    };\n    f7routers.views.push(routerData.current);\n    if (_f7View.current && _f7View.current.router && (url || main)) {\n      var initialData = getRouterInitialComponent(_f7View.current.router, initialPageComponent);\n      initialPage = initialData.initialPage;\n      initialRoute = initialData.initialRoute;\n      if (initialRoute && initialRoute.route && initialRoute.route.masterRoute) {\n        initialPage = undefined;\n        initialRoute = undefined;\n      }\n    }\n  }\n  var _useState = useState(initialPage ? [initialPage] : []),\n    pages = _useState[0],\n    _setPages = _useState[1];\n  var onResize = function onResize(view, width) {\n    emit(props, 'viewResize', width);\n  };\n  var onSwipeBackMove = function onSwipeBackMove(data) {\n    var swipeBackData = data;\n    emit(props, 'swipeBackMove', swipeBackData);\n  };\n  var onSwipeBackBeforeChange = function onSwipeBackBeforeChange(data) {\n    var swipeBackData = data;\n    emit(props, 'swipeBackBeforeChange', swipeBackData);\n  };\n  var onSwipeBackAfterChange = function onSwipeBackAfterChange(data) {\n    var swipeBackData = data;\n    emit(props, 'swipeBackAfterChange', swipeBackData);\n  };\n  var onSwipeBackBeforeReset = function onSwipeBackBeforeReset(data) {\n    var swipeBackData = data;\n    emit(props, 'swipeBackBeforeReset', swipeBackData);\n  };\n  var onSwipeBackAfterReset = function onSwipeBackAfterReset(data) {\n    var swipeBackData = data;\n    emit(props, 'swipeBackAfterReset', swipeBackData);\n  };\n  useImperativeHandle(ref, function () {\n    return {\n      el: elRef.current,\n      f7View: function f7View() {\n        return _f7View.current;\n      }\n    };\n  });\n  var onMount = function onMount() {\n    f7ready(function () {\n      if (_f7View.current) {\n        routerData.current.el = elRef.current;\n        routerData.current.pages = pages;\n        routerData.current.setPages = function (newPages) {\n          _setPages([].concat(newPages));\n        };\n        if (initialPage && initialPage.isAsync && !initialPage.initialComponent) {\n          initialPage.component().then(function () {\n            setTimeout(function () {\n              _f7View.current.init(elRef.current);\n              if (initialPage) {\n                initialPage.el = _f7View.current.router.currentPageEl;\n                if (initialRoute && initialRoute.route && initialRoute.route.keepAlive) {\n                  initialRoute.route.keepAliveData = {\n                    pageEl: initialPage.el\n                  };\n                }\n              }\n            }, 100);\n          });\n        } else {\n          _f7View.current.init(elRef.current);\n          if (initialPage) {\n            initialPage.el = _f7View.current.router.currentPageEl;\n            if (initialRoute && initialRoute.route && initialRoute.route.keepAlive) {\n              initialRoute.route.keepAliveData = {\n                pageEl: initialPage.el\n              };\n            }\n          }\n        }\n      } else {\n        var _routerId = getRouterId();\n        routerData.current = {\n          el: elRef.current,\n          routerId: _routerId,\n          pages: pages,\n          instance: _f7View.current,\n          setPages: function setPages(newPages) {\n            _setPages([].concat(newPages));\n          }\n        };\n        f7routers.views.push(routerData.current);\n        routerData.current.instance = f7.views.create(elRef.current, _extends({\n          routerId: _routerId\n        }, noUndefinedProps(props), {\n          browserHistoryInitialMatch: browserHistoryInitialMatch,\n          on: {\n            init: onViewInit\n          }\n        }));\n        _f7View.current = routerData.current.instance;\n      }\n      if (!init) return;\n      _f7View.current.on('resize', onResize);\n      _f7View.current.on('swipebackMove', onSwipeBackMove);\n      _f7View.current.on('swipebackBeforeChange', onSwipeBackBeforeChange);\n      _f7View.current.on('swipebackAfterChange', onSwipeBackAfterChange);\n      _f7View.current.on('swipebackBeforeReset', onSwipeBackBeforeReset);\n      _f7View.current.on('swipebackAfterReset', onSwipeBackAfterReset);\n    });\n  };\n  var onDestroy = function onDestroy() {\n    if (_f7View.current) {\n      _f7View.current.off('resize', onResize);\n      _f7View.current.off('swipebackMove', onSwipeBackMove);\n      _f7View.current.off('swipebackBeforeChange', onSwipeBackBeforeChange);\n      _f7View.current.off('swipebackAfterChange', onSwipeBackAfterChange);\n      _f7View.current.off('swipebackBeforeReset', onSwipeBackBeforeReset);\n      _f7View.current.off('swipebackAfterReset', onSwipeBackAfterReset);\n      if (_f7View.current.destroy) _f7View.current.destroy();\n      _f7View.current = null;\n    }\n    f7routers.views.splice(f7routers.views.indexOf(routerData.current), 1);\n    routerData.current = null;\n  };\n  useIsomorphicLayoutEffect(function () {\n    onMount();\n    return onDestroy;\n  }, []);\n  useIsomorphicLayoutEffect(function () {\n    if (routerData.current && f7) {\n      f7events.emit('viewRouterDidUpdate', routerData.current);\n    }\n  });\n  useTab(elRef, props);\n  var classes = classNames(className, 'view', {\n    'view-main': main,\n    'tab-active': tabActive,\n    tab: tab\n  }, colorClasses(props));\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    id: id,\n    style: style,\n    className: classes,\n    ref: elRef\n  }, extraAttrs), restChildren, pages.map(function (_ref) {\n    var PageComponent = _ref.component,\n      pageId = _ref.id,\n      pageProps = _ref.props,\n      isAsync = _ref.isAsync,\n      initialComponent = _ref.initialComponent;\n    return /*#__PURE__*/React.createElement(RouterContext.Provider, {\n      key: pageId,\n      value: {\n        router: pageProps.f7router,\n        route: pageProps.f7route\n      }\n    }, initialComponent ? /*#__PURE__*/React.cloneElement(initialComponent, _extends({}, pageProps)) : isAsync ? useAsyncComponent(PageComponent, pageProps) : /*#__PURE__*/React.createElement(PageComponent, pageProps));\n  }));\n});\nView.displayName = 'f7-view';\nexport default View;","map":null,"metadata":{},"sourceType":"module"}