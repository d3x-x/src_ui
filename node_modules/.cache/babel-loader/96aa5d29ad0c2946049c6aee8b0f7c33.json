{"ast":null,"code":"import { getDocument } from 'ssr-window';\nimport $ from '../../shared/dom7';\nimport { extend, parseUrlQuery } from '../../shared/utils';\nimport { getDevice } from '../../shared/get-device';\nimport History from '../../shared/history';\nimport redirect from './redirect';\nimport processRouteQueue from './process-route-queue';\nimport appRouterCheck from './app-router-check';\nimport asyncComponent from './async-component';\nfunction backward(router, el, backwardOptions) {\n  var device = getDevice();\n  var document = getDocument();\n  var $el = $(el);\n  var app = router.app;\n  var view = router.view;\n  var options = extend(false, {\n    animate: router.params.animate,\n    browserHistory: true,\n    replaceState: false\n  }, backwardOptions);\n  var masterDetailEnabled = router.params.masterDetailBreakpoint > 0;\n  var isMaster = masterDetailEnabled && options.route && options.route.route && (options.route.route.master === true || typeof options.route.route.master === 'function' && options.route.route.master(app, router));\n  var masterPageEl;\n  var masterPageRemoved;\n  var dynamicNavbar = router.dynamicNavbar;\n  var $newPage = $el;\n  var $oldPage = router.$el.children('.page-current');\n  var initialPreload = $oldPage.length === 0 && options.preload;\n  var currentIsMaster = masterDetailEnabled && $oldPage.hasClass('page-master');\n  if ($newPage.length) {\n    // Remove theme elements\n    router.removeThemeElements($newPage);\n  }\n  var $navbarsEl;\n  var $newNavbarEl;\n  var $oldNavbarEl;\n  if (dynamicNavbar) {\n    $newNavbarEl = $newPage.children('.navbar');\n    $navbarsEl = router.$navbarsEl;\n    if ($newNavbarEl.length === 0 && $newPage[0] && $newPage[0].f7Page) {\n      // Try from pageData\n      $newNavbarEl = $newPage[0].f7Page.$navbarEl;\n    }\n    $oldNavbarEl = $navbarsEl.find('.navbar-current');\n  }\n  router.allowPageChange = false;\n  if ($newPage.length === 0 || $oldPage.length === 0 && !options.preload) {\n    router.allowPageChange = true;\n    return router;\n  } // Remove theme elements\n\n  router.removeThemeElements($newPage); // Save Keep Alive Cache\n\n  if (options.route && options.route.route && options.route.route.keepAlive && !options.route.route.keepAliveData) {\n    options.route.route.keepAliveData = {\n      pageEl: $el[0]\n    };\n  } // Pages In View\n\n  var isDetail;\n  var isDetailRoot;\n  if (masterDetailEnabled) {\n    var $pagesInView = router.$el.children('.page:not(.stacked)').filter(function (pageInView) {\n      return pageInView !== $newPage[0];\n    }); // Find Detail' master page\n\n    for (var i = 0; i < $pagesInView.length; i += 1) {\n      if (!masterPageEl && $pagesInView[i].classList.contains('page-master')) {\n        masterPageEl = $pagesInView[i];\n        continue; // eslint-disable-line\n      }\n    }\n\n    isDetail = !isMaster && masterPageEl && router.history.indexOf(options.route.url) > router.history.indexOf(masterPageEl.f7Page.route.url);\n    if (!isDetail && !isMaster && masterPageEl && masterPageEl.f7Page && options.route.route.masterRoute) {\n      isDetail = options.route.route.masterRoute.path === masterPageEl.f7Page.route.route.path;\n    }\n  }\n  if (isDetail && masterPageEl && masterPageEl.f7Page) {\n    isDetailRoot = router.history.indexOf(options.route.url) - router.history.indexOf(masterPageEl.f7Page.route.url) === 1;\n  } // New Page\n\n  $newPage.addClass(\"page-\" + (initialPreload ? 'current' : 'previous') + (isMaster ? ' page-master' : '') + (isDetail ? ' page-master-detail' : '') + (isDetailRoot ? ' page-master-detail-root' : '')).removeClass('stacked').removeAttr('aria-hidden').trigger('page:unstack').trigger('page:position', {\n    position: initialPreload ? 'current' : 'previous'\n  });\n  router.emit('pageUnstack', $newPage[0]);\n  router.emit('pagePosition', $newPage[0], initialPreload ? 'current' : 'previous');\n  if (isMaster || isDetail) {\n    $newPage.trigger('page:role', {\n      role: isMaster ? 'master' : 'detail',\n      root: !!isDetailRoot\n    });\n    router.emit('pageRole', $newPage[0], {\n      role: isMaster ? 'master' : 'detail',\n      detailRoot: !!isDetailRoot\n    });\n  }\n  if (dynamicNavbar && $newNavbarEl.length > 0) {\n    $newNavbarEl.addClass(\"navbar-\" + (initialPreload ? 'current' : 'previous') + (isMaster ? ' navbar-master' : '') + (isDetail ? ' navbar-master-detail' : '') + (isDetailRoot ? ' navbar-master-detail-root' : '')).removeClass('stacked').removeAttr('aria-hidden');\n    $newNavbarEl.trigger('navbar:position', {\n      position: initialPreload ? 'current' : 'previous'\n    });\n    router.emit('navbarPosition', $newNavbarEl[0], initialPreload ? 'current' : 'previous');\n    if (isMaster || isDetailRoot) {\n      router.emit('navbarRole', $newNavbarEl[0], {\n        role: isMaster ? 'master' : 'detail',\n        detailRoot: !!isDetailRoot\n      });\n    }\n  } // Remove previous page in case of \"forced\"\n\n  var backIndex;\n  if (options.force) {\n    if ($oldPage.prev('.page-previous:not(.stacked)').length > 0 || $oldPage.prev('.page-previous').length === 0) {\n      if (router.history.indexOf(options.route.url) >= 0) {\n        backIndex = router.history.length - router.history.indexOf(options.route.url) - 1;\n        router.history = router.history.slice(0, router.history.indexOf(options.route.url) + 2);\n        view.history = router.history;\n      } else if (router.history[[router.history.length - 2]]) {\n        router.history[router.history.length - 2] = options.route.url;\n      } else {\n        router.history.unshift(router.url);\n      }\n      if (backIndex && router.params.stackPages) {\n        $oldPage.prevAll('.page-previous').each(function (pageToRemove) {\n          var $pageToRemove = $(pageToRemove);\n          var $navbarToRemove;\n          if (dynamicNavbar) {\n            // $navbarToRemove = $oldNavbarEl.prevAll('.navbar-previous').eq(index);\n            $navbarToRemove = $(app.navbar.getElByPage($pageToRemove));\n          }\n          if ($pageToRemove[0] !== $newPage[0] && $pageToRemove.index() > $newPage.index()) {\n            if (router.initialPages.indexOf($pageToRemove[0]) >= 0) {\n              $pageToRemove.addClass('stacked');\n              $pageToRemove.trigger('page:stack');\n              router.emit('pageStack', $pageToRemove[0]);\n              if (dynamicNavbar) {\n                $navbarToRemove.addClass('stacked');\n              }\n            } else {\n              router.pageCallback('beforeRemove', $pageToRemove, $navbarToRemove, 'previous', undefined, options);\n              if ($pageToRemove[0] === masterPageEl) {\n                masterPageRemoved = true;\n              }\n              router.removePage($pageToRemove);\n              if (dynamicNavbar && $navbarToRemove.length > 0) {\n                router.removeNavbar($navbarToRemove);\n              }\n            }\n          }\n        });\n      } else {\n        var $pageToRemove = $oldPage.prev('.page-previous:not(.stacked)');\n        var $navbarToRemove;\n        if (dynamicNavbar) {\n          // $navbarToRemove = $oldNavbarEl.prev('.navbar-inner:not(.stacked)');\n          $navbarToRemove = $(app.navbar.getElByPage($pageToRemove));\n        }\n        if (router.params.stackPages && router.initialPages.indexOf($pageToRemove[0]) >= 0) {\n          $pageToRemove.addClass('stacked');\n          $pageToRemove.trigger('page:stack');\n          router.emit('pageStack', $pageToRemove[0]);\n          $navbarToRemove.addClass('stacked');\n        } else if ($pageToRemove.length > 0) {\n          router.pageCallback('beforeRemove', $pageToRemove, $navbarToRemove, 'previous', undefined, options);\n          if ($pageToRemove[0] === masterPageEl) {\n            masterPageRemoved = true;\n          }\n          router.removePage($pageToRemove);\n          if (dynamicNavbar && $navbarToRemove.length) {\n            router.removeNavbar($navbarToRemove);\n          }\n        }\n      }\n    }\n  } // Insert new page\n\n  var newPageInDom = $newPage.parents(document).length > 0;\n  var f7Component = $newPage[0].f7Component;\n  function insertPage() {\n    if (initialPreload) {\n      if (!newPageInDom && f7Component) {\n        f7Component.mount(function (componentEl) {\n          router.$el.append(componentEl);\n        });\n      } else {\n        router.$el.append($newPage);\n      }\n    }\n    if ($newPage.next($oldPage).length === 0) {\n      if (!newPageInDom && f7Component) {\n        f7Component.mount(function (componentEl) {\n          $(componentEl).insertBefore($oldPage);\n        });\n      } else {\n        $newPage.insertBefore($oldPage);\n      }\n    }\n    if (dynamicNavbar && $newNavbarEl.length) {\n      if ($newNavbarEl.find('.title-large').length) {\n        $newNavbarEl.addClass('navbar-large');\n      }\n      $newNavbarEl.insertBefore($oldNavbarEl);\n      if ($oldNavbarEl.length > 0) {\n        $newNavbarEl.insertBefore($oldNavbarEl);\n      } else {\n        if (!router.$navbarsEl.parents(document).length) {\n          router.$el.prepend(router.$navbarsEl);\n        }\n        $navbarsEl.append($newNavbarEl);\n      }\n    }\n    if (!newPageInDom) {\n      router.pageCallback('mounted', $newPage, $newNavbarEl, 'previous', 'current', options, $oldPage);\n    } else if (options.route && options.route.route && options.route.route.keepAlive && !$newPage[0].f7PageMounted) {\n      $newPage[0].f7PageMounted = true;\n      router.pageCallback('mounted', $newPage, $newNavbarEl, 'previous', 'current', options, $oldPage);\n    }\n  }\n  if (options.preload) {\n    // Insert Page\n    insertPage(); // Tab route\n\n    if (options.route.route.tab) {\n      router.tabLoad(options.route.route.tab, extend({}, options, {\n        history: false,\n        browserHistory: false,\n        preload: true\n      }));\n    }\n    if (isMaster) {\n      $newPage.removeClass('page-master-stacked').trigger('page:masterunstack');\n      router.emit('pageMasterUnstack', $newPage[0]);\n      if (dynamicNavbar) {\n        $(app.navbar.getElByPage($newPage)).removeClass('navbar-master-stacked');\n        router.emit('navbarMasterUnstack', app.navbar.getElByPage($newPage));\n      }\n    } // Page init and before init events\n\n    router.pageCallback('init', $newPage, $newNavbarEl, 'previous', 'current', options, $oldPage);\n    if (initialPreload) {\n      router.pageCallback('beforeIn', $newPage, $newNavbarEl, 'current', undefined, options);\n      router.pageCallback('afterIn', $newPage, $newNavbarEl, 'current', undefined, options);\n    }\n    var $previousPages = $newPage.prevAll('.page-previous:not(.stacked):not(.page-master)');\n    if ($previousPages.length > 0) {\n      $previousPages.each(function (pageToRemove) {\n        var $pageToRemove = $(pageToRemove);\n        var $navbarToRemove;\n        if (dynamicNavbar) {\n          // $navbarToRemove = $newNavbarEl.prevAll('.navbar-previous:not(.stacked)').eq(index);\n          $navbarToRemove = $(app.navbar.getElByPage($pageToRemove));\n        }\n        if (router.params.stackPages && router.initialPages.indexOf(pageToRemove) >= 0) {\n          $pageToRemove.addClass('stacked');\n          $pageToRemove.trigger('page:stack');\n          router.emit('pageStack', $pageToRemove[0]);\n          if (dynamicNavbar) {\n            $navbarToRemove.addClass('stacked');\n          }\n        } else {\n          router.pageCallback('beforeRemove', $pageToRemove, $navbarToRemove, 'previous', undefined);\n          router.removePage($pageToRemove);\n          if (dynamicNavbar && $navbarToRemove.length) {\n            router.removeNavbar($navbarToRemove);\n          }\n        }\n      });\n    }\n    router.allowPageChange = true;\n    return router;\n  } // History State\n\n  if (!(device.ie || device.edge || device.firefox && !device.ios)) {\n    if (router.params.browserHistory && options.browserHistory) {\n      if (options.replaceState) {\n        var browserHistoryRoot = router.params.browserHistoryRoot || '';\n        History.replace(view.id, {\n          url: options.route.url\n        }, browserHistoryRoot + router.params.browserHistorySeparator + options.route.url);\n      } else if (backIndex) {\n        History.go(-backIndex);\n      } else {\n        History.back();\n      }\n    }\n  } // Update History\n\n  if (options.replaceState) {\n    router.history[router.history.length - 1] = options.route.url;\n  } else {\n    if (router.history.length === 1) {\n      router.history.unshift(router.url);\n    }\n    router.history.pop();\n  }\n  router.saveHistory(); // Current Page & Navbar\n\n  router.currentPageEl = $newPage[0];\n  if (dynamicNavbar && $newNavbarEl.length) {\n    router.currentNavbarEl = $newNavbarEl[0];\n  } else {\n    delete router.currentNavbarEl;\n  } // Current Route\n\n  router.currentRoute = options.route; // History State\n\n  if (device.ie || device.edge || device.firefox && !device.ios) {\n    if (router.params.browserHistory && options.browserHistory) {\n      if (options.replaceState) {\n        var _browserHistoryRoot = router.params.browserHistoryRoot || '';\n        History.replace(view.id, {\n          url: options.route.url\n        }, _browserHistoryRoot + router.params.browserHistorySeparator + options.route.url);\n      } else if (backIndex) {\n        History.go(-backIndex);\n      } else {\n        History.back();\n      }\n    }\n  } // Insert Page\n\n  insertPage(); // Load Tab\n\n  if (options.route.route.tab) {\n    router.tabLoad(options.route.route.tab, extend({}, options, {\n      history: false,\n      browserHistory: false\n    }));\n  } // Check master detail\n\n  if (masterDetailEnabled && (currentIsMaster || masterPageRemoved)) {\n    view.checkMasterDetailBreakpoint(false);\n  } // Page init and before init events\n\n  router.pageCallback('init', $newPage, $newNavbarEl, 'previous', 'current', options, $oldPage); // Before animation callback\n\n  router.pageCallback('beforeOut', $oldPage, $oldNavbarEl, 'current', 'next', options);\n  router.pageCallback('beforeIn', $newPage, $newNavbarEl, 'previous', 'current', options); // Animation\n\n  function afterAnimation() {\n    // Set classes\n    router.setPagePosition($newPage, 'current', false);\n    router.setPagePosition($oldPage, 'next', true);\n    if (dynamicNavbar) {\n      router.setNavbarPosition($newNavbarEl, 'current', false);\n      router.setNavbarPosition($oldNavbarEl, 'next', true);\n    } // After animation event\n\n    router.pageCallback('afterOut', $oldPage, $oldNavbarEl, 'current', 'next', options);\n    router.pageCallback('afterIn', $newPage, $newNavbarEl, 'previous', 'current', options); // Remove Old Page\n\n    if (router.params.stackPages && router.initialPages.indexOf($oldPage[0]) >= 0) {\n      $oldPage.addClass('stacked');\n      $oldPage.trigger('page:stack');\n      router.emit('pageStack', $oldPage[0]);\n      if (dynamicNavbar) {\n        $oldNavbarEl.addClass('stacked');\n      }\n    } else {\n      router.pageCallback('beforeRemove', $oldPage, $oldNavbarEl, 'next', undefined, options);\n      router.removePage($oldPage);\n      if (dynamicNavbar && $oldNavbarEl.length) {\n        router.removeNavbar($oldNavbarEl);\n      }\n    }\n    router.allowPageChange = true;\n    router.emit('routeChanged', router.currentRoute, router.previousRoute, router); // Preload previous page\n\n    var preloadPreviousPage = router.params.preloadPreviousPage || router.params[app.theme + \"SwipeBack\"];\n    if (preloadPreviousPage && router.history[router.history.length - 2] && !isMaster) {\n      router.back(router.history[router.history.length - 2], {\n        preload: true\n      });\n    }\n    if (router.params.browserHistory) {\n      History.clearRouterQueue();\n    }\n  }\n  function setPositionClasses() {\n    router.setPagePosition($oldPage, 'current');\n    router.setPagePosition($newPage, 'previous', false);\n    if (dynamicNavbar) {\n      router.setNavbarPosition($oldNavbarEl, 'current');\n      router.setNavbarPosition($newNavbarEl, 'previous', false);\n    }\n  }\n  if (options.animate && !(currentIsMaster && app.width >= router.params.masterDetailBreakpoint)) {\n    var transition = router.params.transition;\n    if ($oldPage[0] && $oldPage[0].f7PageTransition) {\n      transition = $oldPage[0].f7PageTransition;\n      delete $oldPage[0].f7PageTransition;\n    }\n    if (options.transition) transition = options.transition;\n    if (!transition && router.previousRoute && router.previousRoute.route) {\n      transition = router.previousRoute.route.transition;\n    }\n    if (!transition && router.previousRoute && router.previousRoute.route && router.previousRoute.route.options) {\n      transition = router.previousRoute.route.options.transition;\n    }\n    setPositionClasses();\n    router.animate($oldPage, $newPage, $oldNavbarEl, $newNavbarEl, 'backward', transition, function () {\n      afterAnimation();\n    });\n  } else {\n    afterAnimation();\n  }\n  return router;\n}\nfunction loadBack(router, backParams, backOptions, ignorePageChange) {\n  if (!router.allowPageChange && !ignorePageChange) return router;\n  var params = backParams;\n  var options = backOptions;\n  var url = params.url,\n    content = params.content,\n    el = params.el,\n    pageName = params.pageName,\n    component = params.component,\n    componentUrl = params.componentUrl;\n  if (options.route.url && router.url === options.route.url && !(options.reloadCurrent || options.reloadPrevious) && !router.params.allowDuplicateUrls) {\n    return false;\n  }\n  if (!options.route && url) {\n    options.route = router.parseRouteUrl(url);\n  } // Component Callbacks\n\n  function resolve(pageEl, newOptions) {\n    return backward(router, pageEl, extend(options, newOptions));\n  }\n  function reject() {\n    router.allowPageChange = true;\n    return router;\n  }\n  if (url || componentUrl || component) {\n    router.allowPageChange = false;\n  } // Proceed\n\n  if (content) {\n    backward(router, router.getPageEl(content), options);\n  } else if (el) {\n    // Load page from specified HTMLElement or by page name in pages container\n    backward(router, router.getPageEl(el), options);\n  } else if (pageName) {\n    // Load page by page name in pages container\n    backward(router, router.$el.children(\".page[data-name=\\\"\" + pageName + \"\\\"]\").eq(0), options);\n  } else if (component || componentUrl) {\n    // Load from component (F7/Vue/React/...)\n    try {\n      router.pageComponentLoader({\n        routerEl: router.el,\n        component: component,\n        componentUrl: componentUrl,\n        options: options,\n        resolve: resolve,\n        reject: reject\n      });\n    } catch (err) {\n      router.allowPageChange = true;\n      throw err;\n    }\n  } else if (url) {\n    // Load using XHR\n    if (router.xhrAbortController) {\n      router.xhrAbortController.abort();\n      router.xhrAbortController = false;\n    }\n    router.xhrRequest(url, options).then(function (pageContent) {\n      backward(router, router.getPageEl(pageContent), options);\n    }).catch(function () {\n      router.allowPageChange = true;\n    });\n  }\n  return router;\n}\nfunction back() {\n  var router = this;\n  var device = getDevice();\n  if (router.swipeBackActive) return router;\n  var navigateUrl;\n  var navigateOptions;\n  var route;\n  if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'object') {\n    navigateOptions = (arguments.length <= 0 ? undefined : arguments[0]) || {};\n  } else {\n    navigateUrl = arguments.length <= 0 ? undefined : arguments[0];\n    navigateOptions = (arguments.length <= 1 ? undefined : arguments[1]) || {};\n  }\n  var _navigateOptions = navigateOptions,\n    name = _navigateOptions.name,\n    params = _navigateOptions.params,\n    query = _navigateOptions.query;\n  if (name) {\n    navigateUrl = router.generateUrl({\n      name: name,\n      params: params,\n      query: query\n    });\n    if (navigateUrl) {\n      return router.back(navigateUrl, extend({}, navigateOptions, {\n        name: null,\n        params: null,\n        query: null\n      }));\n    }\n    return router;\n  }\n  var app = router.app;\n  appRouterCheck(router, 'back');\n  var currentRouteIsModal = router.currentRoute.modal;\n  var modalType;\n  if (!currentRouteIsModal) {\n    'popup popover sheet loginScreen actions customModal panel'.split(' ').forEach(function (modalLoadProp) {\n      if (router.currentRoute.route[modalLoadProp]) {\n        currentRouteIsModal = true;\n        modalType = modalLoadProp;\n      }\n    });\n  }\n  if (currentRouteIsModal && !navigateOptions.preload) {\n    var modalToClose = router.currentRoute.modal || router.currentRoute.route.modalInstance || app[modalType].get();\n    var previousUrl = router.history[router.history.length - 2];\n    var previousRoute; // check if previous route is modal too\n\n    if (modalToClose && modalToClose.$el) {\n      var prevOpenedModals = modalToClose.$el.prevAll('.modal-in');\n      if (prevOpenedModals.length && prevOpenedModals[0].f7Modal) {\n        var modalEl = prevOpenedModals[0]; // check if current router not inside of the modalEl\n\n        if (!router.$el.parents(modalEl).length) {\n          previousRoute = modalEl.f7Modal.route;\n        }\n      }\n    }\n    if (!previousRoute) {\n      previousRoute = router.findMatchingRoute(previousUrl);\n    }\n    if (!previousRoute && previousUrl) {\n      previousRoute = {\n        url: previousUrl,\n        path: previousUrl.split('?')[0],\n        query: parseUrlQuery(previousUrl),\n        route: {\n          path: previousUrl.split('?')[0],\n          url: previousUrl\n        }\n      };\n    }\n    if (!navigateUrl || navigateUrl.replace(/[# ]/g, '').trim().length === 0) {\n      if (!previousRoute || !modalToClose) {\n        return router;\n      }\n    }\n    var forceOtherUrl = navigateOptions.force && previousRoute && navigateUrl;\n    if (previousRoute && modalToClose) {\n      var isBrokenBrowserHistory = device.ie || device.edge || device.firefox && !device.ios;\n      var needHistoryBack = router.params.browserHistory && navigateOptions.browserHistory !== false;\n      var currentRouteWithoutBrowserHistory = router.currentRoute && router.currentRoute.route && router.currentRoute.route.options && router.currentRoute.route.options.browserHistory === false;\n      if (needHistoryBack && !isBrokenBrowserHistory && !currentRouteWithoutBrowserHistory) {\n        History.back();\n      }\n      router.currentRoute = previousRoute;\n      router.history.pop();\n      router.saveHistory();\n      if (needHistoryBack && isBrokenBrowserHistory && !currentRouteWithoutBrowserHistory) {\n        History.back();\n      }\n      router.modalRemove(modalToClose);\n      if (forceOtherUrl) {\n        router.navigate(navigateUrl, {\n          reloadCurrent: true\n        });\n      }\n    } else if (modalToClose) {\n      router.modalRemove(modalToClose);\n      if (navigateUrl) {\n        router.navigate(navigateUrl, {\n          reloadCurrent: true\n        });\n      }\n    }\n    return router;\n  }\n  var $previousPage = router.$el.children('.page-current').prevAll('.page-previous:not(.page-master)').eq(0);\n  var skipMaster;\n  if (router.params.masterDetailBreakpoint > 0) {\n    var classes = [];\n    router.$el.children('.page').each(function (pageEl) {\n      classes.push(pageEl.className);\n    });\n    var $previousMaster = router.$el.children('.page-current').prevAll('.page-master').eq(0);\n    if ($previousMaster.length) {\n      var expectedPreviousPageUrl = router.history[router.history.length - 2];\n      var expectedPreviousPageRoute = router.findMatchingRoute(expectedPreviousPageUrl);\n      if (expectedPreviousPageRoute && $previousMaster[0].f7Page && expectedPreviousPageRoute.route === $previousMaster[0].f7Page.route.route) {\n        $previousPage = $previousMaster;\n        if (!navigateOptions.preload) {\n          skipMaster = app.width >= router.params.masterDetailBreakpoint;\n        }\n      }\n    }\n  }\n  if (!navigateOptions.force && $previousPage.length && !skipMaster) {\n    if (router.params.browserHistory && $previousPage[0].f7Page && router.history[router.history.length - 2] !== $previousPage[0].f7Page.route.url) {\n      router.back(router.history[router.history.length - 2], extend(navigateOptions, {\n        force: true\n      }));\n      return router;\n    }\n    var previousPageRoute = $previousPage[0].f7Page.route;\n    if (navigateOptions.preload && $previousPage.hasClass('stacked')) {\n      loadBack(router, {\n        el: $previousPage\n      }, extend(navigateOptions, {\n        route: previousPageRoute\n      }));\n      return router;\n    }\n    processRouteQueue.call(router, previousPageRoute, router.currentRoute, function () {\n      loadBack(router, {\n        el: $previousPage\n      }, extend(navigateOptions, {\n        route: previousPageRoute\n      }));\n    }, function () {}, 'backward');\n    return router;\n  } // Navigate URL\n\n  if (navigateUrl === '#') {\n    navigateUrl = undefined;\n  }\n  if (navigateUrl && navigateUrl[0] !== '/' && navigateUrl.indexOf('#') !== 0) {\n    navigateUrl = ((router.path || '/') + navigateUrl).replace('//', '/');\n  }\n  if (!navigateUrl && router.history.length > 1) {\n    navigateUrl = router.history[router.history.length - 2];\n  }\n  if (skipMaster && !navigateOptions.force && router.history[router.history.length - 3]) {\n    return router.back(router.history[router.history.length - 3], extend({}, navigateOptions || {}, {\n      force: true,\n      animate: false\n    }));\n  }\n  if (skipMaster && !navigateOptions.force) {\n    return router;\n  } // Find route to load\n\n  route = router.findMatchingRoute(navigateUrl);\n  if (!route) {\n    if (navigateUrl) {\n      route = {\n        url: navigateUrl,\n        path: navigateUrl.split('?')[0],\n        query: parseUrlQuery(navigateUrl),\n        route: {\n          path: navigateUrl.split('?')[0],\n          url: navigateUrl\n        }\n      };\n    }\n  }\n  if (!route) {\n    return router;\n  }\n  if (route.route.redirect) {\n    return redirect.call(router, 'backward', route, navigateOptions);\n  }\n  var options = {};\n  if (route.route.options) {\n    extend(options, route.route.options, navigateOptions);\n  } else {\n    extend(options, navigateOptions);\n  }\n  options.route = route;\n  var backForceLoaded;\n  if (options.force && router.params.stackPages) {\n    router.$el.children('.page-previous.stacked').each(function (pageEl) {\n      if (pageEl.f7Page && pageEl.f7Page.route && pageEl.f7Page.route.url === route.url) {\n        backForceLoaded = true;\n        loadBack(router, {\n          el: pageEl\n        }, options);\n      }\n    });\n    if (backForceLoaded) {\n      return router;\n    }\n  }\n  function resolve() {\n    var routerLoaded = false;\n    if (route.route.keepAlive && route.route.keepAliveData) {\n      loadBack(router, {\n        el: route.route.keepAliveData.pageEl\n      }, options);\n      routerLoaded = true;\n    }\n    'url content component pageName el componentUrl'.split(' ').forEach(function (pageLoadProp) {\n      if (route.route[pageLoadProp] && !routerLoaded) {\n        var _loadBack;\n        routerLoaded = true;\n        loadBack(router, (_loadBack = {}, _loadBack[pageLoadProp] = route.route[pageLoadProp], _loadBack), options);\n      }\n    });\n    if (routerLoaded) return; // Async\n\n    function asyncResolve(resolveParams, resolveOptions) {\n      router.allowPageChange = false;\n      loadBack(router, resolveParams, extend(options, resolveOptions), true);\n    }\n    function asyncReject() {\n      router.allowPageChange = true;\n    }\n    if (route.route.async) {\n      router.allowPageChange = false;\n      route.route.async.call(router, {\n        router: router,\n        to: route,\n        from: router.currentRoute,\n        resolve: asyncResolve,\n        reject: asyncReject,\n        direction: 'backward',\n        app: app\n      });\n    }\n    if (route.route.asyncComponent) {\n      asyncComponent(router, route.route.asyncComponent, asyncResolve, asyncReject);\n    }\n  }\n  function reject() {\n    router.allowPageChange = true;\n  }\n  if (options.preload) {\n    resolve();\n  } else {\n    processRouteQueue.call(router, route, router.currentRoute, function () {\n      if (route.route.modules) {\n        app.loadModules(Array.isArray(route.route.modules) ? route.route.modules : [route.route.modules]).then(function () {\n          resolve();\n        }).catch(function () {\n          reject();\n        });\n      } else {\n        resolve();\n      }\n    }, function () {\n      reject();\n    }, 'backward');\n  } // Return Router\n\n  return router;\n}\nexport { back };","map":null,"metadata":{},"sourceType":"module"}