{"ast":null,"code":"import { getWindow } from 'ssr-window';\nimport { extend } from '../../shared/utils';\nvar SW = {\n  registrations: [],\n  register: function register(path, scope) {\n    var app = this;\n    var window = getWindow();\n    if (!('serviceWorker' in window.navigator) || !app.serviceWorker.container) {\n      return new Promise(function (resolve, reject) {\n        reject(new Error('Service worker is not supported'));\n      });\n    }\n    return new Promise(function (resolve, reject) {\n      app.serviceWorker.container.register(path, scope ? {\n        scope: scope\n      } : {}).then(function (reg) {\n        SW.registrations.push(reg);\n        app.emit('serviceWorkerRegisterSuccess', reg);\n        resolve(reg);\n      }).catch(function (error) {\n        app.emit('serviceWorkerRegisterError', error);\n        reject(error);\n      });\n    });\n  },\n  unregister: function unregister(registration) {\n    var app = this;\n    var window = getWindow();\n    if (!('serviceWorker' in window.navigator) || !app.serviceWorker.container) {\n      return new Promise(function (resolve, reject) {\n        reject(new Error('Service worker is not supported'));\n      });\n    }\n    var registrations;\n    if (!registration) registrations = SW.registrations;else if (Array.isArray(registration)) registrations = registration;else registrations = [registration];\n    return Promise.all(registrations.map(function (reg) {\n      return new Promise(function (resolve, reject) {\n        reg.unregister().then(function () {\n          if (SW.registrations.indexOf(reg) >= 0) {\n            SW.registrations.splice(SW.registrations.indexOf(reg), 1);\n          }\n          app.emit('serviceWorkerUnregisterSuccess', reg);\n          resolve();\n        }).catch(function (error) {\n          app.emit('serviceWorkerUnregisterError', reg, error);\n          reject(error);\n        });\n      });\n    }));\n  }\n};\nexport default {\n  name: 'sw',\n  params: {\n    serviceWorker: {\n      path: undefined,\n      scope: undefined\n    }\n  },\n  create: function create() {\n    var app = this;\n    var window = getWindow();\n    extend(app, {\n      serviceWorker: {\n        container: 'serviceWorker' in window.navigator ? window.navigator.serviceWorker : undefined,\n        registrations: SW.registrations,\n        register: SW.register.bind(app),\n        unregister: SW.unregister.bind(app)\n      }\n    });\n  },\n  on: {\n    init: function init() {\n      var window = getWindow();\n      if (!('serviceWorker' in window.navigator)) return;\n      var app = this;\n      if (app.device.cordova || window.Capacitor && window.Capacitor.isNative) return;\n      if (!app.serviceWorker.container) return;\n      var paths = app.params.serviceWorker.path;\n      var scope = app.params.serviceWorker.scope;\n      if (!paths || Array.isArray(paths) && !paths.length) return;\n      var toRegister = Array.isArray(paths) ? paths : [paths];\n      toRegister.forEach(function (path) {\n        app.serviceWorker.register(path, scope);\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}