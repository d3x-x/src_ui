{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { getComponentId } from './utils';\nexport var getRouterInitialComponent = function getRouterInitialComponent(router, initialComponent) {\n  var initialComponentData;\n  var _router$getInitialUrl = router.getInitialUrl(),\n    initialUrl = _router$getInitialUrl.initialUrl;\n  var initialRoute = router.findMatchingRoute(initialUrl);\n  var routeProps = {};\n  if (initialRoute && initialRoute.route && initialRoute.route.options) {\n    routeProps = initialRoute.route.options.props;\n  }\n  var isMasterRoute = function isMasterRoute(route) {\n    if (route.master === true) return true;\n    if (typeof route.master === 'function') return route.master(router.app);\n    return false;\n  };\n  if (initialRoute && initialRoute.route && (initialRoute.route.component || initialRoute.route.asyncComponent) && !isMasterRoute(initialRoute.route)) {\n    initialComponentData = {\n      component: initialRoute.route.component || initialRoute.route.asyncComponent,\n      initialComponent: initialComponent,\n      id: getComponentId(),\n      isAsync: !!initialRoute.route.asyncComponent,\n      props: _extends({\n        f7route: initialRoute,\n        f7router: router\n      }, routeProps, initialRoute.params)\n    };\n  }\n  return {\n    initialPage: initialComponentData,\n    initialRoute: initialRoute\n  };\n};","map":null,"metadata":{},"sourceType":"module"}