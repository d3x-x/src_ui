{"ast":null,"code":"function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\n/* eslint-disable max-classes-per-file */\nimport { getWindow, getDocument } from 'ssr-window';\nimport { extend, serializeObject } from './utils';\nvar globals = {};\nvar jsonpRequests = 0;\nvar RequestResponse = function RequestResponse(obj) {\n  Object.assign(this, obj);\n};\nvar RequestError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(RequestError, _Error);\n  function RequestError(obj) {\n    var _this;\n    _this = _Error.call(this) || this;\n    Object.assign(_assertThisInitialized(_this), obj);\n    return _this;\n  }\n  return RequestError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar request = function request(requestOptions) {\n  return new Promise(function (resolve, reject) {\n    var window = getWindow();\n    var document = getDocument();\n    var globalsNoCallbacks = extend({}, globals);\n    'beforeCreate beforeOpen beforeSend error complete success statusCode'.split(' ').forEach(function (callbackName) {\n      delete globalsNoCallbacks[callbackName];\n    });\n    var defaults = extend({\n      url: window.location.toString(),\n      method: 'GET',\n      data: false,\n      async: true,\n      cache: true,\n      user: '',\n      password: '',\n      headers: {},\n      xhrFields: {},\n      statusCode: {},\n      processData: true,\n      dataType: 'text',\n      contentType: 'application/x-www-form-urlencoded',\n      timeout: 0\n    }, globalsNoCallbacks);\n    var proceedRequest;\n    var options = extend({}, defaults, requestOptions);\n    if (requestOptions.abortController) {\n      options.abortController = requestOptions.abortController;\n    }\n    if (options.abortController && options.abortController.canceled) {\n      reject(new RequestError({\n        options: options,\n        status: 'canceled',\n        message: 'canceled'\n      }));\n      return;\n    } // Function to run XHR callbacks and events\n\n    function fireCallback(callbackName) {\n      /*\n      Callbacks:\n      beforeCreate (options),\n      beforeOpen (xhr, options),\n      beforeSend (xhr, options),\n      error (xhr, status, message),\n      complete (xhr, status),\n      success (response, status, xhr),\n      statusCode ()\n      */\n      var globalCallbackValue;\n      var optionCallbackValue;\n      for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        data[_key - 1] = arguments[_key];\n      }\n      if (globals[callbackName]) {\n        globalCallbackValue = globals[callbackName].apply(globals, data);\n      }\n      if (options[callbackName]) {\n        optionCallbackValue = options[callbackName].apply(options, data);\n      }\n      if (typeof globalCallbackValue !== 'boolean') globalCallbackValue = true;\n      if (typeof optionCallbackValue !== 'boolean') optionCallbackValue = true;\n      if (options.abortController && options.abortController.canceled && (callbackName === 'beforeCreate' || callbackName === 'beforeOpen' || callbackName === 'beforeSend')) {\n        return false;\n      }\n      return globalCallbackValue && optionCallbackValue;\n    } // Before create callback\n\n    proceedRequest = fireCallback('beforeCreate', options);\n    if (proceedRequest === false) {\n      reject(new RequestError({\n        options: options,\n        status: 'canceled',\n        message: 'canceled'\n      }));\n      return;\n    } // For jQuery guys\n\n    if (options.type) options.method = options.type; // Parameters Prefix\n\n    var paramsPrefix = options.url.indexOf('?') >= 0 ? '&' : '?'; // UC method\n\n    var method = options.method.toUpperCase(); // Data to modify GET URL\n\n    if ((method === 'GET' || method === 'HEAD' || method === 'OPTIONS' || method === 'DELETE') && options.data) {\n      var stringData;\n      if (typeof options.data === 'string') {\n        // Should be key=value string\n        if (options.data.indexOf('?') >= 0) stringData = options.data.split('?')[1];else stringData = options.data;\n      } else {\n        // Should be key=value object\n        stringData = serializeObject(options.data);\n      }\n      if (stringData.length) {\n        options.url += paramsPrefix + stringData;\n        if (paramsPrefix === '?') paramsPrefix = '&';\n      }\n    } // JSONP\n\n    if (options.dataType === 'json' && options.url.indexOf('callback=') >= 0) {\n      var callbackName = \"f7jsonp_\" + (Date.now() + (jsonpRequests += 1));\n      var abortTimeout;\n      var callbackSplit = options.url.split('callback=');\n      var requestUrl = callbackSplit[0] + \"callback=\" + callbackName;\n      if (callbackSplit[1].indexOf('&') >= 0) {\n        var addVars = callbackSplit[1].split('&').filter(function (el) {\n          return el.indexOf('=') > 0;\n        }).join('&');\n        if (addVars.length > 0) requestUrl += \"&\" + addVars;\n      } // Create script\n\n      var script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.onerror = function onerror() {\n        clearTimeout(abortTimeout);\n        fireCallback('error', null, 'scripterror', 'scripterror');\n        reject(new RequestError({\n          options: options,\n          status: 'scripterror',\n          message: 'scripterror'\n        }));\n        fireCallback('complete', null, 'scripterror');\n      };\n      script.src = requestUrl; // Handler\n\n      window[callbackName] = function jsonpCallback(data) {\n        clearTimeout(abortTimeout);\n        fireCallback('success', data);\n        script.parentNode.removeChild(script);\n        script = null;\n        delete window[callbackName];\n        resolve(new RequestResponse({\n          options: options,\n          data: data\n        }));\n      };\n      document.querySelector('head').appendChild(script);\n      if (options.timeout > 0) {\n        abortTimeout = setTimeout(function () {\n          script.parentNode.removeChild(script);\n          script = null;\n          fireCallback('error', null, 'timeout', 'timeout');\n          reject(new RequestError({\n            options: options,\n            status: 'timeout',\n            message: 'timeout'\n          }));\n        }, options.timeout);\n      }\n      return;\n    } // Cache for GET/HEAD requests\n\n    if (method === 'GET' || method === 'HEAD' || method === 'OPTIONS' || method === 'DELETE') {\n      if (options.cache === false) {\n        options.url += paramsPrefix + \"_nocache\" + Date.now();\n      }\n    } // Create XHR\n\n    var xhr = new XMLHttpRequest();\n    if (options.abortController) {\n      var aborted = false;\n      options.abortController.onAbort = function () {\n        if (aborted) return;\n        aborted = true;\n        xhr.abort();\n        reject(new RequestError({\n          options: options,\n          xhr: xhr,\n          status: 'canceled',\n          message: 'canceled'\n        }));\n      };\n    } // Save Request URL\n\n    xhr.requestUrl = options.url;\n    xhr.requestParameters = options; // Before open callback\n\n    proceedRequest = fireCallback('beforeOpen', xhr, options);\n    if (proceedRequest === false) {\n      reject(new RequestError({\n        options: options,\n        xhr: xhr,\n        status: 'canceled',\n        message: 'canceled'\n      }));\n      return;\n    } // Open XHR\n\n    xhr.open(method, options.url, options.async, options.user, options.password); // Create POST Data\n\n    var postData = null;\n    if ((method === 'POST' || method === 'PUT' || method === 'PATCH') && options.data) {\n      if (options.processData) {\n        var postDataInstances = [ArrayBuffer, Blob, Document, FormData]; // Post Data\n\n        if (postDataInstances.indexOf(options.data.constructor) >= 0) {\n          postData = options.data;\n        } else {\n          // POST Headers\n          var boundary = \"---------------------------\" + Date.now().toString(16);\n          if (options.contentType === 'multipart/form-data') {\n            xhr.setRequestHeader('Content-Type', \"multipart/form-data; boundary=\" + boundary);\n          } else {\n            xhr.setRequestHeader('Content-Type', options.contentType);\n          }\n          postData = '';\n          var data = serializeObject(options.data);\n          if (options.contentType === 'multipart/form-data') {\n            data = data.split('&');\n            var newData = [];\n            for (var i = 0; i < data.length; i += 1) {\n              newData.push(\"Content-Disposition: form-data; name=\\\"\" + data[i].split('=')[0] + \"\\\"\\r\\n\\r\\n\" + data[i].split('=')[1] + \"\\r\\n\");\n            }\n            postData = \"--\" + boundary + \"\\r\\n\" + newData.join(\"--\" + boundary + \"\\r\\n\") + \"--\" + boundary + \"--\\r\\n\";\n          } else if (options.contentType === 'application/json') {\n            postData = JSON.stringify(options.data);\n          } else {\n            postData = data;\n          }\n        }\n      } else {\n        postData = options.data;\n        xhr.setRequestHeader('Content-Type', options.contentType);\n      }\n    }\n    if (options.dataType === 'json' && (!options.headers || !options.headers.Accept)) {\n      xhr.setRequestHeader('Accept', 'application/json');\n    } // Additional headers\n\n    if (options.headers) {\n      Object.keys(options.headers).forEach(function (headerName) {\n        if (typeof options.headers[headerName] === 'undefined') return;\n        xhr.setRequestHeader(headerName, options.headers[headerName]);\n      });\n    } // Check for crossDomain\n\n    if (typeof options.crossDomain === 'undefined') {\n      options.crossDomain =\n      // eslint-disable-next-line\n      /^([\\w-]+:)?\\/\\/([^\\/]+)/.test(options.url) && RegExp.$2 !== window.location.host;\n    }\n    if (!options.crossDomain) {\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    }\n    if (options.xhrFields) {\n      extend(xhr, options.xhrFields);\n    } // Handle XHR\n\n    xhr.onload = function onload() {\n      if (xhr.status >= 200 && xhr.status < 300 || xhr.status === 0) {\n        var responseData;\n        if (options.dataType === 'json') {\n          var parseError;\n          try {\n            responseData = JSON.parse(xhr.responseText);\n          } catch (err) {\n            parseError = true;\n          }\n          if (!parseError) {\n            fireCallback('success', responseData, xhr.status, xhr);\n            resolve(new RequestResponse({\n              options: options,\n              data: responseData,\n              status: xhr.status,\n              xhr: xhr\n            }));\n          } else {\n            fireCallback('error', xhr, 'parseerror', 'parseerror');\n            reject(new RequestError({\n              options: options,\n              xhr: xhr,\n              status: 'parseerror',\n              message: 'parseerror'\n            }));\n          }\n        } else {\n          responseData = xhr.responseType === 'text' || xhr.responseType === '' ? xhr.responseText : xhr.response;\n          fireCallback('success', responseData, xhr.status, xhr);\n          resolve(new RequestResponse({\n            options: options,\n            data: responseData,\n            status: xhr.status,\n            xhr: xhr\n          }));\n        }\n      } else {\n        fireCallback('error', xhr, xhr.status, xhr.statusText);\n        reject(new RequestError({\n          options: options,\n          xhr: xhr,\n          status: xhr.status,\n          message: xhr.statusText\n        }));\n      }\n      if (options.statusCode) {\n        if (globals.statusCode && globals.statusCode[xhr.status]) globals.statusCode[xhr.status](xhr);\n        if (options.statusCode[xhr.status]) options.statusCode[xhr.status](xhr);\n      }\n      fireCallback('complete', xhr, xhr.status);\n    };\n    xhr.onerror = function onerror() {\n      fireCallback('error', xhr, xhr.status, xhr.status);\n      reject(new RequestError({\n        options: options,\n        xhr: xhr,\n        status: xhr.status,\n        message: xhr.statusText\n      }));\n      fireCallback('complete', xhr, 'error');\n    }; // Timeout\n\n    if (options.timeout > 0) {\n      xhr.timeout = options.timeout;\n      xhr.ontimeout = function () {\n        fireCallback('error', xhr, 'timeout', 'timeout');\n        reject(new RequestError({\n          options: options,\n          xhr: xhr,\n          status: 'timeout',\n          message: 'timeout'\n        }));\n        fireCallback('complete', xhr, 'timeout');\n      };\n    } // Ajax start callback\n\n    proceedRequest = fireCallback('beforeSend', xhr, options);\n    if (proceedRequest === false) {\n      reject(new RequestError({\n        options: options,\n        xhr: xhr,\n        status: 'canceled',\n        message: 'canceled'\n      }));\n      return;\n    } // Send XHR\n\n    xhr.send(postData);\n  });\n};\nfunction requestShortcut(method) {\n  var _ref = [],\n    url = _ref[0],\n    data = _ref[1],\n    success = _ref[2],\n    error = _ref[3],\n    dataType = _ref[4];\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n  if (typeof args[1] === 'function') {\n    url = args[0];\n    success = args[1];\n    error = args[2];\n    dataType = args[3];\n  } else {\n    url = args[0];\n    data = args[1];\n    success = args[2];\n    error = args[3];\n    dataType = args[4];\n  }\n  [success, error].forEach(function (callback) {\n    if (typeof callback === 'string') {\n      dataType = callback;\n      if (callback === success) success = undefined;else error = undefined;\n    }\n  });\n  dataType = dataType || (method === 'json' || method === 'postJSON' ? 'json' : undefined);\n  var requestOptions = {\n    url: url,\n    method: method === 'post' || method === 'postJSON' ? 'POST' : 'GET',\n    data: data,\n    success: success,\n    error: error,\n    dataType: dataType\n  };\n  if (method === 'postJSON') {\n    extend(requestOptions, {\n      contentType: 'application/json',\n      processData: false,\n      crossDomain: true,\n      data: typeof data === 'string' ? data : JSON.stringify(data)\n    });\n  }\n  return request(requestOptions);\n}\nObject.assign(request, {\n  get: function get() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    return requestShortcut.apply(void 0, ['get'].concat(args));\n  },\n  post: function post() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    return requestShortcut.apply(void 0, ['post'].concat(args));\n  },\n  json: function json() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    return requestShortcut.apply(void 0, ['json'].concat(args));\n  },\n  getJSON: function getJSON() {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    return requestShortcut.apply(void 0, ['json'].concat(args));\n  },\n  postJSON: function postJSON() {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    return requestShortcut.apply(void 0, ['postJSON'].concat(args));\n  }\n});\nrequest.abortController = function () {\n  var contoller = {\n    canceled: false,\n    onAbort: null,\n    abort: function abort() {\n      contoller.canceled = true;\n      if (contoller.onAbort) contoller.onAbort();\n    }\n  };\n  return contoller;\n};\nrequest.setup = function setup(options) {\n  if (options.type && !options.method) {\n    extend(options, {\n      method: options.type\n    });\n  }\n  extend(globals, options);\n};\nexport default request;","map":null,"metadata":{},"sourceType":"module"}